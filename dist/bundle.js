(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
(function (process,global){
/*!
 * Vue.js v2.5.13
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
'use strict';

/*  */

var emptyObject = Object.freeze({});

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value e.g. [object Object]
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : typeof val === 'object'
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if a attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind, faster than native
 */
function bind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }
  // record original fn length
  boundFn._length = fn.length;
  return boundFn
}

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/**
 * Return same value
 */
var identity = function (_) { return _; };

/**
 * Generate a static keys string from compiler modules.
 */


/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured'
];

/*  */

var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: process.env.NODE_ENV !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: process.env.NODE_ENV !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */


// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = (function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (process.env.NODE_ENV !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm || {};
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */


var uid$1 = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid$1++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget (_target) {
  if (Dep.target) { targetStack.push(Dep.target); }
  Dep.target = _target;
}

function popTarget () {
  Dep.target = targetStack.pop();
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode, deep) {
  var componentOptions = vnode.componentOptions;
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    vnode.children,
    vnode.text,
    vnode.elm,
    vnode.context,
    componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.isCloned = true;
  if (deep) {
    if (vnode.children) {
      cloned.children = cloneVNodes(vnode.children, true);
    }
    if (componentOptions && componentOptions.children) {
      componentOptions.children = cloneVNodes(componentOptions.children, true);
    }
  }
  return cloned
}

function cloneVNodes (vnodes, deep) {
  var len = vnodes.length;
  var res = new Array(len);
  for (var i = 0; i < len; i++) {
    res[i] = cloneVNode(vnodes[i], deep);
  }
  return res
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);[
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
].forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * By default, when a reactive property is set, the new value is
 * also converted to become reactive. However when passing down props,
 * we don't want to force conversion because the value may be a nested value
 * under a frozen data structure. Converting it would defeat the optimization.
 */
var observerState = {
  shouldConvert: true
};

/**
 * Observer class that are attached to each observed
 * object. Once attached, the observer converts target
 * object's property keys into getter/setters that
 * collect dependencies and dispatches updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto
      ? protoAugment
      : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive(obj, keys[i], obj[keys[i]]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    observerState.shouldConvert &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (process.env.NODE_ENV !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      process.env.NODE_ENV !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  return childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'can only contain alphanumeric characters and the hyphen, ' +
      'and must start with a letter.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (process.env.NODE_ENV !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (process.env.NODE_ENV !== 'production') {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (process.env.NODE_ENV !== 'production') {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (process.env.NODE_ENV !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */

function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // handle boolean props
  if (isType(Boolean, prop.type)) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
      value = true;
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldConvert = observerState.shouldConvert;
    observerState.shouldConvert = true;
    observe(value);
    observerState.shouldConvert = prevShouldConvert;
  }
  if (
    process.env.NODE_ENV !== 'production' &&
    // skip validation for weex recycle-list child component props
    !(false && isObject(value) && ('@binding' in value))
  ) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (process.env.NODE_ENV !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn(
      "Invalid prop: type check failed for prop \"" + name + "\"." +
      " Expected " + (expectedTypes.map(capitalize).join(', ')) +
      ", got " + (toRawType(value)) + ".",
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isType (type, fn) {
  if (!Array.isArray(fn)) {
    return getType(fn) === getType(type)
  }
  for (var i = 0, len = fn.length; i < len; i++) {
    if (getType(fn[i]) === getType(type)) {
      return true
    }
  }
  /* istanbul ignore next */
  return false
}

/*  */

function handleError (err, vm, info) {
  if (vm) {
    var cur = vm;
    while ((cur = cur.$parent)) {
      var hooks = cur.$options.errorCaptured;
      if (hooks) {
        for (var i = 0; i < hooks.length; i++) {
          try {
            var capture = hooks[i].call(cur, err, vm, info) === false;
            if (capture) { return }
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook');
          }
        }
      }
    }
  }
  globalHandleError(err, vm, info);
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      logError(e, null, 'config.errorHandler');
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (process.env.NODE_ENV !== 'production') {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */
/* globals MessageChannel */

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using both micro and macro tasks.
// In < 2.4 we used micro tasks everywhere, but there are some scenarios where
// micro tasks have too high a priority and fires in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using macro tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use micro task by default, but expose a way to force macro task when
// needed (e.g. in event handlers attached by v-on).
var microTimerFunc;
var macroTimerFunc;
var useMacroTask = false;

// Determine (macro) Task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.
/* istanbul ignore if */
if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  macroTimerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else if (typeof MessageChannel !== 'undefined' && (
  isNative(MessageChannel) ||
  // PhantomJS
  MessageChannel.toString() === '[object MessageChannelConstructor]'
)) {
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;
  macroTimerFunc = function () {
    port.postMessage(1);
  };
} else {
  /* istanbul ignore next */
  macroTimerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

// Determine MicroTask defer implementation.
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  microTimerFunc = function () {
    p.then(flushCallbacks);
    // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
} else {
  // fallback to macro
  microTimerFunc = macroTimerFunc;
}

/**
 * Wrap a function so that if any code inside triggers state change,
 * the changes are queued using a Task instead of a MicroTask.
 */
function withMacroTask (fn) {
  return fn._withTask || (fn._withTask = function () {
    useMacroTask = true;
    var res = fn.apply(null, arguments);
    useMacroTask = false;
    return res
  })
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (process.env.NODE_ENV !== 'production') {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' &&
    Proxy.toString().match(/native code/);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val)) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (process.env.NODE_ENV !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments)
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  vm
) {
  var name, def, cur, old, event;
  for (name in on) {
    def = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    /* istanbul ignore if */
    if (isUndef(cur)) {
      process.env.NODE_ENV !== 'production' && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (process.env.NODE_ENV !== 'production') {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor,
  context
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function () {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      process.env.NODE_ENV !== 'production' && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(
                process.env.NODE_ENV !== 'production'
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn, once) {
  if (once) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$off(event[i], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    if (fn) {
      // specific handler
      var cb;
      var i$1 = cbs.length;
      while (i$1--) {
        cb = cbs[i$1];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i$1, 1);
          break
        }
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (process.env.NODE_ENV !== 'production') {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, ("event handler for \"" + event + "\""));
        }
      }
    }
    return vm
  };
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  var slots = {};
  if (!children) {
    return slots
  }
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

function resolveScopedSlots (
  fns, // see flow/vnode
  res
) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(
        vm.$el, vnode, hydrating, false /* removeOnly */,
        vm.$options._parentElm,
        vm.$options._refElm
      );
      // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)
      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    observerState.shouldConvert = false;
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      props[key] = validateProp(key, vm.$options.props, propsData, vm);
    }
    observerState.shouldConvert = true;
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  if (listeners) {
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);
  }
  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, (hook + " hook"));
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
}

/*  */


var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (process.env.NODE_ENV !== 'production') {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = process.env.NODE_ENV !== 'production'
    ? expOrFn.toString()
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      process.env.NODE_ENV !== 'production' && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
    var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  observerState.shouldConvert = isRoot;
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {
      defineReactive(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  observerState.shouldConvert = true;
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    process.env.NODE_ENV !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (process.env.NODE_ENV !== 'production') {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : userDef;
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : userDef.get
      : noop;
    sharedPropertyDefinition.set = userDef.set
      ? userDef.set
      : noop;
  }
  if (process.env.NODE_ENV !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (process.env.NODE_ENV !== 'production') {
      if (methods[key] == null) {
        warn(
          "Method \"" + key + "\" has an undefined value in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  keyOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(keyOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (process.env.NODE_ENV !== 'production') {
    dataDef.set = function (newData) {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    observerState.shouldConvert = false;
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        defineReactive(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {
        defineReactive(vm, key, result[key]);
      }
    });
    observerState.shouldConvert = true;
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject).filter(function (key) {
        /* istanbul ignore next */
        return Object.getOwnPropertyDescriptor(inject, key).enumerable
      })
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && provideKey in source._provided) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (process.env.NODE_ENV !== 'production') {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    (ret)._isVList = true;
  }
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes) {
      if (process.env.NODE_ENV !== 'production' && slotNodes._rendered) {
        warn(
          "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
          "- this will likely cause render errors.",
          this
        );
      }
      slotNodes._rendered = true;
    }
    nodes = slotNodes || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInAlias,
  eventKeyName
) {
  var keyCodes = config.keyCodes[key] || builtInAlias;
  if (keyCodes) {
    if (Array.isArray(keyCodes)) {
      return keyCodes.indexOf(eventKeyCode) === -1
    } else {
      return keyCodes !== eventKeyCode
    }
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree by doing a shallow clone.
  if (tree && !isInFor) {
    return Array.isArray(tree)
      ? cloneVNodes(tree)
      : cloneVNode(tree)
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var options = Ctor.options;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () { return resolveSlots(children, parent); };

  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm = Object.create(parent);
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = data.scopedSlots || emptyObject;
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    vnode.fnContext = contextVm;
    vnode.fnOptions = options;
    if (data.slot) {
      (vnode.data || (vnode.data = {})).slot = data.slot;
    }
  }

  return vnode
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */




// Register the component hook to weex native render engine.
// The hook will be triggered by native, not javascript.


// Updates the state of the component to weex native render engine.

/*  */

// https://github.com/Hanks10100/weex-native-directive/tree/master/component

// listening on native callback

/*  */

/*  */

// hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (
    vnode,
    hydrating,
    parentElm,
    refElm
  ) {
    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance,
        parentElm,
        refElm
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    } else if (vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (process.env.NODE_ENV !== 'production') {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // merge component management hooks onto the placeholder node
  mergeHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  // Weex specific: invoke recycle-list optimized @render function for
  // extracting cell-slot template.
  // https://github.com/Hanks10100/weex-native-directive/tree/master/component
  /* istanbul ignore if */
  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm,
  refElm
) {
  var options = {
    _isComponent: true,
    parent: parent,
    _parentVnode: vnode,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function mergeHooks (data) {
  if (!data.hook) {
    data.hook = {};
  }
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var fromParent = data.hook[key];
    var ours = componentVNodeHooks[key];
    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
  }
}

function mergeHook$1 (one, two) {
  return function (a, b, c, d) {
    one(a, b, c, d);
    two(a, b, c, d);
  }
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    process.env.NODE_ENV !== 'production' && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (process.env.NODE_ENV !== 'production' &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (isDef(vnode)) {
    if (ns) { applyNS(vnode, ns); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force))) {
        applyNS(child, ns, force);
      }
    }
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (vm._isMounted) {
      // if the parent didn't update, the slot nodes will be the ones from
      // last render. They need to be cloned to ensure "freshness" for this render.
      for (var key in vm.$slots) {
        var slot = vm.$slots[key];
        // _rendered is a flag added by renderSlot, but may not be present
        // if the slot is passed from manually written render functions
        if (slot._rendered || (slot[0] && slot[0].elm)) {
          vm.$slots[key] = cloneVNodes(slot, true /* deep */);
        }
      }
    }

    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            handleError(e, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

var uid = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified
}

function dedupe (latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res
  } else {
    return latest
  }
}

function Vue$3 (options) {
  if (process.env.NODE_ENV !== 'production' &&
    !(this instanceof Vue$3)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue$3);
stateMixin(Vue$3);
eventsMixin(Vue$3);
lifecycleMixin(Vue$3);
renderMixin(Vue$3);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (process.env.NODE_ENV !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production' && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */

function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache, key, this$1.keys);
    }
  },

  watch: {
    include: function include (val) {
      pruneCache(this, function (name) { return matches(val, name); });
    },
    exclude: function exclude (val) {
      pruneCache(this, function (name) { return !matches(val, name); });
    }
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (process.env.NODE_ENV !== 'production') {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue$3);

Object.defineProperty(Vue$3.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue$3.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

Vue$3.version = '2.5.13';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);



var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      process.env.NODE_ENV !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setAttribute (node, key, val) {
  node.setAttribute(key, val);
}


var nodeOps = Object.freeze({
	createElement: createElement$1,
	createElementNS: createElementNS,
	createTextNode: createTextNode,
	createComment: createComment,
	insertBefore: insertBefore,
	removeChild: removeChild,
	appendChild: appendChild,
	parentNode: parentNode,
	nextSibling: nextSibling,
	tagName: tagName,
	setTextContent: setTextContent,
	setAttribute: setAttribute
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!key) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove () {
      if (--remove.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove.listeners = listeners;
    return remove
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;
  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (process.env.NODE_ENV !== 'production') {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }
      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (process.env.NODE_ENV !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (process.env.NODE_ENV !== 'production') {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setAttribute(vnode.elm, i, '');
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setAttribute(vnode.elm, i, '');
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setAttribute(vnode.elm, i, '');
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    if (process.env.NODE_ENV !== 'production') {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    if (process.env.NODE_ENV !== 'production') {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (process.env.NODE_ENV !== 'production') {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // #7138: IE10 & 11 fires input event when setting placeholder on
      // <textarea>... block the first input event and remove the blocker
      // immediately.
      /* istanbul ignore if */
      if (
        isIE && !isIE9 &&
        el.tagName === 'TEXTAREA' &&
        key === 'placeholder' && !el.__ieph
      ) {
        var blocker = function (e) {
          e.stopImmediatePropagation();
          el.removeEventListener('input', blocker);
        };
        el.addEventListener('input', blocker);
        // $flow-disable-line
        el.__ieph = true; /* IE placeholder patched */
      }
      el.setAttribute(key, value);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

/*  */









// add a raw attr (use this in preTransforms)








// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.

/*  */

/**
 * Cross-platform code generation for component v-model
 */


/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler (handler, event, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

function add$1 (
  event,
  handler,
  once$$1,
  capture,
  passive
) {
  handler = withMacroTask(handler);
  if (once$$1) { handler = createOnceHandler(handler, event, capture); }
  target$1.addEventListener(
    event,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  event,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    event,
    handler._withTask || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.lazy) {
      // inputs with lazy should only be updated when not in focus
      return false
    }
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def) {
  if (!def) {
    return
  }
  /* istanbul ignore else */
  if (typeof def === 'object') {
    var res = {};
    if (def.css !== false) {
      extend(res, autoCssTransition(def.name || 'v'));
    }
    extend(res, def);
    return res
  } else if (typeof def === 'string') {
    return autoCssTransition(def)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

function toMs (s) {
  return Number(s.slice(0, -1)) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      addTransitionClass(el, toClass);
      removeTransitionClass(el, startClass);
      if (!cb.cancelled && !userWantsControl) {
        if (isValidDuration(explicitEnterDuration)) {
          setTimeout(cb, explicitEnterDuration);
        } else {
          whenTransitionEnds(el, type, cb);
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        addTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitLeaveDuration)) {
            setTimeout(cb, explicitLeaveDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        if (!isAndroid) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
        }
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    process.env.NODE_ENV !== 'production' && warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (value === oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

// Provides transition support for a single element/component.
// supports transition mode (out-in / in-out)

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (process.env.NODE_ENV !== 'production' && children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (process.env.NODE_ENV !== 'production' &&
      mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

// Provides transition support for list items.
// supports move transitions using the FLIP technique.

// Because the vdom's children update algorithm is "unstable" - i.e.
// it doesn't guarantee the relative positioning of removed elements,
// we force transition-group to update its children into two passes:
// in the first pass, we remove all nodes that need to be removed,
// triggering their leaving transition; in the second pass, we insert/move
// into the final desired state. This way in the second pass removed
// nodes will remain where they should be.

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (process.env.NODE_ENV !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  beforeUpdate: function beforeUpdate () {
    // force removing pass
    this.__patch__(
      this._vnode,
      this.kept,
      false, // hydrating
      true // removeOnly (!important avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue$3.config.mustUseProp = mustUseProp;
Vue$3.config.isReservedTag = isReservedTag;
Vue$3.config.isReservedAttr = isReservedAttr;
Vue$3.config.getTagNamespace = getTagNamespace;
Vue$3.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue$3.options.directives, platformDirectives);
extend(Vue$3.options.components, platformComponents);

// install platform patch function
Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue$3.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
Vue$3.nextTick(function () {
  if (config.devtools) {
    if (devtools) {
      devtools.emit('init', Vue$3);
    } else if (process.env.NODE_ENV !== 'production' && isChrome) {
      console[console.info ? 'info' : 'log'](
        'Download the Vue Devtools extension for a better development experience:\n' +
        'https://github.com/vuejs/vue-devtools'
      );
    }
  }
  if (process.env.NODE_ENV !== 'production' &&
    config.productionTip !== false &&
    inBrowser && typeof console !== 'undefined'
  ) {
    console[console.info ? 'info' : 'log'](
      "You are running Vue in development mode.\n" +
      "Make sure to turn on production mode when deploying for production.\n" +
      "See more tips at https://vuejs.org/guide/deployment.html"
    );
  }
}, 0);

/*  */

module.exports = Vue$3;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":1}],3:[function(require,module,exports){
var inserted = exports.cache = {}

function noop () {}

exports.insert = function (css) {
  if (inserted[css]) return noop
  inserted[css] = true

  var elem = document.createElement('style')
  elem.setAttribute('type', 'text/css')

  if ('textContent' in elem) {
    elem.textContent = css
  } else {
    elem.styleSheet.cssText = css
  }

  document.getElementsByTagName('head')[0].appendChild(elem)
  return function () {
    document.getElementsByTagName('head')[0].removeChild(elem)
    inserted[css] = false
  }
}

},{}],4:[function(require,module,exports){
var Vue // late bind
var version
var map = (window.__VUE_HOT_MAP__ = Object.create(null))
var installed = false
var isBrowserify = false
var initHookName = 'beforeCreate'

exports.install = function (vue, browserify) {
  if (installed) { return }
  installed = true

  Vue = vue.__esModule ? vue.default : vue
  version = Vue.version.split('.').map(Number)
  isBrowserify = browserify

  // compat with < 2.0.0-alpha.7
  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init'
  }

  exports.compatible = version[0] >= 2
  if (!exports.compatible) {
    console.warn(
      '[HMR] You are using a version of vue-hot-reload-api that is ' +
        'only compatible with Vue.js core ^2.0.0.'
    )
    return
  }
}

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  var Ctor = null
  if (typeof options === 'function') {
    Ctor = options
    options = Ctor.options
  }
  makeOptionsHot(id, options)
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  }
}

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render
    options.render = function (h, ctx) {
      var instances = map[id].instances
      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent)
      }
      return render(h, ctx)
    }
  } else {
    injectHook(options, initHookName, function() {
      var record = map[id]
      if (!record.Ctor) {
        record.Ctor = this.constructor
      }
      record.instances.push(this)
    })
    injectHook(options, 'beforeDestroy', function() {
      var instances = map[id].instances
      instances.splice(instances.indexOf(this), 1)
    })
  }
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook(options, name, hook) {
  var existing = options[name]
  options[name] = existing
    ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook]
    : [hook]
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg)
    } catch (e) {
      console.error(e)
      console.warn(
        'Something went wrong during Vue component hot-reload. Full reload required.'
      )
    }
  }
}

function updateOptions (oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key]
    }
  }
  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1]
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id]
  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate()
    })
    return
  }
  if (typeof options === 'function') {
    options = options.options
  }
  if (record.Ctor) {
    record.Ctor.options.render = options.render
    record.Ctor.options.staticRenderFns = options.staticRenderFns
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render
      instance.$options.staticRenderFns = options.staticRenderFns
      // reset static trees
      // pre 2.5, all static trees are cahced together on the instance
      if (instance._staticTrees) {
        instance._staticTrees = []
      }
      // 2.5.0
      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = []
      }
      // 2.5.3
      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = []
      }
      // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)
      instance.$forceUpdate()
    })
  } else {
    // functional or no instance created yet
    record.options.render = options.render
    record.options.staticRenderFns = options.staticRenderFns

    // handle functional component re-render
    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options)
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles
        if (injectStyles) {
          var render = options.render
          record.options.render = function (h, ctx) {
            injectStyles.call(ctx)
            return render(h, ctx)
          }
        }
      }
      record.options._Ctor = null
      // 2.5.3
      if (Array.isArray(record.options.cached)) {
        record.options.cached = []
      }
      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate()
      })
    }
  }
})

exports.reload = tryWrap(function (id, options) {
  var record = map[id]
  if (options) {
    if (typeof options === 'function') {
      options = options.options
    }
    makeOptionsHot(id, options)
    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options
      }
      var newCtor = record.Ctor.super.extend(options)
      record.Ctor.options = newCtor.options
      record.Ctor.cid = newCtor.cid
      record.Ctor.prototype = newCtor.prototype
      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release()
      }
    } else {
      updateOptions(record.options, options)
    }
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate()
    } else {
      console.warn(
        'Root or manually mounted instance modified. Full reload required.'
      )
    }
  })
})

},{}],5:[function(require,module,exports){
'use strict';

var _mAplication = require('../vue/m-aplication.vue');

var _mAplication2 = _interopRequireDefault(_mAplication);

var _lang = require('./lang');

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Vue.config.devtools = true;

var lang = new _lang2.default();

window.document.title = lang.translate('title');

Vue.directive('lang', {
    inserted: function inserted(el, binding) {
        el.innerHTML = lang.translate(binding.value);
    }
});
Vue.directive('lang-children', {
    inserted: function inserted(el, binding) {
        el.children[0].innerHTML = lang.translate(binding.value);
    }
});

new Vue({
    el: '#app',
    components: { mApplication: _mAplication2.default }
});

},{"../vue/m-aplication.vue":8,"./lang":6}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Lang = function () {
    function Lang() {
        _classCallCheck(this, Lang);

        this.detected = (navigator.language || navigator.userLanguage).split('-')[0];
        this.current = '';
        this.dictionary = Lang.load(this.current || this.detected);
    }

    _createClass(Lang, [{
        key: 'translate',
        value: function translate(key) {
            return _.get(this.dictionary, key, '#fix this#');
        }
    }], [{
        key: 'load',
        value: function load(lang, stop) {
            var dictionary = null;
            $.ajax({
                url: '/lang/' + lang + '.json',
                dataType: 'json',
                async: false,
                success: function success(data) {
                    dictionary = data;
                },
                error: function error() {}
            });
            return dictionary == null && !stop ? Lang.load('en') : dictionary;
        }
    }]);

    return Lang;
}();

exports.default = Lang;

},{}],7:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("@font-face {\n  font-family: 'Bebas';\n  src: url(\"/font/bebas.eot?k6fn45\");\n  src: url(\"/font/bebas.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/bebas.ttf?k6fn45\") format(\"truetype\"), url(\"/font/bebas.woff?k6fn45\") format(\"woff\"), url(\"/font/bebas.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Acrobat';\n  src: url(\"/font/acrobat.eot?k6fn45\");\n  src: url(\"/font/acrobat.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/acrobat.ttf?k6fn45\") format(\"truetype\"), url(\"/font/acrobat.woff?k6fn45\") format(\"woff\"), url(\"/font/acrobat.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n/* line 34, src/scss/main.scss */\nbody {\n  font-family: Acrobat; }\n\n/* line 38, src/scss/main.scss */\n.--acrobat {\n  font-family: Acrobat; }\n\n/* line 42, src/scss/main.scss */\n.--bebas {\n  font-family: Bebas; }\n\n/* line 46, src/scss/main.scss */\n.--uppercase {\n  text-transform: uppercase; }\n\n/* line 50, src/scss/main.scss */\n.--my-color {\n  color: #3399cc; }\n\n/* line 54, src/scss/main.scss */\n.--my-gray {\n  color: #343a40; }\n  /* line 57, src/scss/main.scss */\n  .--my-gray:hover {\n    color: #3399cc; }\n\n/* line 62, src/scss/main.scss */\n.--radius {\n  border: 2px solid #3399cc;\n  border-radius: 100%;\n  color: #3399cc; }\n  /* line 67, src/scss/main.scss */\n  .--radius:hover {\n    border-color: #297aa3;\n    color: #297aa3; }\n\n/* line 73, src/scss/main.scss */\n.subheading {\n  font-weight: 500;\n  font-size: 1.37rem;\n  color: #868e96; }\n\n/* line 79, src/scss/main.scss */\nh1 {\n  font-size: 6rem;\n  line-height: 6rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 86, src/scss/main.scss */\nh2 {\n  font-size: 3.5rem;\n  line-height: 4rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 93, src/scss/main.scss */\nh3 {\n  color: #343a40; }\n\n/* line 52, stdin */\n.my-link {\n  text-decoration: none; }\n  /* line 55, stdin */\n  .my-link:hover {\n    text-decoration: none; }\n\n/* line 60, stdin */\n.my-contact {\n  text-decoration: none; }\n  /* line 63, stdin */\n  .my-contact:hover {\n    text-decoration: none;\n    color: #297aa3; }\n\n/* line 69, stdin */\n.my-qr {\n  width: 6rem;\n  height: 6rem; }\n  /* line 72, stdin */\n  .my-qr-code {\n    width: 6rem;\n    height: 6rem;\n    display: block;\n    padding: 0.4rem;\n    font-size: 5rem;\n    color: #343a40;\n    border: 2px solid #3399cc; }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-about"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "my-auto" }, [_c('div', { staticClass: "d-flex flex-column flex-md-row mb-5 justify-content-between" }, [_c('div', { staticClass: "my-info" }, [_c('h1', { staticClass: "my-about-name mb-0 --bebas" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.name', expression: "'about.name'" }] }), _vm._v(" "), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.surname', expression: "'about.surname'" }], staticClass: "--my-color" })]), _vm._v(" "), _c('div', { staticClass: "subheading mb-5 --uppercase --bebas" }, [_c('a', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.mail', expression: "'about.mail'" }], staticClass: "--my-color my-contact", attrs: { "href": "mailto:name@email.com" } }), _vm._v(" "), _c('span', [_vm._v(" · ")]), _vm._v(" "), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.location', expression: "'about.location'" }] }), _vm._v(" "), _c('span', [_vm._v(" · ")]), _vm._v(" "), _c('a', { staticClass: "--my-color my-contact", attrs: { "href": "tel:+38 (066) 034-91-40" } }, [_vm._v("+38 (066) 034-91-40")])])]), _vm._v(" "), _vm._m(0)]), _vm._v(" "), _c('div', { staticClass: "subheading mb-5" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'about.information', expression: "'about.information'" }] })]), _vm._v(" "), _c('div', { staticClass: "subheading mb-5" }, [_c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.click", modifiers: { "click": true } }], staticClass: "my-link", attrs: { "href": "https://vk.com/skyuoker", "target": "_blank", "title": "Vkontakte" } }, [_c('span', { staticClass: "icon-vk --radius p-2" })]), _vm._v(" "), _c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "my-link", attrs: { "href": "https://t.me/sjrslv", "target": "_blank", "title": "Telegram" } }, [_c('span', { staticClass: "icon-telegram --radius p-2" })]), _vm._v(" "), _c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "my-link", attrs: { "href": "viber://chat?number=+380660349140", "target": "_blank", "title": "Viber" } }, [_c('span', { staticClass: "icon-viber --radius p-2" })]), _vm._v(" "), _c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "my-link", attrs: { "href": "skype:altagere?call", "target": "_blank", "title": "Skype" } }, [_c('span', { staticClass: "icon-skype --radius p-2" })]), _vm._v(" "), _c('a', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "my-link", attrs: { "href": "https://github.com/SalygaYaroslav", "target": "_blank", "title": "GitHub" } }, [_c('span', { staticClass: "icon-github --radius p-2" })])])]);
};
__vue__options__.staticRenderFns = [function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "my-qr flex-md-row mt-3" }, [_c('span', { staticClass: "my-qr-code icon-qrcode" }, [_c('span', { staticClass: "path2" })])]);
}];
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-17021539", __vue__options__);
    } else {
      hotAPI.rerender("data-v-17021539", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],8:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("@font-face {\n  font-family: 'Bebas';\n  src: url(\"/font/bebas.eot?k6fn45\");\n  src: url(\"/font/bebas.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/bebas.ttf?k6fn45\") format(\"truetype\"), url(\"/font/bebas.woff?k6fn45\") format(\"woff\"), url(\"/font/bebas.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Acrobat';\n  src: url(\"/font/acrobat.eot?k6fn45\");\n  src: url(\"/font/acrobat.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/acrobat.ttf?k6fn45\") format(\"truetype\"), url(\"/font/acrobat.woff?k6fn45\") format(\"woff\"), url(\"/font/acrobat.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n/* line 34, src/scss/main.scss */\nbody {\n  font-family: Acrobat; }\n\n/* line 38, src/scss/main.scss */\n.--acrobat {\n  font-family: Acrobat; }\n\n/* line 42, src/scss/main.scss */\n.--bebas {\n  font-family: Bebas; }\n\n/* line 46, src/scss/main.scss */\n.--uppercase {\n  text-transform: uppercase; }\n\n/* line 50, src/scss/main.scss */\n.--my-color {\n  color: #3399cc; }\n\n/* line 54, src/scss/main.scss */\n.--my-gray {\n  color: #343a40; }\n  /* line 57, src/scss/main.scss */\n  .--my-gray:hover {\n    color: #3399cc; }\n\n/* line 62, src/scss/main.scss */\n.--radius {\n  border: 2px solid #3399cc;\n  border-radius: 100%;\n  color: #3399cc; }\n  /* line 67, src/scss/main.scss */\n  .--radius:hover {\n    border-color: #297aa3;\n    color: #297aa3; }\n\n/* line 73, src/scss/main.scss */\n.subheading {\n  font-weight: 500;\n  font-size: 1.37rem;\n  color: #868e96; }\n\n/* line 79, src/scss/main.scss */\nh1 {\n  font-size: 6rem;\n  line-height: 6rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 86, src/scss/main.scss */\nh2 {\n  font-size: 3.5rem;\n  line-height: 4rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 93, src/scss/main.scss */\nh3 {\n  color: #343a40; }\n\n/* line 38, stdin */\n.my-nav {\n  background-color: #3399cc; }\n  /* line 41, stdin */\n  .my-nav .navbar-brand {\n    color: #ffffff; }\n    /* line 43, stdin */\n    .my-nav .navbar-brand:hover {\n      color: #ffffff; }\n  /* line 47, stdin */\n  .my-nav .navbar-toggler {\n    border-color: #ffffff; }\n    /* line 49, stdin */\n    .my-nav .navbar-toggler .navbar-toggler-icon {\n      background-image: unset;\n      -webkit-mask: url(/assets/toggle.svg) no-repeat 50% 50%;\n      mask: url(/assets/toggle.svg) no-repeat 50% 50%;\n      background-color: #ffffff; }\n  /* line 57, stdin */\n  .my-nav .img-profile {\n    max-width: 10rem;\n    max-height: 10rem;\n    border: 0.8rem solid #297aa3; }\n  /* line 63, stdin */\n  .my-nav .nav-item.active {\n    background-color: #297aa3; }\n  /* line 67, stdin */\n  .my-nav .nav-item .nav-link {\n    color: #ffffff;\n    text-transform: uppercase;\n    font-size: 1.5rem; }\n\n@media (max-width: 576px) {\n  /* line 76, stdin */\n  .my-content {\n    margin-top: 50px; } }\n\n@media (min-width: 992px) {\n  /* line 82, stdin */\n  body {\n    padding-top: 0;\n    padding-left: 20rem; }\n  /* line 86, stdin */\n  .my-nav {\n    text-align: center;\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: flex;\n    flex-direction: column;\n    width: 20rem;\n    height: 100vh; }\n    /* line 96, stdin */\n    .my-nav .nav {\n      margin: auto; } }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _mContent = require("./m-content.vue");

  var _mContent2 = _interopRequireDefault(_mContent);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  exports.default = {
    components: { mContent: _mContent2.default },
    name: "m-aplication"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', [_c('b-navbar', { staticClass: "my-nav", attrs: { "fixed": "top", "toggleable": "lg" } }, [_c('b-navbar-brand', { staticClass: "mt-lg-5 mr-0" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'menu.portfolio', expression: "'menu.portfolio'" }], staticClass: "d-block d-lg-none" }), _vm._v(" "), _c('span', { staticClass: "d-none d-lg-block" }, [_c('img', { staticClass: "img-fluid img-profile rounded-circle mx-auto mb-2", attrs: { "src": "/assets/ava.jpg", "alt": "" } })])]), _vm._v(" "), _c('b-navbar-toggle', { attrs: { "target": "my_collapse" } }), _vm._v(" "), _c('b-collapse', { attrs: { "is-nav": "", "id": "my_collapse" } }, [_c('b-nav', { directives: [{ name: "b-scrollspy", rawName: "v-b-scrollspy:spy", arg: "spy" }], attrs: { "vertical": "" } }, [_c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.about', expression: "'menu.about'" }], attrs: { "href": "#about" } }), _vm._v(" "), _c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.experience', expression: "'menu.experience'" }], attrs: { "href": "#experience" } }), _vm._v(" "), _c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.education', expression: "'menu.education'" }], attrs: { "href": "#education" } }), _vm._v(" "), _c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.skills', expression: "'menu.skills'" }], attrs: { "href": "#skills" } }), _vm._v(" "), _c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.interests', expression: "'menu.interests'" }], attrs: { "href": "#interests" } }), _vm._v(" "), _c('b-nav-item', { directives: [{ name: "lang-children", rawName: "v-lang-children", value: 'menu.certifications', expression: "'menu.certifications'" }], attrs: { "href": "#certifications" } })], 1)], 1)], 1), _vm._v(" "), _c('m-content', { attrs: { "parts": _vm.parts } })], 1);
};
__vue__options__.staticRenderFns = [];
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-480e0be2", __vue__options__);
    } else {
      hotAPI.rerender("data-v-480e0be2", __vue__options__);
    }
  })();
}

},{"./m-content.vue":10,"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],9:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("@font-face {\n  font-family: 'Bebas';\n  src: url(\"/font/bebas.eot?k6fn45\");\n  src: url(\"/font/bebas.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/bebas.ttf?k6fn45\") format(\"truetype\"), url(\"/font/bebas.woff?k6fn45\") format(\"woff\"), url(\"/font/bebas.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Acrobat';\n  src: url(\"/font/acrobat.eot?k6fn45\");\n  src: url(\"/font/acrobat.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/acrobat.ttf?k6fn45\") format(\"truetype\"), url(\"/font/acrobat.woff?k6fn45\") format(\"woff\"), url(\"/font/acrobat.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n/* line 34, src/scss/main.scss */\nbody {\n  font-family: Acrobat; }\n\n/* line 38, src/scss/main.scss */\n.--acrobat {\n  font-family: Acrobat; }\n\n/* line 42, src/scss/main.scss */\n.--bebas {\n  font-family: Bebas; }\n\n/* line 46, src/scss/main.scss */\n.--uppercase {\n  text-transform: uppercase; }\n\n/* line 50, src/scss/main.scss */\n.--my-color {\n  color: #3399cc; }\n\n/* line 54, src/scss/main.scss */\n.--my-gray {\n  color: #343a40; }\n  /* line 57, src/scss/main.scss */\n  .--my-gray:hover {\n    color: #3399cc; }\n\n/* line 62, src/scss/main.scss */\n.--radius {\n  border: 2px solid #3399cc;\n  border-radius: 100%;\n  color: #3399cc; }\n  /* line 67, src/scss/main.scss */\n  .--radius:hover {\n    border-color: #297aa3;\n    color: #297aa3; }\n\n/* line 73, src/scss/main.scss */\n.subheading {\n  font-weight: 500;\n  font-size: 1.37rem;\n  color: #868e96; }\n\n/* line 79, src/scss/main.scss */\nh1 {\n  font-size: 6rem;\n  line-height: 6rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 86, src/scss/main.scss */\nh2 {\n  font-size: 3.5rem;\n  line-height: 4rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 93, src/scss/main.scss */\nh3 {\n  color: #343a40; }\n\n/* line 31, stdin */\n.my-certifications-list {\n  list-style: none;\n  padding-left: 2rem; }\n  /* line 35, stdin */\n  .my-certifications-list .list-item {\n    font-weight: 500;\n    font-size: 1.35rem;\n    color: #868e96; }\n    /* line 40, stdin */\n    .my-certifications-list .list-item .my-certifications-icon {\n      font-size: 1.2rem;\n      color: #3399cc; }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-certifications"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "my-auto" }, [_c('h2', { directives: [{ name: "lang", rawName: "v-lang", value: 'certifications.title', expression: "'certifications.title'" }], staticClass: "my-about-name mb-5 --bebas" }), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "mr-auto subheading" }, [_c('ul', { staticClass: "list my-certifications-list" }, [_c('li', { staticClass: "list-item" }, [_c('i', { staticClass: "my-certifications-icon icon-trophy mr-2" }), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'certifications.first', expression: "'certifications.first'" }] })]), _vm._v(" "), _c('li', { staticClass: "list-item" }, [_c('i', { staticClass: "my-certifications-icon icon-trophy mr-2" }), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'certifications.third', expression: "'certifications.third'" }] })]), _vm._v(" "), _c('li', { staticClass: "list-item" }, [_c('i', { staticClass: "my-certifications-icon icon-trophy mr-2" }), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'certifications.four', expression: "'certifications.four'" }] })])]), _vm._v(" "), _c('ul', [_c('p', { directives: [{ name: "lang", rawName: "v-lang", value: 'certifications.more', expression: "'certifications.more'" }] })])])])]);
};
__vue__options__.staticRenderFns = [];
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-230f09fd", __vue__options__);
    } else {
      hotAPI.rerender("data-v-230f09fd", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],10:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("@font-face {\n  font-family: 'Bebas';\n  src: url(\"/font/bebas.eot?k6fn45\");\n  src: url(\"/font/bebas.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/bebas.ttf?k6fn45\") format(\"truetype\"), url(\"/font/bebas.woff?k6fn45\") format(\"woff\"), url(\"/font/bebas.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Acrobat';\n  src: url(\"/font/acrobat.eot?k6fn45\");\n  src: url(\"/font/acrobat.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/acrobat.ttf?k6fn45\") format(\"truetype\"), url(\"/font/acrobat.woff?k6fn45\") format(\"woff\"), url(\"/font/acrobat.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n/* line 34, src/scss/main.scss */\nbody {\n  font-family: Acrobat; }\n\n/* line 38, src/scss/main.scss */\n.--acrobat {\n  font-family: Acrobat; }\n\n/* line 42, src/scss/main.scss */\n.--bebas {\n  font-family: Bebas; }\n\n/* line 46, src/scss/main.scss */\n.--uppercase {\n  text-transform: uppercase; }\n\n/* line 50, src/scss/main.scss */\n.--my-color {\n  color: #3399cc; }\n\n/* line 54, src/scss/main.scss */\n.--my-gray {\n  color: #343a40; }\n  /* line 57, src/scss/main.scss */\n  .--my-gray:hover {\n    color: #3399cc; }\n\n/* line 62, src/scss/main.scss */\n.--radius {\n  border: 2px solid #3399cc;\n  border-radius: 100%;\n  color: #3399cc; }\n  /* line 67, src/scss/main.scss */\n  .--radius:hover {\n    border-color: #297aa3;\n    color: #297aa3; }\n\n/* line 73, src/scss/main.scss */\n.subheading {\n  font-weight: 500;\n  font-size: 1.37rem;\n  color: #868e96; }\n\n/* line 79, src/scss/main.scss */\nh1 {\n  font-size: 6rem;\n  line-height: 6rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 86, src/scss/main.scss */\nh2 {\n  font-size: 3.5rem;\n  line-height: 4rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 93, src/scss/main.scss */\nh3 {\n  color: #343a40; }\n\n/* line 48, stdin */\n.my-content {\n  position: relative; }\n  /* line 51, stdin */\n  .my-content .my-section {\n    min-height: 100vh;\n    border-bottom: 1px solid #868e96; }");(function () {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _mAbout = require("./m-about.vue");

    var _mAbout2 = _interopRequireDefault(_mAbout);

    var _mExperience = require("./m-experience.vue");

    var _mExperience2 = _interopRequireDefault(_mExperience);

    var _mEducation = require("./m-education.vue");

    var _mEducation2 = _interopRequireDefault(_mEducation);

    var _mSkills = require("./m-skills.vue");

    var _mSkills2 = _interopRequireDefault(_mSkills);

    var _mInterests = require("./m-interests.vue");

    var _mInterests2 = _interopRequireDefault(_mInterests);

    var _mCertifications = require("./m-certifications.vue");

    var _mCertifications2 = _interopRequireDefault(_mCertifications);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }

    exports.default = {
        components: {
            MCertifications: _mCertifications2.default,
            MInterests: _mInterests2.default,
            MSkills: _mSkills2.default,
            MExperience: _mExperience2.default,
            MAbout: _mAbout2.default,
            MEducation: _mEducation2.default
        },
        name: "m-content"
    };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
    console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "my-content container-fluid p-0" }, [_c('section', { staticClass: "my-section p-3 p-lg-5 d-flex d-column", attrs: { "id": "about" } }, [_c('m-about')], 1), _vm._v(" "), _c('section', { staticClass: "my-section p-3 p-lg-5 d-flex d-column", attrs: { "id": "experience" } }, [_c('m-experience')], 1), _vm._v(" "), _c('section', { staticClass: "my-section p-3 p-lg-5 d-flex d-column", attrs: { "id": "education" } }, [_c('m-education')], 1), _vm._v(" "), _c('section', { staticClass: "my-section p-3 p-lg-5 d-flex d-column", attrs: { "id": "skills" } }, [_c('m-skills')], 1), _vm._v(" "), _c('section', { staticClass: "my-section p-3 p-lg-5 d-flex d-column", attrs: { "id": "interests" } }, [_c('m-interests')], 1), _vm._v(" "), _c('section', { staticClass: "my-section p-3 p-lg-5 d-flex d-column", attrs: { "id": "certifications" } }, [_c('m-certifications')], 1)]);
};
__vue__options__.staticRenderFns = [];
if (module.hot) {
    (function () {
        var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
        hotAPI.install(require("vue"), true);
        if (!hotAPI.compatible) return;
        module.hot.accept();
        module.hot.dispose(__vueify_style_dispose__);
        if (!module.hot.data) {
            hotAPI.createRecord("data-v-47acbb25", __vue__options__);
        } else {
            hotAPI.rerender("data-v-47acbb25", __vue__options__);
        }
    })();
}

},{"./m-about.vue":7,"./m-certifications.vue":9,"./m-education.vue":11,"./m-experience.vue":12,"./m-interests.vue":13,"./m-skills.vue":14,"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],11:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("@font-face {\n  font-family: 'Bebas';\n  src: url(\"/font/bebas.eot?k6fn45\");\n  src: url(\"/font/bebas.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/bebas.ttf?k6fn45\") format(\"truetype\"), url(\"/font/bebas.woff?k6fn45\") format(\"woff\"), url(\"/font/bebas.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Acrobat';\n  src: url(\"/font/acrobat.eot?k6fn45\");\n  src: url(\"/font/acrobat.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/acrobat.ttf?k6fn45\") format(\"truetype\"), url(\"/font/acrobat.woff?k6fn45\") format(\"woff\"), url(\"/font/acrobat.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n/* line 34, src/scss/main.scss */\nbody {\n  font-family: Acrobat; }\n\n/* line 38, src/scss/main.scss */\n.--acrobat {\n  font-family: Acrobat; }\n\n/* line 42, src/scss/main.scss */\n.--bebas {\n  font-family: Bebas; }\n\n/* line 46, src/scss/main.scss */\n.--uppercase {\n  text-transform: uppercase; }\n\n/* line 50, src/scss/main.scss */\n.--my-color {\n  color: #3399cc; }\n\n/* line 54, src/scss/main.scss */\n.--my-gray {\n  color: #343a40; }\n  /* line 57, src/scss/main.scss */\n  .--my-gray:hover {\n    color: #3399cc; }\n\n/* line 62, src/scss/main.scss */\n.--radius {\n  border: 2px solid #3399cc;\n  border-radius: 100%;\n  color: #3399cc; }\n  /* line 67, src/scss/main.scss */\n  .--radius:hover {\n    border-color: #297aa3;\n    color: #297aa3; }\n\n/* line 73, src/scss/main.scss */\n.subheading {\n  font-weight: 500;\n  font-size: 1.37rem;\n  color: #868e96; }\n\n/* line 79, src/scss/main.scss */\nh1 {\n  font-size: 6rem;\n  line-height: 6rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 86, src/scss/main.scss */\nh2 {\n  font-size: 3.5rem;\n  line-height: 4rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 93, src/scss/main.scss */\nh3 {\n  color: #343a40; }\n\n/* line 34, stdin */\n.my-auto {\n  width: 100%; }\n\n/* line 38, stdin */\n.my-date {\n  min-width: 18rem;\n  font-weight: 500;\n  font-size: 1.2rem; }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-education"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "my-auto" }, [_c('h2', { directives: [{ name: "lang", rawName: "v-lang", value: 'education.title', expression: "'education.title'" }], staticClass: "my-about-name mb-5 --bebas" }), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "resume-content mr-auto" }, [_c('h3', { directives: [{ name: "lang", rawName: "v-lang", value: 'education.dgma', expression: "'education.dgma'" }], staticClass: "mb-0 --bebas" }), _vm._v(" "), _c('div', { directives: [{ name: "lang", rawName: "v-lang", value: 'education.dgma-special', expression: "'education.dgma-special'" }], staticClass: "subheading mb-3 --bebas" })]), _vm._v(" "), _c('div', { staticClass: "my-date text-md-right" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'education.dgma-time', expression: "'education.dgma-time'" }], staticClass: "--my-color" })])]), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "resume-content mr-auto" }, [_c('h3', { directives: [{ name: "lang", rawName: "v-lang", value: 'education.dmt', expression: "'education.dmt'" }], staticClass: "mb-0 --bebas" }), _vm._v(" "), _c('div', { directives: [{ name: "lang", rawName: "v-lang", value: 'education.dmt-special', expression: "'education.dmt-special'" }], staticClass: "subheading mb-3 --bebas" })]), _vm._v(" "), _c('div', { staticClass: "my-date text-md-right" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'education.dmt-time', expression: "'education.dmt-time'" }], staticClass: "--my-color" })])])]);
};
__vue__options__.staticRenderFns = [];
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-904c2c58", __vue__options__);
    } else {
      hotAPI.rerender("data-v-904c2c58", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],12:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("@font-face {\n  font-family: 'Bebas';\n  src: url(\"/font/bebas.eot?k6fn45\");\n  src: url(\"/font/bebas.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/bebas.ttf?k6fn45\") format(\"truetype\"), url(\"/font/bebas.woff?k6fn45\") format(\"woff\"), url(\"/font/bebas.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Acrobat';\n  src: url(\"/font/acrobat.eot?k6fn45\");\n  src: url(\"/font/acrobat.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/acrobat.ttf?k6fn45\") format(\"truetype\"), url(\"/font/acrobat.woff?k6fn45\") format(\"woff\"), url(\"/font/acrobat.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n/* line 34, src/scss/main.scss */\nbody {\n  font-family: Acrobat; }\n\n/* line 38, src/scss/main.scss */\n.--acrobat {\n  font-family: Acrobat; }\n\n/* line 42, src/scss/main.scss */\n.--bebas {\n  font-family: Bebas; }\n\n/* line 46, src/scss/main.scss */\n.--uppercase {\n  text-transform: uppercase; }\n\n/* line 50, src/scss/main.scss */\n.--my-color {\n  color: #3399cc; }\n\n/* line 54, src/scss/main.scss */\n.--my-gray {\n  color: #343a40; }\n  /* line 57, src/scss/main.scss */\n  .--my-gray:hover {\n    color: #3399cc; }\n\n/* line 62, src/scss/main.scss */\n.--radius {\n  border: 2px solid #3399cc;\n  border-radius: 100%;\n  color: #3399cc; }\n  /* line 67, src/scss/main.scss */\n  .--radius:hover {\n    border-color: #297aa3;\n    color: #297aa3; }\n\n/* line 73, src/scss/main.scss */\n.subheading {\n  font-weight: 500;\n  font-size: 1.37rem;\n  color: #868e96; }\n\n/* line 79, src/scss/main.scss */\nh1 {\n  font-size: 6rem;\n  line-height: 6rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 86, src/scss/main.scss */\nh2 {\n  font-size: 3.5rem;\n  line-height: 4rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 93, src/scss/main.scss */\nh3 {\n  color: #343a40; }\n\n/* line 46, stdin */\n.my-date {\n  min-width: 18rem;\n  font-weight: 500;\n  font-size: 1.2rem; }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-experience"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "my-auto" }, [_c('h2', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.title', expression: "'experience.title'" }], staticClass: "my-about-name mb-5 --bebas" }), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "resume-content mr-auto" }, [_c('h3', { staticClass: "mb-0 --bebas" }, [_vm._v("Middle Web Developer")]), _vm._v(" "), _c('div', { staticClass: "subheading mb-3 --bebas" }, [_vm._v("IT 2.0")]), _vm._v(" "), _c('p', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.it20', expression: "'experience.it20'" }], staticClass: "subheading --acrobat" })]), _vm._v(" "), _c('div', { staticClass: "my-date text-md-right" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.it20-time', expression: "'experience.it20-time'" }], staticClass: "--my-color" })])]), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "resume-content mr-auto" }, [_c('h3', { staticClass: "mb-0 --bebas" }, [_vm._v("Junior Web Developer")]), _vm._v(" "), _c('div', { staticClass: "subheading mb-3 --bebas" }, [_vm._v("QuartSoft")]), _vm._v(" "), _c('p', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.qs', expression: "'experience.qs'" }], staticClass: "subheading --acrobat" })]), _vm._v(" "), _c('div', { staticClass: "my-date text-md-right" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.qs-time', expression: "'experience.qs-time'" }], staticClass: "--my-color" })])]), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "resume-content mr-auto" }, [_c('h3', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.mevs-pos', expression: "'experience.mevs-pos'" }], staticClass: "mb-0 --bebas" }), _vm._v(" "), _c('div', { staticClass: "subheading mb-3 --bebas" }, [_vm._v("MEVS")]), _vm._v(" "), _c('p', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.mevs', expression: "'experience.mevs'" }], staticClass: "subheading --acrobat" })]), _vm._v(" "), _c('div', { staticClass: "my-date text-md-right" }, [_c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'experience.mevs-time', expression: "'experience.mevs-time'" }], staticClass: "--my-color" })])])]);
};
__vue__options__.staticRenderFns = [];
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-42d25424", __vue__options__);
    } else {
      hotAPI.rerender("data-v-42d25424", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],13:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("@font-face {\n  font-family: 'Bebas';\n  src: url(\"/font/bebas.eot?k6fn45\");\n  src: url(\"/font/bebas.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/bebas.ttf?k6fn45\") format(\"truetype\"), url(\"/font/bebas.woff?k6fn45\") format(\"woff\"), url(\"/font/bebas.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Acrobat';\n  src: url(\"/font/acrobat.eot?k6fn45\");\n  src: url(\"/font/acrobat.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/acrobat.ttf?k6fn45\") format(\"truetype\"), url(\"/font/acrobat.woff?k6fn45\") format(\"woff\"), url(\"/font/acrobat.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n/* line 34, src/scss/main.scss */\nbody {\n  font-family: Acrobat; }\n\n/* line 38, src/scss/main.scss */\n.--acrobat {\n  font-family: Acrobat; }\n\n/* line 42, src/scss/main.scss */\n.--bebas {\n  font-family: Bebas; }\n\n/* line 46, src/scss/main.scss */\n.--uppercase {\n  text-transform: uppercase; }\n\n/* line 50, src/scss/main.scss */\n.--my-color {\n  color: #3399cc; }\n\n/* line 54, src/scss/main.scss */\n.--my-gray {\n  color: #343a40; }\n  /* line 57, src/scss/main.scss */\n  .--my-gray:hover {\n    color: #3399cc; }\n\n/* line 62, src/scss/main.scss */\n.--radius {\n  border: 2px solid #3399cc;\n  border-radius: 100%;\n  color: #3399cc; }\n  /* line 67, src/scss/main.scss */\n  .--radius:hover {\n    border-color: #297aa3;\n    color: #297aa3; }\n\n/* line 73, src/scss/main.scss */\n.subheading {\n  font-weight: 500;\n  font-size: 1.37rem;\n  color: #868e96; }\n\n/* line 79, src/scss/main.scss */\nh1 {\n  font-size: 6rem;\n  line-height: 6rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 86, src/scss/main.scss */\nh2 {\n  font-size: 3.5rem;\n  line-height: 4rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 93, src/scss/main.scss */\nh3 {\n  color: #343a40; }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-interests"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "my-auto" }, [_c('h2', { directives: [{ name: "lang", rawName: "v-lang", value: 'interests.title', expression: "'interests.title'" }], staticClass: "my-about-name mb-5 --bebas" }), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "resume-content mr-auto" }, [_c('p', { directives: [{ name: "lang", rawName: "v-lang", value: 'interests.text', expression: "'interests.text'" }], staticClass: "subheading --acrobat" })])])]);
};
__vue__options__.staticRenderFns = [];
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-22a92f96", __vue__options__);
    } else {
      hotAPI.rerender("data-v-22a92f96", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}],14:[function(require,module,exports){
"use strict";

var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("@font-face {\n  font-family: 'Bebas';\n  src: url(\"/font/bebas.eot?k6fn45\");\n  src: url(\"/font/bebas.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/bebas.ttf?k6fn45\") format(\"truetype\"), url(\"/font/bebas.woff?k6fn45\") format(\"woff\"), url(\"/font/bebas.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Acrobat';\n  src: url(\"/font/acrobat.eot?k6fn45\");\n  src: url(\"/font/acrobat.eot?k6fn45#iefix\") format(\"embedded-opentype\"), url(\"/font/acrobat.ttf?k6fn45\") format(\"truetype\"), url(\"/font/acrobat.woff?k6fn45\") format(\"woff\"), url(\"/font/acrobat.svg?k6fn45#prostoy\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n/* line 34, src/scss/main.scss */\nbody {\n  font-family: Acrobat; }\n\n/* line 38, src/scss/main.scss */\n.--acrobat {\n  font-family: Acrobat; }\n\n/* line 42, src/scss/main.scss */\n.--bebas {\n  font-family: Bebas; }\n\n/* line 46, src/scss/main.scss */\n.--uppercase {\n  text-transform: uppercase; }\n\n/* line 50, src/scss/main.scss */\n.--my-color {\n  color: #3399cc; }\n\n/* line 54, src/scss/main.scss */\n.--my-gray {\n  color: #343a40; }\n  /* line 57, src/scss/main.scss */\n  .--my-gray:hover {\n    color: #3399cc; }\n\n/* line 62, src/scss/main.scss */\n.--radius {\n  border: 2px solid #3399cc;\n  border-radius: 100%;\n  color: #3399cc; }\n  /* line 67, src/scss/main.scss */\n  .--radius:hover {\n    border-color: #297aa3;\n    color: #297aa3; }\n\n/* line 73, src/scss/main.scss */\n.subheading {\n  font-weight: 500;\n  font-size: 1.37rem;\n  color: #868e96; }\n\n/* line 79, src/scss/main.scss */\nh1 {\n  font-size: 6rem;\n  line-height: 6rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 86, src/scss/main.scss */\nh2 {\n  font-size: 3.5rem;\n  line-height: 4rem;\n  font-weight: 500;\n  color: #343a40; }\n\n/* line 93, src/scss/main.scss */\nh3 {\n  color: #343a40; }\n\n/* line 93, stdin */\n.my-check-list {\n  list-style: none;\n  padding-left: 2rem; }\n  /* line 97, stdin */\n  .my-check-list .list-item {\n    font-weight: 500;\n    font-size: 1.35rem;\n    color: #868e96; }\n    /* line 102, stdin */\n    .my-check-list .list-item .my-check-icon {\n      font-size: 1rem;\n      color: #3399cc; }\n\n/* line 109, stdin */\nspan.skills-icon {\n  font-size: 2rem;\n  color: #3399cc;\n  cursor: pointer; }\n  /* line 114, stdin */\n  span.skills-icon:hover {\n    color: #297aa3; }");(function () {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "m-skills"
  };
})();
if (module.exports.__esModule) module.exports = module.exports.default;
var __vue__options__ = typeof module.exports === "function" ? module.exports.options : module.exports;
if (__vue__options__.functional) {
  console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.");
}
__vue__options__.render = function render() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "my-auto" }, [_c('h2', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.title', expression: "'skills.title'" }], staticClass: "my-about-name mb-5 --bebas" }), _vm._v(" "), _c('div', { staticClass: "d-flex flex-column flex-md-row mb-5" }, [_c('div', { staticClass: "resume-content mr-auto" }, [_c('div', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.languages', expression: "'skills.languages'" }], staticClass: "subheading mb-3 --bebas" }), _vm._v(" "), _c('ul', { staticClass: "list-inline list-icons" }, [_c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "HTML5" } }, [_c('span', { staticClass: "skills-icon icon-html5" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "CSS3" } }, [_c('span', { staticClass: "skills-icon icon-css3" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "JavaScript" } }, [_c('span', { staticClass: "skills-icon icon-javascript" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "jQuery" } }, [_c('span', { staticClass: "skills-icon icon-jquery" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "JSON" } }, [_c('span', { staticClass: "skills-icon icon-json" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "PHP" } }, [_c('span', { staticClass: "skills-icon icon-php" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "MySQL" } }, [_c('span', { staticClass: "skills-icon icon-mysql" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "SASS" } }, [_c('span', { staticClass: "skills-icon icon-sass" })])]), _vm._v(" "), _c('div', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.tools', expression: "'skills.tools'" }], staticClass: "subheading mb-3 --bebas" }), _vm._v(" "), _c('ul', { staticClass: "list-inline list-icons" }, [_c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "npm" } }, [_c('span', { staticClass: "skills-icon icon-npm" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Gulp" } }, [_c('span', { staticClass: "skills-icon icon-gulp" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Webpack" } }, [_c('span', { staticClass: "skills-icon icon-webpack" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Git" } }, [_c('span', { staticClass: "skills-icon icon-git" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Subversion" } }, [_c('span', { staticClass: "skills-icon icon-subversion" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "WebStorm" } }, [_c('span', { staticClass: "skills-icon icon-webstorm" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Sublimetext" } }, [_c('span', { staticClass: "skills-icon icon-sublimetext" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Photoshop" } }, [_c('span', { staticClass: "skills-icon icon-adobephotoshop" })])]), _vm._v(" "), _c('div', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.frameworks', expression: "'skills.frameworks'" }], staticClass: "subheading mb-3 --bebas" }), _vm._v(" "), _c('ul', { staticClass: "list-inline list-icons" }, [_c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Vue.js" } }, [_c('span', { staticClass: "skills-icon icon-vuejs" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Bootstrap" } }, [_c('span', { staticClass: "skills-icon icon-bootstrap" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Joomla" } }, [_c('span', { staticClass: "skills-icon icon-joomla" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "Laravel" } }, [_c('span', { staticClass: "skills-icon icon-laravel" })]), _vm._v(" "), _c('li', { directives: [{ name: "b-tooltip", rawName: "v-b-tooltip.hover", modifiers: { "hover": true } }], staticClass: "list-inline-item", attrs: { "title": "WordPress" } }, [_c('span', { staticClass: "skills-icon icon-wordpress" })])]), _vm._v(" "), _c('div', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.workflow', expression: "'skills.workflow'" }], staticClass: "subheading mb-3 --bebas" }), _vm._v(" "), _c('ul', { staticClass: "list my-check-list" }, [_c('li', { staticClass: "list-item" }, [_c('i', { staticClass: "my-check-icon icon-check mr-2" }), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.first', expression: "'skills.first'" }] })]), _vm._v(" "), _c('li', { staticClass: "list-item" }, [_c('i', { staticClass: "my-check-icon icon-check mr-2" }), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.second', expression: "'skills.second'" }] })]), _vm._v(" "), _c('li', { staticClass: "list-item" }, [_c('i', { staticClass: "my-check-icon icon-check mr-2" }), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.third', expression: "'skills.third'" }] })]), _vm._v(" "), _c('li', { staticClass: "list-item" }, [_c('i', { staticClass: "my-check-icon icon-check mr-2" }), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.four', expression: "'skills.four'" }] })]), _vm._v(" "), _c('li', { staticClass: "list-item" }, [_c('i', { staticClass: "my-check-icon icon-check mr-2" }), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.five', expression: "'skills.five'" }] })]), _vm._v(" "), _c('li', { staticClass: "list-item" }, [_c('i', { staticClass: "my-check-icon icon-check mr-2" }), _c('span', { directives: [{ name: "lang", rawName: "v-lang", value: 'skills.six', expression: "'skills.six'" }] })])])])])]);
};
__vue__options__.staticRenderFns = [];
if (module.hot) {
  (function () {
    var hotAPI = require("vueify/node_modules/vue-hot-reload-api");
    hotAPI.install(require("vue"), true);
    if (!hotAPI.compatible) return;
    module.hot.accept();
    module.hot.dispose(__vueify_style_dispose__);
    if (!module.hot.data) {
      hotAPI.createRecord("data-v-510fb274", __vue__options__);
    } else {
      hotAPI.rerender("data-v-510fb274", __vue__options__);
    }
  })();
}

},{"vue":2,"vueify/lib/insert-css":3,"vueify/node_modules/vue-hot-reload-api":4}]},{},[5])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmNvbW1vbi5qcyIsIm5vZGVfbW9kdWxlcy92dWVpZnkvbGliL2luc2VydC1jc3MuanMiLCJub2RlX21vZHVsZXMvdnVlaWZ5L25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qcyIsInNyYy9qcy9hcHAuanMiLCJzcmMvanMvbGFuZy5qcyIsInNyYy92dWUvbS1hYm91dC52dWU/NTM5YzVmMjQiLCJzcmMvdnVlL20tYXBsaWNhdGlvbi52dWU/MzM5NDJkOTIiLCJzcmMvdnVlL20tY2VydGlmaWNhdGlvbnMudnVlPzBmZTE1NDhjIiwic3JjL3Z1ZS9tLWNvbnRlbnQudnVlPzhmYjYzZDM0Iiwic3JjL3Z1ZS9tLWVkdWNhdGlvbi52dWU/ZWQyMGU5MGEiLCJzcmMvdnVlL20tZXhwZXJpZW5jZS52dWU/MWQ4OWUxOGMiLCJzcmMvdnVlL20taW50ZXJlc3RzLnZ1ZT8zNjEzNjVlZSIsInNyYy92dWUvbS1za2lsbHMudnVlPzE4YWRiNDZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbnZQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbE9BOzs7O0FBQ0E7Ozs7OztBQUhBLElBQUksTUFBSixDQUFXLFFBQVgsR0FBc0IsSUFBdEI7O0FBS0EsSUFBSSxPQUFPLG9CQUFYOztBQUVBLE9BQU8sUUFBUCxDQUFnQixLQUFoQixHQUF3QixLQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXhCOztBQUVBLElBQUksU0FBSixDQUFjLE1BQWQsRUFBc0I7QUFDbEIsY0FBVSxrQkFBVSxFQUFWLEVBQWMsT0FBZCxFQUF1QjtBQUM3QixXQUFHLFNBQUgsR0FBZSxLQUFLLFNBQUwsQ0FBZSxRQUFRLEtBQXZCLENBQWY7QUFDSDtBQUhpQixDQUF0QjtBQUtBLElBQUksU0FBSixDQUFjLGVBQWQsRUFBK0I7QUFDM0IsY0FBVSxrQkFBVSxFQUFWLEVBQWMsT0FBZCxFQUF1QjtBQUM3QixXQUFHLFFBQUgsQ0FBWSxDQUFaLEVBQWUsU0FBZixHQUEyQixLQUFLLFNBQUwsQ0FBZSxRQUFRLEtBQXZCLENBQTNCO0FBQ0g7QUFIMEIsQ0FBL0I7O0FBTUEsSUFBSSxHQUFKLENBQVE7QUFDSixRQUFJLE1BREE7QUFFSixnQkFBWSxFQUFDLG1DQUFEO0FBRlIsQ0FBUjs7Ozs7Ozs7Ozs7OztJQ3BCcUIsSTtBQUVqQixvQkFBYztBQUFBOztBQUNWLGFBQUssUUFBTCxHQUFnQixDQUFDLFVBQVUsUUFBVixJQUFzQixVQUFVLFlBQWpDLEVBQStDLEtBQS9DLENBQXFELEdBQXJELEVBQTBELENBQTFELENBQWhCO0FBQ0EsYUFBSyxPQUFMLEdBQWUsRUFBZjtBQUNBLGFBQUssVUFBTCxHQUFrQixLQUFLLElBQUwsQ0FBVSxLQUFLLE9BQUwsSUFBZ0IsS0FBSyxRQUEvQixDQUFsQjtBQUNIOzs7O2tDQUVTLEcsRUFBSztBQUNYLG1CQUFPLEVBQUUsR0FBRixDQUFNLEtBQUssVUFBWCxFQUF1QixHQUF2QixFQUE0QixZQUE1QixDQUFQO0FBQ0g7Ozs2QkFFVyxJLEVBQU0sSSxFQUFNO0FBQ3BCLGdCQUFJLGFBQWEsSUFBakI7QUFDQSxjQUFFLElBQUYsQ0FBTztBQUNILHFCQUFLLFdBQVcsSUFBWCxHQUFrQixPQURwQjtBQUVILDBCQUFVLE1BRlA7QUFHSCx1QkFBTyxLQUhKO0FBSUgseUJBQVMsaUJBQVUsSUFBVixFQUFnQjtBQUNyQixpQ0FBYSxJQUFiO0FBQ0gsaUJBTkU7QUFPSCx1QkFBTyxpQkFBWSxDQUNsQjtBQVJFLGFBQVA7QUFVQSxtQkFBUSxjQUFjLElBQWQsSUFBc0IsQ0FBQyxJQUF4QixHQUFnQyxLQUFLLElBQUwsQ0FBVSxJQUFWLENBQWhDLEdBQWtELFVBQXpEO0FBQ0g7Ozs7OztrQkF6QmdCLEk7Ozs7Ozs7Ozs7OztVQzJDckIsQUFDQTs7Ozs7Ozs7QUE1Q0E7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQzBCQTs7Ozs7Ozs7O3VDQUdBO1VBREEsQUFFQTs7Ozs7Ozs7QUE5QkE7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQ3NCQSxBQUNBOzs7Ozs7OztBQXZCQTs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQ3dCQTs7OzsrQkFDQTs7Ozs4QkFDQTs7OzsyQkFDQTs7Ozs4QkFDQTs7OzttQ0FDQTs7Ozs7Ozs7OzsrQ0FJQTtxQ0FDQTsrQkFDQTt1Q0FDQTs2QkFDQTtxQ0FMQSxBQU1BO0FBTkE7Y0FEQSxBQVNBOzs7Ozs7OztBQXhDQTs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1VDeUJBLEFBQ0E7Ozs7Ozs7O0FBMUJBOzs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUNxQ0EsQUFDQTs7Ozs7Ozs7QUF0Q0E7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQ1lBLEFBQ0E7Ozs7Ozs7O0FBYkE7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQ29GQSxBQUNBOzs7Ozs7OztBQXJGQTs7O0FBQUEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyohXG4gKiBWdWUuanMgdjIuNS4xM1xuICogKGMpIDIwMTQtMjAxNyBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gdGhlc2UgaGVscGVycyBwcm9kdWNlcyBiZXR0ZXIgdm0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZ1xuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZVxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUgZS5nLiBbb2JqZWN0IE9iamVjdF1cbiAqL1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwICh2KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXggKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IHR5cGVvZiB2YWwgPT09ICdvYmplY3QnXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheVxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQsIGZhc3RlciB0aGFuIG5hdGl2ZVxuICovXG5mdW5jdGlvbiBiaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIGZuIGxlbmd0aFxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKipcbiAqIFJldHVybiBzYW1lIHZhbHVlXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc3RhdGljIGtleXMgc3RyaW5nIGZyb20gY29tcGlsZXIgbW9kdWxlcy5cbiAqL1xuXG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnXG5dO1xuXG4vKiAgKi9cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm0gfHwge307XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5cbnZhciB1aWQkMSA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCQxKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyB0aGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyB0aGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG9ubHkgb25lXG4vLyB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZCBhdCBhbnkgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKF90YXJnZXQpIHtcbiAgaWYgKERlcC50YXJnZXQpIHsgdGFyZ2V0U3RhY2sucHVzaChEZXAudGFyZ2V0KTsgfVxuICBEZXAudGFyZ2V0ID0gX3RhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrLnBvcCgpO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSwgZGVlcCkge1xuICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICBjb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIGlmIChkZWVwKSB7XG4gICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7XG4gICAgICBjbG9uZWQuY2hpbGRyZW4gPSBjbG9uZVZOb2Rlcyh2bm9kZS5jaGlsZHJlbiwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRPcHRpb25zICYmIGNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW4pIHtcbiAgICAgIGNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW4gPSBjbG9uZVZOb2Rlcyhjb21wb25lbnRPcHRpb25zLmNoaWxkcmVuLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsb25lZFxufVxuXG5mdW5jdGlvbiBjbG9uZVZOb2RlcyAodm5vZGVzLCBkZWVwKSB7XG4gIHZhciBsZW4gPSB2bm9kZXMubGVuZ3RoO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGxlbik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICByZXNbaV0gPSBjbG9uZVZOb2RlKHZub2Rlc1tpXSwgZGVlcCk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1tcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl0uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogQnkgZGVmYXVsdCwgd2hlbiBhIHJlYWN0aXZlIHByb3BlcnR5IGlzIHNldCwgdGhlIG5ldyB2YWx1ZSBpc1xuICogYWxzbyBjb252ZXJ0ZWQgdG8gYmVjb21lIHJlYWN0aXZlLiBIb3dldmVyIHdoZW4gcGFzc2luZyBkb3duIHByb3BzLFxuICogd2UgZG9uJ3Qgd2FudCB0byBmb3JjZSBjb252ZXJzaW9uIGJlY2F1c2UgdGhlIHZhbHVlIG1heSBiZSBhIG5lc3RlZCB2YWx1ZVxuICogdW5kZXIgYSBmcm96ZW4gZGF0YSBzdHJ1Y3R1cmUuIENvbnZlcnRpbmcgaXQgd291bGQgZGVmZWF0IHRoZSBvcHRpbWl6YXRpb24uXG4gKi9cbnZhciBvYnNlcnZlclN0YXRlID0ge1xuICBzaG91bGRDb252ZXJ0OiB0cnVlXG59O1xuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgYXJlIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaGVzIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIGF1Z21lbnQgPSBoYXNQcm90b1xuICAgICAgPyBwcm90b0F1Z21lbnRcbiAgICAgIDogY29weUF1Z21lbnQ7XG4gICAgYXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZShvYmosIGtleXNbaV0sIG9ialtrZXlzW2ldXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGFuIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGFuIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiYgaXNQbGFpbk9iamVjdChmcm9tVmFsKSkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbFxufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdGhlIGh5cGhlbiwgJyArXG4gICAgICAnYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlci4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG4gIHZhciBleHRlbmRzRnJvbSA9IGNoaWxkLmV4dGVuZHM7XG4gIGlmIChleHRlbmRzRnJvbSkge1xuICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLCB2bSk7XG4gIH1cbiAgaWYgKGNoaWxkLm1peGlucykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgfVxuICB9XG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGhhbmRsZSBib29sZWFuIHByb3BzXG4gIGlmIChpc1R5cGUoQm9vbGVhbiwgcHJvcC50eXBlKSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWlzVHlwZShTdHJpbmcsIHByb3AudHlwZSkgJiYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpKSB7XG4gICAgICB2YWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkQ29udmVydCA9IG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydDtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSB0cnVlO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHByZXZTaG91bGRDb252ZXJ0O1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlICYmIGlzT2JqZWN0KHZhbHVlKSAmJiAoJ0BiaW5kaW5nJyBpbiB2YWx1ZSkpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKSArXG4gICAgICBcIiwgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNUeXBlICh0eXBlLCBmbikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZm4pKSB7XG4gICAgcmV0dXJuIGdldFR5cGUoZm4pID09PSBnZXRUeXBlKHR5cGUpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGdldFR5cGUoZm5baV0pID09PSBnZXRUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmICh2bSkge1xuICAgIHZhciBjdXIgPSB2bTtcbiAgICB3aGlsZSAoKGN1ciA9IGN1ci4kcGFyZW50KSkge1xuICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FwdHVyZSkgeyByZXR1cm4gfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ0Vycm9yKGUsIG51bGwsICdjb25maWcuZXJyb3JIYW5kbGVyJyk7XG4gICAgfVxuICB9XG4gIGxvZ0Vycm9yKGVyciwgdm0sIGluZm8pO1xufVxuXG5mdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuXG4vKiAgKi9cbi8qIGdsb2JhbHMgTWVzc2FnZUNoYW5uZWwgKi9cblxudmFyIGNhbGxiYWNrcyA9IFtdO1xudmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MgKCkge1xuICBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvcGllc1tpXSgpO1xuICB9XG59XG5cbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgYm90aCBtaWNybyBhbmQgbWFjcm8gdGFza3MuXG4vLyBJbiA8IDIuNCB3ZSB1c2VkIG1pY3JvIHRhc2tzIGV2ZXJ5d2hlcmUsIGJ1dCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Mgd2hlcmVcbi8vIG1pY3JvIHRhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZXMgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTApIG9yIGV2ZW4gYmV0d2VlbiBidWJibGluZyBvZiB0aGUgc2FtZVxuLy8gZXZlbnQgKCM2NTY2KS4gSG93ZXZlciwgdXNpbmcgbWFjcm8gdGFza3MgZXZlcnl3aGVyZSBhbHNvIGhhcyBzdWJ0bGUgcHJvYmxlbXNcbi8vIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludCAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEhlcmUgd2UgdXNlIG1pY3JvIHRhc2sgYnkgZGVmYXVsdCwgYnV0IGV4cG9zZSBhIHdheSB0byBmb3JjZSBtYWNybyB0YXNrIHdoZW5cbi8vIG5lZWRlZCAoZS5nLiBpbiBldmVudCBoYW5kbGVycyBhdHRhY2hlZCBieSB2LW9uKS5cbnZhciBtaWNyb1RpbWVyRnVuYztcbnZhciBtYWNyb1RpbWVyRnVuYztcbnZhciB1c2VNYWNyb1Rhc2sgPSBmYWxzZTtcblxuLy8gRGV0ZXJtaW5lIChtYWNybykgVGFzayBkZWZlciBpbXBsZW1lbnRhdGlvbi5cbi8vIFRlY2huaWNhbGx5IHNldEltbWVkaWF0ZSBzaG91bGQgYmUgdGhlIGlkZWFsIGNob2ljZSwgYnV0IGl0J3Mgb25seSBhdmFpbGFibGVcbi8vIGluIElFLiBUaGUgb25seSBwb2x5ZmlsbCB0aGF0IGNvbnNpc3RlbnRseSBxdWV1ZXMgdGhlIGNhbGxiYWNrIGFmdGVyIGFsbCBET01cbi8vIGV2ZW50cyB0cmlnZ2VyZWQgaW4gdGhlIHNhbWUgbG9vcCBpcyBieSB1c2luZyBNZXNzYWdlQ2hhbm5lbC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKHNldEltbWVkaWF0ZSkpIHtcbiAgbWFjcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSBpZiAodHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE1lc3NhZ2VDaGFubmVsKSB8fFxuICAvLyBQaGFudG9tSlNcbiAgTWVzc2FnZUNoYW5uZWwudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTWVzc2FnZUNoYW5uZWxDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gIHZhciBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaENhbGxiYWNrcztcbiAgbWFjcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcG9ydC5wb3N0TWVzc2FnZSgxKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIG1hY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG4vLyBEZXRlcm1pbmUgTWljcm9UYXNrIGRlZmVyIGltcGxlbWVudGF0aW9uLlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICBtaWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIGluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIGZhbGxiYWNrIHRvIG1hY3JvXG4gIG1pY3JvVGltZXJGdW5jID0gbWFjcm9UaW1lckZ1bmM7XG59XG5cbi8qKlxuICogV3JhcCBhIGZ1bmN0aW9uIHNvIHRoYXQgaWYgYW55IGNvZGUgaW5zaWRlIHRyaWdnZXJzIHN0YXRlIGNoYW5nZSxcbiAqIHRoZSBjaGFuZ2VzIGFyZSBxdWV1ZWQgdXNpbmcgYSBUYXNrIGluc3RlYWQgb2YgYSBNaWNyb1Rhc2suXG4gKi9cbmZ1bmN0aW9uIHdpdGhNYWNyb1Rhc2sgKGZuKSB7XG4gIHJldHVybiBmbi5fd2l0aFRhc2sgfHwgKGZuLl93aXRoVGFzayA9IGZ1bmN0aW9uICgpIHtcbiAgICB1c2VNYWNyb1Rhc2sgPSB0cnVlO1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIHVzZU1hY3JvVGFzayA9IGZhbHNlO1xuICAgIHJldHVybiByZXNcbiAgfSlcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICBpZiAodXNlTWFjcm9UYXNrKSB7XG4gICAgICBtYWNyb1RpbWVyRnVuYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtaWNyb1RpbWVyRnVuYygpO1xuICAgIH1cbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgUHJveHkudG9TdHJpbmcoKS5tYXRjaCgvbmF0aXZlIGNvZGUvKTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fCBrZXkuY2hhckF0KDApID09PSAnXyc7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpO1xuICAgIH07XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMpIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNsb25lZFtpXS5hcHBseShudWxsLCBhcmd1bWVudHMkMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gZm5zLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQub25jZSwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkuY29udGV4dHMpKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjb250ZXh0cyA9IGZhY3RvcnkuY29udGV4dHMgPSBbY29udGV4dF07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuXG4gICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjb250ZXh0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29udGV4dHNbaV0uJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYocmVzLmNvbXBvbmVudCkgJiYgdHlwZW9mIHJlcy5jb21wb25lbnQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgICAgICAgICAgICAgPyAoXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiKVxuICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4sIG9uY2UpIHtcbiAgaWYgKG9uY2UpIHtcbiAgICB0YXJnZXQuJG9uY2UoZXZlbnQsIGZuKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMkMS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcyQxLiRvZmYoZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoZm4pIHtcbiAgICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICAgIHZhciBjYjtcbiAgICAgIHZhciBpJDEgPSBjYnMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGkkMS0tKSB7XG4gICAgICAgIGNiID0gY2JzW2kkMV07XG4gICAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgICAgY2JzLnNwbGljZShpJDEsIDEpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgIHRpcChcbiAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXG4gICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYnNbaV0uYXBwbHkodm0sIGFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgdmFyIHNsb3RzID0ge307XG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gc2xvdHNcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzXG4pIHtcbiAgcmVzID0gcmVzIHx8IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZuc1tpXSkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhmbnNbaV0sIHJlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1tmbnNbaV0ua2V5XSA9IGZuc1tpXS5mbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgfVxuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhcbiAgICAgICAgdm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovLFxuICAgICAgICB2bS4kb3B0aW9ucy5fcGFyZW50RWxtLFxuICAgICAgICB2bS4kb3B0aW9ucy5fcmVmRWxtXG4gICAgICApO1xuICAgICAgLy8gbm8gbmVlZCBmb3IgdGhlIHJlZiBub2RlcyBhZnRlciBpbml0aWFsIHBhdGNoXG4gICAgICAvLyB0aGlzIHByZXZlbnRzIGtlZXBpbmcgYSBkZXRhY2hlZCBET00gdHJlZSBpbiBtZW1vcnkgKCM1ODUxKVxuICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSA9IHZtLiRvcHRpb25zLl9yZWZFbG0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwgbnVsbCwgdHJ1ZSAvKiBpc1JlbmRlcldhdGNoZXIgKi8pO1xuICBoeWRyYXRpbmcgPSBmYWxzZTtcblxuICAvLyBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlLCBjYWxsIG1vdW50ZWQgb24gc2VsZlxuICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9va1xuICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcbiAgICB2bS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTtcbiAgfVxuICByZXR1cm4gdm1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQgKFxuICB2bSxcbiAgcHJvcHNEYXRhLFxuICBsaXN0ZW5lcnMsXG4gIHBhcmVudFZub2RlLFxuICByZW5kZXJDaGlsZHJlblxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxuICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlblxuICB2YXIgaGFzQ2hpbGRyZW4gPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMgfHwgLy8gaGFzIG5ldyBzY29wZWQgc2xvdHNcbiAgICB2bS4kc2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0IC8vIGhhcyBvbGQgc2NvcGVkIHNsb3RzXG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IChwYXJlbnRWbm9kZS5kYXRhICYmIHBhcmVudFZub2RlLmRhdGEuYXR0cnMpIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gZmFsc2U7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgdm0uJG9wdGlvbnMucHJvcHMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSB0cnVlO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuICB9XG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChoYXNDaGlsZHJlbikge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICB0cnkge1xuICAgICAgICBoYW5kbGVyc1tpXS5jYWxsKHZtKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChob29rICsgXCIgaG9va1wiKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG59XG5cbi8qICAqL1xuXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzJDEubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzJDEuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMkMS5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gaXNSb290O1xuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodm0uJHBhcmVudCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEgKHZtKSB7XG4gIHZhciBkYXRhID0gdm0uJG9wdGlvbnMuZGF0YTtcbiAgZGF0YSA9IHZtLl9kYXRhID0gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbidcbiAgICA/IGdldERhdGEoZGF0YSwgdm0pXG4gICAgOiBkYXRhIHx8IHt9O1xuICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICBkYXRhID0ge307XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gcHJveHkgZGF0YSBvbiBpbnN0YW5jZVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgdmFyIG1ldGhvZHMgPSB2bS4kb3B0aW9ucy5tZXRob2RzO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChtZXRob2RzICYmIGhhc093bihtZXRob2RzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBkYXRhIHByb3BlcnR5LlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG4gICAgICAgIFwiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9kYXRhXCIsIGtleSk7XG4gICAgfVxuICB9XG4gIC8vIG9ic2VydmUgZGF0YVxuICBvYnNlcnZlKGRhdGEsIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG59XG5cbmZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogdXNlckRlZjtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogdXNlckRlZi5nZXRcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXRcbiAgICAgID8gdXNlckRlZi5zZXRcbiAgICAgIDogbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChtZXRob2RzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYW4gdW5kZWZpbmVkIHZhbHVlIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gbWV0aG9kc1trZXldID09IG51bGwgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGtleU9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGtleU9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKG5ld0RhdGEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IGZhbHNlO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGluamVjdCwga2V5KS5lbnVtZXJhYmxlXG4gICAgICB9KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgcHJvdmlkZUtleSBpbiBzb3VyY2UuX3Byb3ZpZGVkKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNEZWYocmV0KSkge1xuICAgIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xvdE5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV07XG4gICAgLy8gd2FybiBkdXBsaWNhdGUgc2xvdCB1c2FnZVxuICAgIGlmIChzbG90Tm9kZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNsb3ROb2Rlcy5fcmVuZGVyZWQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBzbG90IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZm91bmQgaW4gdGhlIHNhbWUgcmVuZGVyIHRyZWUgXCIgK1xuICAgICAgICAgIFwiLSB0aGlzIHdpbGwgbGlrZWx5IGNhdXNlIHJlbmRlciBlcnJvcnMuXCIsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCA9IHRydWU7XG4gICAgfVxuICAgIG5vZGVzID0gc2xvdE5vZGVzIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5BbGlhcyxcbiAgZXZlbnRLZXlOYW1lXG4pIHtcbiAgdmFyIGtleUNvZGVzID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbkFsaWFzO1xuICBpZiAoa2V5Q29kZXMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShrZXlDb2RlcykpIHtcbiAgICAgIHJldHVybiBrZXlDb2Rlcy5pbmRleE9mKGV2ZW50S2V5Q29kZSkgPT09IC0xXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBrZXlDb2RlcyAhPT0gZXZlbnRLZXlDb2RlXG4gICAgfVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUgYnkgZG9pbmcgYSBzaGFsbG93IGNsb25lLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRyZWUpXG4gICAgICA/IGNsb25lVk5vZGVzKHRyZWUpXG4gICAgICA6IGNsb25lVk5vZGUodHJlZSlcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpOyB9O1xuXG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBkYXRhLnNjb3BlZFNsb3RzIHx8IGVtcHR5T2JqZWN0O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUpIHtcbiAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gIH1cbn1cblxuaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dFZtLFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuXG4gIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY29udGV4dFZtLFxuICAgIEN0b3JcbiAgKTtcblxuICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgdm5vZGUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICAgIHZub2RlLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKGRhdGEuc2xvdCkge1xuICAgICAgKHZub2RlLmRhdGEgfHwgKHZub2RlLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cblxuXG5cbi8vIFJlZ2lzdGVyIHRoZSBjb21wb25lbnQgaG9vayB0byB3ZWV4IG5hdGl2ZSByZW5kZXIgZW5naW5lLlxuLy8gVGhlIGhvb2sgd2lsbCBiZSB0cmlnZ2VyZWQgYnkgbmF0aXZlLCBub3QgamF2YXNjcmlwdC5cblxuXG4vLyBVcGRhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50IHRvIHdlZXggbmF0aXZlIHJlbmRlciBlbmdpbmUuXG5cbi8qICAqL1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vSGFua3MxMDEwMC93ZWV4LW5hdGl2ZS1kaXJlY3RpdmUvdHJlZS9tYXN0ZXIvY29tcG9uZW50XG5cbi8vIGxpc3RlbmluZyBvbiBuYXRpdmUgY2FsbGJhY2tcblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAoXG4gICAgdm5vZGUsXG4gICAgaHlkcmF0aW5nLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG1cbiAgKSB7XG4gICAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlLFxuICAgICAgICBwYXJlbnRFbG0sXG4gICAgICAgIHJlZkVsbVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yLCBjb250ZXh0KTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBtZXJnZSBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIG1lcmdlSG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICAvLyBXZWV4IHNwZWNpZmljOiBpbnZva2UgcmVjeWNsZS1saXN0IG9wdGltaXplZCBAcmVuZGVyIGZ1bmN0aW9uIGZvclxuICAvLyBleHRyYWN0aW5nIGNlbGwtc2xvdCB0ZW1wbGF0ZS5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0hhbmtzMTAxMDAvd2VleC1uYXRpdmUtZGlyZWN0aXZlL3RyZWUvbWFzdGVyL2NvbXBvbmVudFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCwgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4gIHBhcmVudEVsbSxcbiAgcmVmRWxtXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgX3BhcmVudEVsbTogcGFyZW50RWxtIHx8IG51bGwsXG4gICAgX3JlZkVsbTogcmVmRWxtIHx8IG51bGxcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9va3MgKGRhdGEpIHtcbiAgaWYgKCFkYXRhLmhvb2spIHtcbiAgICBkYXRhLmhvb2sgPSB7fTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGZyb21QYXJlbnQgPSBkYXRhLmhvb2tba2V5XTtcbiAgICB2YXIgb3VycyA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBkYXRhLmhvb2tba2V5XSA9IGZyb21QYXJlbnQgPyBtZXJnZUhvb2skMShvdXJzLCBmcm9tUGFyZW50KSA6IG91cnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKG9uZSwgdHdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgIG9uZShhLCBiLCBjLCBkKTtcbiAgICB0d28oYSwgYiwgYywgZCk7XG4gIH1cbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0JzsoZGF0YS5wcm9wcyB8fCAoZGF0YS5wcm9wcyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICBpZiAoaXNEZWYob25bZXZlbnRdKSkge1xuICAgIG9uW2V2ZW50XSA9IFtkYXRhLm1vZGVsLmNhbGxiYWNrXS5jb25jYXQob25bZXZlbnRdKTtcbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAobnMpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgbnMgPSB1bmRlZmluZWQ7XG4gICAgZm9yY2UgPSB0cnVlO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoY2hpbGQudGFnKSAmJiAoaXNVbmRlZihjaGlsZC5ucykgfHwgaXNUcnVlKGZvcmNlKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7IC8vIHYtb25jZSBjYWNoZWQgdHJlZXNcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICAvLyBpZiB0aGUgcGFyZW50IGRpZG4ndCB1cGRhdGUsIHRoZSBzbG90IG5vZGVzIHdpbGwgYmUgdGhlIG9uZXMgZnJvbVxuICAgICAgLy8gbGFzdCByZW5kZXIuIFRoZXkgbmVlZCB0byBiZSBjbG9uZWQgdG8gZW5zdXJlIFwiZnJlc2huZXNzXCIgZm9yIHRoaXMgcmVuZGVyLlxuICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRzbG90cykge1xuICAgICAgICB2YXIgc2xvdCA9IHZtLiRzbG90c1trZXldO1xuICAgICAgICAvLyBfcmVuZGVyZWQgaXMgYSBmbGFnIGFkZGVkIGJ5IHJlbmRlclNsb3QsIGJ1dCBtYXkgbm90IGJlIHByZXNlbnRcbiAgICAgICAgLy8gaWYgdGhlIHNsb3QgaXMgcGFzc2VkIGZyb20gbWFudWFsbHkgd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zXG4gICAgICAgIGlmIChzbG90Ll9yZW5kZXJlZCB8fCAoc2xvdFswXSAmJiBzbG90WzBdLmVsbSkpIHtcbiAgICAgICAgICB2bS4kc2xvdHNba2V5XSA9IGNsb25lVk5vZGVzKHNsb3QsIHRydWUgLyogZGVlcCAqLyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2bS4kc2NvcGVkU2xvdHMgPSAoX3BhcmVudFZub2RlICYmIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzKSB8fCBlbXB0eU9iamVjdDtcblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgb3B0cy5fcGFyZW50RWxtID0gb3B0aW9ucy5fcGFyZW50RWxtO1xuICBvcHRzLl9yZWZFbG0gPSBvcHRpb25zLl9yZWZFbG07XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgZXh0ZW5kZWQgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBkZWR1cGUobGF0ZXN0W2tleV0sIGV4dGVuZGVkW2tleV0sIHNlYWxlZFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIGRlZHVwZSAobGF0ZXN0LCBleHRlbmRlZCwgc2VhbGVkKSB7XG4gIC8vIGNvbXBhcmUgbGF0ZXN0IGFuZCBzZWFsZWQgdG8gZW5zdXJlIGxpZmVjeWNsZSBob29rcyB3b24ndCBiZSBkdXBsaWNhdGVkXG4gIC8vIGJldHdlZW4gbWVyZ2VzXG4gIGlmIChBcnJheS5pc0FycmF5KGxhdGVzdCkpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgc2VhbGVkID0gQXJyYXkuaXNBcnJheShzZWFsZWQpID8gc2VhbGVkIDogW3NlYWxlZF07XG4gICAgZXh0ZW5kZWQgPSBBcnJheS5pc0FycmF5KGV4dGVuZGVkKSA/IGV4dGVuZGVkIDogW2V4dGVuZGVkXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGVzdC5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gcHVzaCBvcmlnaW5hbCBvcHRpb25zIGFuZCBub3Qgc2VhbGVkIG9wdGlvbnMgdG8gZXhjbHVkZSBkdXBsaWNhdGVkIG9wdGlvbnNcbiAgICAgIGlmIChleHRlbmRlZC5pbmRleE9mKGxhdGVzdFtpXSkgPj0gMCB8fCBzZWFsZWQuaW5kZXhPZihsYXRlc3RbaV0pIDwgMCkge1xuICAgICAgICByZXMucHVzaChsYXRlc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxhdGVzdFxuICB9XG59XG5cbmZ1bmN0aW9uIFZ1ZSQzIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlJDMpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlJDMpO1xuc3RhdGVNaXhpbihWdWUkMyk7XG5ldmVudHNNaXhpbihWdWUkMyk7XG5saWZlY3ljbGVNaXhpbihWdWUkMyk7XG5yZW5kZXJNaXhpbihWdWUkMyk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xuICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgdmFyIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzO1xuICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5IChcbiAgY2FjaGUsXG4gIGtleSxcbiAga2V5cyxcbiAgY3VycmVudFxuKSB7XG4gIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMkMS5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMkMS5jYWNoZSwga2V5LCB0aGlzJDEua2V5cyk7XG4gICAgfVxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgaW5jbHVkZTogZnVuY3Rpb24gaW5jbHVkZSAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0sXG4gICAgZXhjbHVkZTogZnVuY3Rpb24gZXhjbHVkZSAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUkMyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUkMy5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlJDMucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG5WdWUkMy52ZXJzaW9uID0gJzIuNS4xMyc7XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG5cblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0ZWRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZSAobm9kZSwga2V5LCB2YWwpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWwpO1xufVxuXG5cbnZhciBub2RlT3BzID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcblx0Y3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG5cdGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcblx0Y3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcblx0aW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG5cdHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcblx0YXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuXHRwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuXHRuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG5cdHRhZ05hbWU6IHRhZ05hbWUsXG5cdHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcblx0c2V0QXR0cmlidXRlOiBzZXRBdHRyaWJ1dGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFrZXkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcbiAgZnVuY3Rpb24gY3JlYXRlRWxtICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgbmVzdGVkKSB7XG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgY3JlYXRpbmdFbG1JblZQcmUpKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdVbmtub3duIGN1c3RvbSBlbGVtZW50OiA8JyArIHRhZyArICc+IC0gZGlkIHlvdSAnICtcbiAgICAgICAgICAgICdyZWdpc3RlciB0aGUgY29tcG9uZW50IGNvcnJlY3RseT8gRm9yIHJlY3Vyc2l2ZSBjb21wb25lbnRzLCAnICtcbiAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8sIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChyZWYkJDEucGFyZW50Tm9kZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldEF0dHJpYnV0ZSh2bm9kZS5lbG0sIGksICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldEF0dHJpYnV0ZSh2bm9kZS5lbG0sIGksICcnKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpO1xuICAgIH1cblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXG4gICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsgfVxuICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhlbG0sIG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcbiAgICB2bm9kZS5lbG0gPSBlbG07XG5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkgJiYgaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5KSkge1xuICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmVyIGlubmVySFRNTDogJywgaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0c1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSQxID0gbm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIG5ldyBub2RlXG4gICAgICAgIGNyZWF0ZUVsbShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICAgICAgLy8gZXh0cmVtZWx5IHJhcmUgZWRnZSBjYXNlOiBkbyBub3QgaW5zZXJ0IGlmIG9sZCBlbGVtZW50IGlzIGluIGFcbiAgICAgICAgICAvLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICtcbiAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuICAgICAgICAgIG9sZEVsbS5fbGVhdmVDYiA/IG51bGwgOiBwYXJlbnRFbG0kMSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtJDEpKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSQxLCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoXCJkaXJlY3RpdmUgXCIgKyAoZGlyLm5hbWUpICsgXCIgXCIgKyBob29rICsgXCIgaG9va1wiKSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZScgPyAnZmFsc2UnIDogJ3RydWUnKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgICAvLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyXG4gICAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKFxuICAgICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICAgIGtleSA9PT0gJ3BsYWNlaG9sZGVyJyAmJiAhZWwuX19pZXBoXG4gICAgICApIHtcbiAgICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgICAgfTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi9cbiAgICAgIH1cbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuXG5cblxuXG5cblxuXG5cbi8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKVxuXG5cblxuXG5cblxuXG5cbi8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbi8vIGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCBieSBwcm9jZXNzQXR0cnMuXG4vLyBCeSBkZWZhdWx0IGl0IGRvZXMgTk9UIHJlbW92ZSBpdCBmcm9tIHRoZSBtYXAgKGF0dHJzTWFwKSBiZWNhdXNlIHRoZSBtYXAgaXNcbi8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cblxuLyogICovXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICovXG5cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlZ2VuIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB2LW1vZGVsIHZhbHVlIGFzc2lnbm1lbnQgY29kZS5cbiAqL1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoaGFuZGxlciwgZXZlbnQsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIG9uY2UkJDEsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICBoYW5kbGVyID0gd2l0aE1hY3JvVGFzayhoYW5kbGVyKTtcbiAgaWYgKG9uY2UkJDEpIHsgaGFuZGxlciA9IGNyZWF0ZU9uY2VIYW5kbGVyKGhhbmRsZXIsIGV2ZW50LCBjYXB0dXJlKTsgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIuX3dpdGhUYXNrIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoaXNVbmRlZihwcm9wc1trZXldKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAvLyBpbnB1dHMgd2l0aCBsYXp5IHNob3VsZCBvbmx5IGJlIHVwZGF0ZWQgd2hlbiBub3QgaW4gZm9jdXNcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoXG4gICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSlcbiAgICAgICkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZi5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICBpZiAoIWlzQW5kcm9pZCkge1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHZhbHVlID09PSBvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59O1xuXG4vKiAgKi9cblxuLy8gUHJvdmlkZXMgdHJhbnNpdGlvbiBzdXBwb3J0IGZvciBhIHNpbmdsZSBlbGVtZW50L2NvbXBvbmVudC5cbi8vIHN1cHBvcnRzIHRyYW5zaXRpb24gbW9kZSAob3V0LWluIC8gaW4tb3V0KVxuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9KSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxuLy8gUHJvdmlkZXMgdHJhbnNpdGlvbiBzdXBwb3J0IGZvciBsaXN0IGl0ZW1zLlxuLy8gc3VwcG9ydHMgbW92ZSB0cmFuc2l0aW9ucyB1c2luZyB0aGUgRkxJUCB0ZWNobmlxdWUuXG5cbi8vIEJlY2F1c2UgdGhlIHZkb20ncyBjaGlsZHJlbiB1cGRhdGUgYWxnb3JpdGhtIGlzIFwidW5zdGFibGVcIiAtIGkuZS5cbi8vIGl0IGRvZXNuJ3QgZ3VhcmFudGVlIHRoZSByZWxhdGl2ZSBwb3NpdGlvbmluZyBvZiByZW1vdmVkIGVsZW1lbnRzLFxuLy8gd2UgZm9yY2UgdHJhbnNpdGlvbi1ncm91cCB0byB1cGRhdGUgaXRzIGNoaWxkcmVuIGludG8gdHdvIHBhc3Nlczpcbi8vIGluIHRoZSBmaXJzdCBwYXNzLCB3ZSByZW1vdmUgYWxsIG5vZGVzIHRoYXQgbmVlZCB0byBiZSByZW1vdmVkLFxuLy8gdHJpZ2dlcmluZyB0aGVpciBsZWF2aW5nIHRyYW5zaXRpb247IGluIHRoZSBzZWNvbmQgcGFzcywgd2UgaW5zZXJ0L21vdmVcbi8vIGludG8gdGhlIGZpbmFsIGRlc2lyZWQgc3RhdGUuIFRoaXMgd2F5IGluIHRoZSBzZWNvbmQgcGFzcyByZW1vdmVkXG4vLyBub2RlcyB3aWxsIHJlbWFpbiB3aGVyZSB0aGV5IHNob3VsZCBiZS5cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIGJlZm9yZVVwZGF0ZTogZnVuY3Rpb24gYmVmb3JlVXBkYXRlICgpIHtcbiAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgdGhpcy5fX3BhdGNoX18oXG4gICAgICB0aGlzLl92bm9kZSxcbiAgICAgIHRoaXMua2VwdCxcbiAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgKTtcbiAgICB0aGlzLl92bm9kZSA9IHRoaXMua2VwdDtcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUkMy5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZSQzLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZSQzLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlJDMuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZSQzLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlJDMub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZSQzLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlJDMucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlJDMucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuVnVlJDMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlJDMpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0Nocm9tZSkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgIGluQnJvd3NlciAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgKSB7XG4gICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICApO1xuICB9XG59LCAwKTtcblxuLyogICovXG5cbm1vZHVsZS5leHBvcnRzID0gVnVlJDM7XG4iLCJ2YXIgaW5zZXJ0ZWQgPSBleHBvcnRzLmNhY2hlID0ge31cblxuZnVuY3Rpb24gbm9vcCAoKSB7fVxuXG5leHBvcnRzLmluc2VydCA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgaWYgKGluc2VydGVkW2Nzc10pIHJldHVybiBub29wXG4gIGluc2VydGVkW2Nzc10gPSB0cnVlXG5cbiAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIGVsZW0uc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJylcblxuICBpZiAoJ3RleHRDb250ZW50JyBpbiBlbGVtKSB7XG4gICAgZWxlbS50ZXh0Q29udGVudCA9IGNzc1xuICB9IGVsc2Uge1xuICAgIGVsZW0uc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzXG4gIH1cblxuICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKGVsZW0pXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5yZW1vdmVDaGlsZChlbGVtKVxuICAgIGluc2VydGVkW2Nzc10gPSBmYWxzZVxuICB9XG59XG4iLCJ2YXIgVnVlIC8vIGxhdGUgYmluZFxudmFyIHZlcnNpb25cbnZhciBtYXAgPSAod2luZG93Ll9fVlVFX0hPVF9NQVBfXyA9IE9iamVjdC5jcmVhdGUobnVsbCkpXG52YXIgaW5zdGFsbGVkID0gZmFsc2VcbnZhciBpc0Jyb3dzZXJpZnkgPSBmYWxzZVxudmFyIGluaXRIb29rTmFtZSA9ICdiZWZvcmVDcmVhdGUnXG5cbmV4cG9ydHMuaW5zdGFsbCA9IGZ1bmN0aW9uICh2dWUsIGJyb3dzZXJpZnkpIHtcbiAgaWYgKGluc3RhbGxlZCkgeyByZXR1cm4gfVxuICBpbnN0YWxsZWQgPSB0cnVlXG5cbiAgVnVlID0gdnVlLl9fZXNNb2R1bGUgPyB2dWUuZGVmYXVsdCA6IHZ1ZVxuICB2ZXJzaW9uID0gVnVlLnZlcnNpb24uc3BsaXQoJy4nKS5tYXAoTnVtYmVyKVxuICBpc0Jyb3dzZXJpZnkgPSBicm93c2VyaWZ5XG5cbiAgLy8gY29tcGF0IHdpdGggPCAyLjAuMC1hbHBoYS43XG4gIGlmIChWdWUuY29uZmlnLl9saWZlY3ljbGVIb29rcy5pbmRleE9mKCdpbml0JykgPiAtMSkge1xuICAgIGluaXRIb29rTmFtZSA9ICdpbml0J1xuICB9XG5cbiAgZXhwb3J0cy5jb21wYXRpYmxlID0gdmVyc2lvblswXSA+PSAyXG4gIGlmICghZXhwb3J0cy5jb21wYXRpYmxlKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1tITVJdIFlvdSBhcmUgdXNpbmcgYSB2ZXJzaW9uIG9mIHZ1ZS1ob3QtcmVsb2FkLWFwaSB0aGF0IGlzICcgK1xuICAgICAgICAnb25seSBjb21wYXRpYmxlIHdpdGggVnVlLmpzIGNvcmUgXjIuMC4wLidcbiAgICApXG4gICAgcmV0dXJuXG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSByZWNvcmQgZm9yIGEgaG90IG1vZHVsZSwgd2hpY2gga2VlcHMgdHJhY2sgb2YgaXRzIGNvbnN0cnVjdG9yXG4gKiBhbmQgaW5zdGFuY2VzXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5cbmV4cG9ydHMuY3JlYXRlUmVjb3JkID0gZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIHZhciBDdG9yID0gbnVsbFxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBDdG9yID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnNcbiAgfVxuICBtYWtlT3B0aW9uc0hvdChpZCwgb3B0aW9ucylcbiAgbWFwW2lkXSA9IHtcbiAgICBDdG9yOiBDdG9yLFxuICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgaW5zdGFuY2VzOiBbXVxuICB9XG59XG5cbi8qKlxuICogTWFrZSBhIENvbXBvbmVudCBvcHRpb25zIG9iamVjdCBob3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5cbmZ1bmN0aW9uIG1ha2VPcHRpb25zSG90KGlkLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICB2YXIgcmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIChoLCBjdHgpIHtcbiAgICAgIHZhciBpbnN0YW5jZXMgPSBtYXBbaWRdLmluc3RhbmNlc1xuICAgICAgaWYgKGN0eCAmJiBpbnN0YW5jZXMuaW5kZXhPZihjdHgucGFyZW50KSA8IDApIHtcbiAgICAgICAgaW5zdGFuY2VzLnB1c2goY3R4LnBhcmVudClcbiAgICAgIH1cbiAgICAgIHJldHVybiByZW5kZXIoaCwgY3R4KVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpbmplY3RIb29rKG9wdGlvbnMsIGluaXRIb29rTmFtZSwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVjb3JkID0gbWFwW2lkXVxuICAgICAgaWYgKCFyZWNvcmQuQ3Rvcikge1xuICAgICAgICByZWNvcmQuQ3RvciA9IHRoaXMuY29uc3RydWN0b3JcbiAgICAgIH1cbiAgICAgIHJlY29yZC5pbnN0YW5jZXMucHVzaCh0aGlzKVxuICAgIH0pXG4gICAgaW5qZWN0SG9vayhvcHRpb25zLCAnYmVmb3JlRGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluc3RhbmNlcyA9IG1hcFtpZF0uaW5zdGFuY2VzXG4gICAgICBpbnN0YW5jZXMuc3BsaWNlKGluc3RhbmNlcy5pbmRleE9mKHRoaXMpLCAxKVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBJbmplY3QgYSBob29rIHRvIGEgaG90IHJlbG9hZGFibGUgY29tcG9uZW50IHNvIHRoYXRcbiAqIHdlIGNhbiBrZWVwIHRyYWNrIG9mIGl0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gaG9va1xuICovXG5cbmZ1bmN0aW9uIGluamVjdEhvb2sob3B0aW9ucywgbmFtZSwgaG9vaykge1xuICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zW25hbWVdXG4gIG9wdGlvbnNbbmFtZV0gPSBleGlzdGluZ1xuICAgID8gQXJyYXkuaXNBcnJheShleGlzdGluZykgPyBleGlzdGluZy5jb25jYXQoaG9vaykgOiBbZXhpc3RpbmcsIGhvb2tdXG4gICAgOiBbaG9va11cbn1cblxuZnVuY3Rpb24gdHJ5V3JhcChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGlkLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgZm4oaWQsIGFyZylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgVnVlIGNvbXBvbmVudCBob3QtcmVsb2FkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC4nXG4gICAgICApXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMgKG9sZE9wdGlvbnMsIG5ld09wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9sZE9wdGlvbnMpIHtcbiAgICBpZiAoIShrZXkgaW4gbmV3T3B0aW9ucykpIHtcbiAgICAgIGRlbGV0ZSBvbGRPcHRpb25zW2tleV1cbiAgICB9XG4gIH1cbiAgZm9yICh2YXIga2V5JDEgaW4gbmV3T3B0aW9ucykge1xuICAgIG9sZE9wdGlvbnNba2V5JDFdID0gbmV3T3B0aW9uc1trZXkkMV1cbiAgfVxufVxuXG5leHBvcnRzLnJlcmVuZGVyID0gdHJ5V3JhcChmdW5jdGlvbiAoaWQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgcmVjb3JkLmluc3RhbmNlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS4kZm9yY2VVcGRhdGUoKVxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMub3B0aW9uc1xuICB9XG4gIGlmIChyZWNvcmQuQ3Rvcikge1xuICAgIHJlY29yZC5DdG9yLm9wdGlvbnMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICByZWNvcmQuQ3Rvci5vcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG4gICAgcmVjb3JkLmluc3RhbmNlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS4kb3B0aW9ucy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgaW5zdGFuY2UuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNcbiAgICAgIC8vIHJlc2V0IHN0YXRpYyB0cmVlc1xuICAgICAgLy8gcHJlIDIuNSwgYWxsIHN0YXRpYyB0cmVlcyBhcmUgY2FoY2VkIHRvZ2V0aGVyIG9uIHRoZSBpbnN0YW5jZVxuICAgICAgaWYgKGluc3RhbmNlLl9zdGF0aWNUcmVlcykge1xuICAgICAgICBpbnN0YW5jZS5fc3RhdGljVHJlZXMgPSBbXVxuICAgICAgfVxuICAgICAgLy8gMi41LjBcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY29yZC5DdG9yLm9wdGlvbnMuY2FjaGVkKSkge1xuICAgICAgICByZWNvcmQuQ3Rvci5vcHRpb25zLmNhY2hlZCA9IFtdXG4gICAgICB9XG4gICAgICAvLyAyLjUuM1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5zdGFuY2UuJG9wdGlvbnMuY2FjaGVkKSkge1xuICAgICAgICBpbnN0YW5jZS4kb3B0aW9ucy5jYWNoZWQgPSBbXVxuICAgICAgfVxuICAgICAgLy8gcG9zdCAyLjUuNDogdi1vbmNlIHRyZWVzIGFyZSBjYWNoZWQgb24gaW5zdGFuY2UuX3N0YXRpY1RyZWVzLlxuICAgICAgLy8gUHVyZSBzdGF0aWMgdHJlZXMgYXJlIGNhY2hlZCBvbiB0aGUgc3RhdGljUmVuZGVyRm5zIGFycmF5XG4gICAgICAvLyAoYm90aCBhbHJlYWR5IHJlc2V0IGFib3ZlKVxuICAgICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIC8vIGZ1bmN0aW9uYWwgb3Igbm8gaW5zdGFuY2UgY3JlYXRlZCB5ZXRcbiAgICByZWNvcmQub3B0aW9ucy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgIHJlY29yZC5vcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG5cbiAgICAvLyBoYW5kbGUgZnVuY3Rpb25hbCBjb21wb25lbnQgcmUtcmVuZGVyXG4gICAgaWYgKHJlY29yZC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIHJlcmVuZGVyIHdpdGggZnVsbCBvcHRpb25zXG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMikge1xuICAgICAgICB1cGRhdGVPcHRpb25zKHJlY29yZC5vcHRpb25zLCBvcHRpb25zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGVtcGxhdGUtb25seSByZXJlbmRlci5cbiAgICAgICAgLy8gbmVlZCB0byBpbmplY3QgdGhlIHN0eWxlIGluamVjdGlvbiBjb2RlIGZvciBDU1MgbW9kdWxlc1xuICAgICAgICAvLyB0byB3b3JrIHByb3Blcmx5LlxuICAgICAgICB2YXIgaW5qZWN0U3R5bGVzID0gcmVjb3JkLm9wdGlvbnMuX2luamVjdFN0eWxlc1xuICAgICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgICAgdmFyIHJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICAgICAgcmVjb3JkLm9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gKGgsIGN0eCkge1xuICAgICAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoY3R4KVxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihoLCBjdHgpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWNvcmQub3B0aW9ucy5fQ3RvciA9IG51bGxcbiAgICAgIC8vIDIuNS4zXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNvcmQub3B0aW9ucy5jYWNoZWQpKSB7XG4gICAgICAgIHJlY29yZC5vcHRpb25zLmNhY2hlZCA9IFtdXG4gICAgICB9XG4gICAgICByZWNvcmQuaW5zdGFuY2VzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgICAgIH0pXG4gICAgfVxuICB9XG59KVxuXG5leHBvcnRzLnJlbG9hZCA9IHRyeVdyYXAoZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIHZhciByZWNvcmQgPSBtYXBbaWRdXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucy5vcHRpb25zXG4gICAgfVxuICAgIG1ha2VPcHRpb25zSG90KGlkLCBvcHRpb25zKVxuICAgIGlmIChyZWNvcmQuQ3Rvcikge1xuICAgICAgaWYgKHZlcnNpb25bMV0gPCAyKSB7XG4gICAgICAgIC8vIHByZXNlcnZlIHByZSAyLjIgYmVoYXZpb3IgZm9yIGdsb2JhbCBtaXhpbiBoYW5kbGluZ1xuICAgICAgICByZWNvcmQuQ3Rvci5leHRlbmRPcHRpb25zID0gb3B0aW9uc1xuICAgICAgfVxuICAgICAgdmFyIG5ld0N0b3IgPSByZWNvcmQuQ3Rvci5zdXBlci5leHRlbmQob3B0aW9ucylcbiAgICAgIHJlY29yZC5DdG9yLm9wdGlvbnMgPSBuZXdDdG9yLm9wdGlvbnNcbiAgICAgIHJlY29yZC5DdG9yLmNpZCA9IG5ld0N0b3IuY2lkXG4gICAgICByZWNvcmQuQ3Rvci5wcm90b3R5cGUgPSBuZXdDdG9yLnByb3RvdHlwZVxuICAgICAgaWYgKG5ld0N0b3IucmVsZWFzZSkge1xuICAgICAgICAvLyB0ZW1wb3JhcnkgZ2xvYmFsIG1peGluIHN0cmF0ZWd5IHVzZWQgaW4gPCAyLjAuMC1hbHBoYS42XG4gICAgICAgIG5ld0N0b3IucmVsZWFzZSgpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnMocmVjb3JkLm9wdGlvbnMsIG9wdGlvbnMpXG4gICAgfVxuICB9XG4gIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGlmIChpbnN0YW5jZS4kdm5vZGUgJiYgaW5zdGFuY2UuJHZub2RlLmNvbnRleHQpIHtcbiAgICAgIGluc3RhbmNlLiR2bm9kZS5jb250ZXh0LiRmb3JjZVVwZGF0ZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1Jvb3Qgb3IgbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSBtb2RpZmllZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuJ1xuICAgICAgKVxuICAgIH1cbiAgfSlcbn0pXG4iLCJWdWUuY29uZmlnLmRldnRvb2xzID0gdHJ1ZTtcclxuXHJcbmltcG9ydCBtQXBwbGljYXRpb24gZnJvbSAnLi4vdnVlL20tYXBsaWNhdGlvbi52dWUnO1xyXG5pbXBvcnQgTGFuZyBmcm9tICcuL2xhbmcnO1xyXG5cclxubGV0IGxhbmcgPSBuZXcgTGFuZygpO1xyXG5cclxud2luZG93LmRvY3VtZW50LnRpdGxlID0gbGFuZy50cmFuc2xhdGUoJ3RpdGxlJyk7XHJcblxyXG5WdWUuZGlyZWN0aXZlKCdsYW5nJywge1xyXG4gICAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIChlbCwgYmluZGluZykge1xyXG4gICAgICAgIGVsLmlubmVySFRNTCA9IGxhbmcudHJhbnNsYXRlKGJpbmRpbmcudmFsdWUpO1xyXG4gICAgfVxyXG59KTtcclxuVnVlLmRpcmVjdGl2ZSgnbGFuZy1jaGlsZHJlbicsIHtcclxuICAgIGluc2VydGVkOiBmdW5jdGlvbiAoZWwsIGJpbmRpbmcpIHtcclxuICAgICAgICBlbC5jaGlsZHJlblswXS5pbm5lckhUTUwgPSBsYW5nLnRyYW5zbGF0ZShiaW5kaW5nLnZhbHVlKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5uZXcgVnVlKHtcclxuICAgIGVsOiAnI2FwcCcsXHJcbiAgICBjb21wb25lbnRzOiB7bUFwcGxpY2F0aW9ufVxyXG59KTsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBMYW5nIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmRldGVjdGVkID0gKG5hdmlnYXRvci5sYW5ndWFnZSB8fCBuYXZpZ2F0b3IudXNlckxhbmd1YWdlKS5zcGxpdCgnLScpWzBdO1xyXG4gICAgICAgIHRoaXMuY3VycmVudCA9ICcnO1xyXG4gICAgICAgIHRoaXMuZGljdGlvbmFyeSA9IExhbmcubG9hZCh0aGlzLmN1cnJlbnQgfHwgdGhpcy5kZXRlY3RlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNsYXRlKGtleSkge1xyXG4gICAgICAgIHJldHVybiBfLmdldCh0aGlzLmRpY3Rpb25hcnksIGtleSwgJyNmaXggdGhpcyMnKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbG9hZChsYW5nLCBzdG9wKSB7XHJcbiAgICAgICAgbGV0IGRpY3Rpb25hcnkgPSBudWxsO1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogJy9sYW5nLycgKyBsYW5nICsgJy5qc29uJyxcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgYXN5bmM6IGZhbHNlLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgZGljdGlvbmFyeSA9IGRhdGE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gKGRpY3Rpb25hcnkgPT0gbnVsbCAmJiAhc3RvcCkgPyBMYW5nLmxvYWQoJ2VuJykgOiBkaWN0aW9uYXJ5O1xyXG4gICAgfVxyXG59IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cIm15LWF1dG9cIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGZsZXgtY29sdW1uIGZsZXgtbWQtcm93IG1iLTUganVzdGlmeS1jb250ZW50LWJldHdlZW5cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm15LWluZm9cIj5cclxuICAgICAgICAgICAgICAgIDxoMSBjbGFzcz1cIm15LWFib3V0LW5hbWUgbWItMCAtLWJlYmFzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1sYW5nPVwiJ2Fib3V0Lm5hbWUnXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtbGFuZz1cIidhYm91dC5zdXJuYW1lJ1wiIGNsYXNzPVwiLS1teS1jb2xvclwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvaDE+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3ViaGVhZGluZyBtYi01IC0tdXBwZXJjYXNlIC0tYmViYXNcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIi0tbXktY29sb3IgbXktY29udGFjdFwiIGhyZWY9XCJtYWlsdG86bmFtZUBlbWFpbC5jb21cIiB2LWxhbmc9XCInYWJvdXQubWFpbCdcIj48L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+IMK3IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWxhbmc9XCInYWJvdXQubG9jYXRpb24nXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPiDCtyA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCItLW15LWNvbG9yIG15LWNvbnRhY3RcIiBocmVmPVwidGVsOiszOCAoMDY2KSAwMzQtOTEtNDBcIj4rMzggKDA2NikgMDM0LTkxLTQwPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXktcXIgZmxleC1tZC1yb3cgbXQtM1wiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJteS1xci1jb2RlIGljb24tcXJjb2RlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwYXRoMlwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInN1YmhlYWRpbmcgbWItNVwiPlxyXG4gICAgICAgICAgICA8c3BhbiB2LWxhbmc9XCInYWJvdXQuaW5mb3JtYXRpb24nXCI+PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwic3ViaGVhZGluZyBtYi01XCI+XHJcbiAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3ZrLmNvbS9za3l1b2tlclwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibXktbGlua1wiIHYtYi10b29sdGlwLmNsaWNrIHRpdGxlPVwiVmtvbnRha3RlXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb24tdmsgLS1yYWRpdXMgcC0yXCI+PC9zcGFuPjwvYT5cclxuICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vdC5tZS9zanJzbHZcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cIm15LWxpbmtcIiB2LWItdG9vbHRpcC5ob3ZlciB0aXRsZT1cIlRlbGVncmFtXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb24tdGVsZWdyYW0gLS1yYWRpdXMgcC0yXCI+PC9zcGFuPjwvYT5cclxuICAgICAgICAgICAgPGEgaHJlZj1cInZpYmVyOi8vY2hhdD9udW1iZXI9KzM4MDY2MDM0OTE0MFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibXktbGlua1wiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiVmliZXJcIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbi12aWJlciAtLXJhZGl1cyBwLTJcIj48L3NwYW4+PC9hPlxyXG4gICAgICAgICAgICA8YSBocmVmPVwic2t5cGU6YWx0YWdlcmU/Y2FsbFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibXktbGlua1wiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiU2t5cGVcIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbi1za3lwZSAtLXJhZGl1cyBwLTJcIj48L3NwYW4+PC9hPlxyXG4gICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL1NhbHlnYVlhcm9zbGF2XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJteS1saW5rXCIgdi1iLXRvb2x0aXAuaG92ZXJcclxuICAgICAgICAgICAgICAgdGl0bGU9XCJHaXRIdWJcIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbi1naXRodWIgLS1yYWRpdXMgcC0yXCI+PC9zcGFuPjwvYT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOiBcIm0tYWJvdXRcIlxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxyXG4gICAgQGltcG9ydCBcIi4uL3Njc3MvbWFpblwiO1xyXG5cclxuICAgIC5teS1saW5rIHtcclxuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcblxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5teS1jb250YWN0IHtcclxuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcblxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkYmx1ZS1kYXJrbmVzcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLm15LXFyIHtcclxuICAgICAgICB3aWR0aDogNnJlbTtcclxuICAgICAgICBoZWlnaHQ6IDZyZW07XHJcbiAgICAgICAgJi1jb2RlIHtcclxuICAgICAgICAgICAgd2lkdGg6IDZyZW07XHJcbiAgICAgICAgICAgIGhlaWdodDogNnJlbTtcclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDAuNHJlbTtcclxuICAgICAgICAgICAgZm9udC1zaXplOiA1cmVtO1xyXG4gICAgICAgICAgICBjb2xvcjogJGRhcmstcmVndWxhcjtcclxuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJGJsdWUtcmVndWxhcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdj5cclxuICAgICAgICA8Yi1uYXZiYXIgZml4ZWQ9XCJ0b3BcIiBjbGFzcz1cIm15LW5hdlwiIHRvZ2dsZWFibGU9XCJsZ1wiPlxyXG4gICAgICAgICAgICA8Yi1uYXZiYXItYnJhbmQgY2xhc3M9XCJtdC1sZy01IG1yLTBcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZC1ibG9jayBkLWxnLW5vbmVcIiB2LWxhbmc9XCInbWVudS5wb3J0Zm9saW8nXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkLW5vbmUgZC1sZy1ibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJpbWctZmx1aWQgaW1nLXByb2ZpbGUgcm91bmRlZC1jaXJjbGUgbXgtYXV0byBtYi0yXCIgc3JjPVwiL2Fzc2V0cy9hdmEuanBnXCIgYWx0PVwiXCI+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvYi1uYXZiYXItYnJhbmQ+XHJcbiAgICAgICAgICAgIDxiLW5hdmJhci10b2dnbGUgdGFyZ2V0PVwibXlfY29sbGFwc2VcIj48L2ItbmF2YmFyLXRvZ2dsZT5cclxuICAgICAgICAgICAgPGItY29sbGFwc2UgaXMtbmF2IGlkPVwibXlfY29sbGFwc2VcIj5cclxuICAgICAgICAgICAgICAgIDxiLW5hdiB2ZXJ0aWNhbCB2LWItc2Nyb2xsc3B5OnNweT5cclxuICAgICAgICAgICAgICAgICAgICA8Yi1uYXYtaXRlbSBocmVmPVwiI2Fib3V0XCIgdi1sYW5nLWNoaWxkcmVuPVwiJ21lbnUuYWJvdXQnXCI+PC9iLW5hdi1pdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxiLW5hdi1pdGVtIGhyZWY9XCIjZXhwZXJpZW5jZVwiIHYtbGFuZy1jaGlsZHJlbj1cIidtZW51LmV4cGVyaWVuY2UnXCI+PC9iLW5hdi1pdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxiLW5hdi1pdGVtIGhyZWY9XCIjZWR1Y2F0aW9uXCIgdi1sYW5nLWNoaWxkcmVuPVwiJ21lbnUuZWR1Y2F0aW9uJ1wiPjwvYi1uYXYtaXRlbT5cclxuICAgICAgICAgICAgICAgICAgICA8Yi1uYXYtaXRlbSBocmVmPVwiI3NraWxsc1wiIHYtbGFuZy1jaGlsZHJlbj1cIidtZW51LnNraWxscydcIj48L2ItbmF2LWl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGItbmF2LWl0ZW0gaHJlZj1cIiNpbnRlcmVzdHNcIiB2LWxhbmctY2hpbGRyZW49XCInbWVudS5pbnRlcmVzdHMnXCI+PC9iLW5hdi1pdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxiLW5hdi1pdGVtIGhyZWY9XCIjY2VydGlmaWNhdGlvbnNcIiB2LWxhbmctY2hpbGRyZW49XCInbWVudS5jZXJ0aWZpY2F0aW9ucydcIj48L2ItbmF2LWl0ZW0+XHJcbiAgICAgICAgICAgICAgICA8L2ItbmF2PlxyXG4gICAgICAgICAgICA8L2ItY29sbGFwc2U+XHJcbiAgICAgICAgPC9iLW5hdmJhcj5cclxuICAgICAgICA8bS1jb250ZW50IHYtYmluZDpwYXJ0cz1cInBhcnRzXCI+PC9tLWNvbnRlbnQ+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBpbXBvcnQgbUNvbnRlbnQgZnJvbSBcIi4vbS1jb250ZW50LnZ1ZVwiO1xyXG5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBjb21wb25lbnRzOiB7bUNvbnRlbnR9LFxyXG4gICAgICAgIG5hbWU6IFwibS1hcGxpY2F0aW9uXCJcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cclxuICAgIEBpbXBvcnQgXCIuLi9zY3NzL21haW5cIjtcclxuXHJcbiAgICAubXktbmF2IHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmx1ZS1yZWd1bGFyO1xyXG5cclxuICAgICAgICAubmF2YmFyLWJyYW5kIHtcclxuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLm5hdmJhci10b2dnbGVyIHtcclxuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZmZmZmZmO1xyXG4gICAgICAgICAgICAubmF2YmFyLXRvZ2dsZXItaWNvbiB7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1bnNldDtcclxuICAgICAgICAgICAgICAgIC13ZWJraXQtbWFzazogdXJsKC9hc3NldHMvdG9nZ2xlLnN2Zykgbm8tcmVwZWF0IDUwJSA1MCU7XHJcbiAgICAgICAgICAgICAgICBtYXNrOiB1cmwoL2Fzc2V0cy90b2dnbGUuc3ZnKSBuby1yZXBlYXQgNTAlIDUwJTtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5pbWctcHJvZmlsZSB7XHJcbiAgICAgICAgICAgIG1heC13aWR0aDogMTByZW07XHJcbiAgICAgICAgICAgIG1heC1oZWlnaHQ6IDEwcmVtO1xyXG4gICAgICAgICAgICBib3JkZXI6IC44cmVtIHNvbGlkICRibHVlLWRhcmtuZXNzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAubmF2LWl0ZW0ge1xyXG4gICAgICAgICAgICAmLmFjdGl2ZSB7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmx1ZS1kYXJrbmVzcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLm5hdi1saW5rIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmO1xyXG4gICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1NzZweCkge1xyXG4gICAgICAgIC5teS1jb250ZW50IHtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogNTBweFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcclxuICAgICAgICBib2R5IHtcclxuICAgICAgICAgICAgcGFkZGluZy10b3A6IDA7XHJcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMjByZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5teS1uYXYge1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgICAgICB3aWR0aDogMjByZW07XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwdmg7XHJcblxyXG4gICAgICAgICAgICAubmF2IHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbjogYXV0bztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwibXktYXV0b1wiPlxyXG4gICAgICAgIDxoMiBjbGFzcz1cIm15LWFib3V0LW5hbWUgbWItNSAtLWJlYmFzXCIgdi1sYW5nPVwiJ2NlcnRpZmljYXRpb25zLnRpdGxlJ1wiPjwvaDI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtbiBmbGV4LW1kLXJvdyBtYi01XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtci1hdXRvIHN1YmhlYWRpbmdcIj5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3QgbXktY2VydGlmaWNhdGlvbnMtbGlzdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtaXRlbVwiPjxpIGNsYXNzPVwibXktY2VydGlmaWNhdGlvbnMtaWNvbiBpY29uLXRyb3BoeSBtci0yXCI+PC9pPjxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWxhbmc9XCInY2VydGlmaWNhdGlvbnMuZmlyc3QnXCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pdGVtXCI+PGkgY2xhc3M9XCJteS1jZXJ0aWZpY2F0aW9ucy1pY29uIGljb24tdHJvcGh5IG1yLTJcIj48L2k+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbGFuZz1cIidjZXJ0aWZpY2F0aW9ucy50aGlyZCdcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWl0ZW1cIj48aSBjbGFzcz1cIm15LWNlcnRpZmljYXRpb25zLWljb24gaWNvbi10cm9waHkgbXItMlwiPjwvaT48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1sYW5nPVwiJ2NlcnRpZmljYXRpb25zLmZvdXInXCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIHYtbGFuZz1cIidjZXJ0aWZpY2F0aW9ucy5tb3JlJ1wiPjwvcD5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwibS1jZXJ0aWZpY2F0aW9uc1wiXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XHJcbiAgICBAaW1wb3J0IFwiLi4vc2Nzcy9tYWluXCI7XHJcblxyXG4gICAgLm15LWNlcnRpZmljYXRpb25zLWxpc3Qge1xyXG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAycmVtO1xyXG5cclxuICAgICAgICAubGlzdC1pdGVtIHtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjM1cmVtO1xyXG4gICAgICAgICAgICBjb2xvcjogJGdyYXktcmVndWxhcjtcclxuXHJcbiAgICAgICAgICAgIC5teS1jZXJ0aWZpY2F0aW9ucy1pY29uIHtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICRibHVlLXJlZ3VsYXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cIm15LWNvbnRlbnQgY29udGFpbmVyLWZsdWlkIHAtMFwiPlxyXG4gICAgICAgIDxzZWN0aW9uIGlkPVwiYWJvdXRcIiBjbGFzcz1cIm15LXNlY3Rpb24gcC0zIHAtbGctNSBkLWZsZXggZC1jb2x1bW5cIj5cclxuICAgICAgICAgICAgPG0tYWJvdXQ+PC9tLWFib3V0PlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICA8c2VjdGlvbiBpZD1cImV4cGVyaWVuY2VcIiBjbGFzcz1cIm15LXNlY3Rpb24gcC0zIHAtbGctNSBkLWZsZXggZC1jb2x1bW5cIj5cclxuICAgICAgICAgICAgPG0tZXhwZXJpZW5jZT48L20tZXhwZXJpZW5jZT5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24gaWQ9XCJlZHVjYXRpb25cIiBjbGFzcz1cIm15LXNlY3Rpb24gcC0zIHAtbGctNSBkLWZsZXggZC1jb2x1bW5cIj5cclxuICAgICAgICAgICAgPG0tZWR1Y2F0aW9uPjwvbS1lZHVjYXRpb24+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uIGlkPVwic2tpbGxzXCIgY2xhc3M9XCJteS1zZWN0aW9uIHAtMyBwLWxnLTUgZC1mbGV4IGQtY29sdW1uXCI+XHJcbiAgICAgICAgICAgIDxtLXNraWxscz48L20tc2tpbGxzPlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICA8c2VjdGlvbiBpZD1cImludGVyZXN0c1wiIGNsYXNzPVwibXktc2VjdGlvbiBwLTMgcC1sZy01IGQtZmxleCBkLWNvbHVtblwiPlxyXG4gICAgICAgICAgICA8bS1pbnRlcmVzdHM+PC9tLWludGVyZXN0cz5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24gaWQ9XCJjZXJ0aWZpY2F0aW9uc1wiIGNsYXNzPVwibXktc2VjdGlvbiBwLTMgcC1sZy01IGQtZmxleCBkLWNvbHVtblwiPlxyXG4gICAgICAgICAgICA8bS1jZXJ0aWZpY2F0aW9ucz48L20tY2VydGlmaWNhdGlvbnM+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IE1BYm91dCBmcm9tIFwiLi9tLWFib3V0LnZ1ZVwiO1xyXG4gICAgaW1wb3J0IE1FeHBlcmllbmNlIGZyb20gXCIuL20tZXhwZXJpZW5jZS52dWVcIjtcclxuICAgIGltcG9ydCBNRWR1Y2F0aW9uIGZyb20gXCIuL20tZWR1Y2F0aW9uLnZ1ZVwiO1xyXG4gICAgaW1wb3J0IE1Ta2lsbHMgZnJvbSBcIi4vbS1za2lsbHMudnVlXCI7XHJcbiAgICBpbXBvcnQgTUludGVyZXN0cyBmcm9tIFwiLi9tLWludGVyZXN0cy52dWVcIjtcclxuICAgIGltcG9ydCBNQ2VydGlmaWNhdGlvbnMgZnJvbSBcIi4vbS1jZXJ0aWZpY2F0aW9ucy52dWVcIjtcclxuXHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgY29tcG9uZW50czoge1xyXG4gICAgICAgICAgICBNQ2VydGlmaWNhdGlvbnMsXHJcbiAgICAgICAgICAgIE1JbnRlcmVzdHMsXHJcbiAgICAgICAgICAgIE1Ta2lsbHMsXHJcbiAgICAgICAgICAgIE1FeHBlcmllbmNlLFxyXG4gICAgICAgICAgICBNQWJvdXQsXHJcbiAgICAgICAgICAgIE1FZHVjYXRpb25cclxuICAgICAgICB9LFxyXG4gICAgICAgIG5hbWU6IFwibS1jb250ZW50XCJcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cclxuICAgIEBpbXBvcnQgXCIuLi9zY3NzL21haW5cIjtcclxuXHJcbiAgICAubXktY29udGVudCB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAgICAgICAubXktc2VjdGlvbiB7XHJcbiAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xyXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGdyYXktcmVndWxhcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cIm15LWF1dG9cIj5cclxuICAgICAgICA8aDIgY2xhc3M9XCJteS1hYm91dC1uYW1lIG1iLTUgLS1iZWJhc1wiIHYtbGFuZz1cIidlZHVjYXRpb24udGl0bGUnXCI+PC9oMj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGZsZXgtY29sdW1uIGZsZXgtbWQtcm93IG1iLTVcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlc3VtZS1jb250ZW50IG1yLWF1dG9cIj5cclxuICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cIm1iLTAgLS1iZWJhc1wiIHYtbGFuZz1cIidlZHVjYXRpb24uZGdtYSdcIj48L2gzPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN1YmhlYWRpbmcgbWItMyAtLWJlYmFzXCIgdi1sYW5nPVwiJ2VkdWNhdGlvbi5kZ21hLXNwZWNpYWwnXCI+PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXktZGF0ZSB0ZXh0LW1kLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIi0tbXktY29sb3JcIiB2LWxhbmc9XCInZWR1Y2F0aW9uLmRnbWEtdGltZSdcIj48L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgbWItNVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdW1lLWNvbnRlbnQgbXItYXV0b1wiPlxyXG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwibWItMCAtLWJlYmFzXCIgdi1sYW5nPVwiJ2VkdWNhdGlvbi5kbXQnXCI+PC9oMz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWJoZWFkaW5nIG1iLTMgLS1iZWJhc1wiIHYtbGFuZz1cIidlZHVjYXRpb24uZG10LXNwZWNpYWwnXCI+PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXktZGF0ZSB0ZXh0LW1kLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIi0tbXktY29sb3JcIiB2LWxhbmc9XCInZWR1Y2F0aW9uLmRtdC10aW1lJ1wiPjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJtLWVkdWNhdGlvblwiXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XHJcbiAgICBAaW1wb3J0IFwiLi4vc2Nzcy9tYWluXCI7XHJcblxyXG4gICAgLm15LWF1dG8ge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG5cclxuICAgIC5teS1kYXRlIHtcclxuICAgICAgICBtaW4td2lkdGg6IDE4cmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cIm15LWF1dG9cIj5cclxuICAgICAgICA8aDIgY2xhc3M9XCJteS1hYm91dC1uYW1lIG1iLTUgLS1iZWJhc1wiIHYtbGFuZz1cIidleHBlcmllbmNlLnRpdGxlJ1wiPjwvaDI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtbiBmbGV4LW1kLXJvdyBtYi01XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyZXN1bWUtY29udGVudCBtci1hdXRvXCI+XHJcbiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJtYi0wIC0tYmViYXNcIj5NaWRkbGUgV2ViIERldmVsb3BlcjwvaDM+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3ViaGVhZGluZyBtYi0zIC0tYmViYXNcIj5JVCAyLjA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwic3ViaGVhZGluZyAtLWFjcm9iYXRcIiB2LWxhbmc9XCInZXhwZXJpZW5jZS5pdDIwJ1wiPjwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJteS1kYXRlIHRleHQtbWQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiLS1teS1jb2xvclwiIHYtbGFuZz1cIidleHBlcmllbmNlLml0MjAtdGltZSdcIj48L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgbWItNVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdW1lLWNvbnRlbnQgbXItYXV0b1wiPlxyXG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwibWItMCAtLWJlYmFzXCI+SnVuaW9yIFdlYiBEZXZlbG9wZXI8L2gzPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN1YmhlYWRpbmcgbWItMyAtLWJlYmFzXCI+UXVhcnRTb2Z0PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInN1YmhlYWRpbmcgLS1hY3JvYmF0XCIgdi1sYW5nPVwiJ2V4cGVyaWVuY2UucXMnXCI+PC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm15LWRhdGUgdGV4dC1tZC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCItLW15LWNvbG9yXCIgdi1sYW5nPVwiJ2V4cGVyaWVuY2UucXMtdGltZSdcIj48L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgbWItNVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdW1lLWNvbnRlbnQgbXItYXV0b1wiPlxyXG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwibWItMCAtLWJlYmFzXCIgdi1sYW5nPVwiJ2V4cGVyaWVuY2UubWV2cy1wb3MnXCI+PC9oMz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWJoZWFkaW5nIG1iLTMgLS1iZWJhc1wiPk1FVlM8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwic3ViaGVhZGluZyAtLWFjcm9iYXRcIiB2LWxhbmc9XCInZXhwZXJpZW5jZS5tZXZzJ1wiPjwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJteS1kYXRlIHRleHQtbWQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiLS1teS1jb2xvclwiIHYtbGFuZz1cIidleHBlcmllbmNlLm1ldnMtdGltZSdcIj48L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwibS1leHBlcmllbmNlXCJcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cclxuICAgIEBpbXBvcnQgXCIuLi9zY3NzL21haW5cIjtcclxuXHJcbiAgICAubXktZGF0ZSB7XHJcbiAgICAgICAgbWluLXdpZHRoOiAxOHJlbTtcclxuICAgICAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgfVxyXG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJteS1hdXRvXCI+XHJcbiAgICAgICAgPGgyIGNsYXNzPVwibXktYWJvdXQtbmFtZSBtYi01IC0tYmViYXNcIiB2LWxhbmc9XCInaW50ZXJlc3RzLnRpdGxlJ1wiPjwvaDI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtbiBmbGV4LW1kLXJvdyBtYi01XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyZXN1bWUtY29udGVudCBtci1hdXRvXCI+XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInN1YmhlYWRpbmcgLS1hY3JvYmF0XCIgdi1sYW5nPVwiJ2ludGVyZXN0cy50ZXh0J1wiPjwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJtLWludGVyZXN0c1wiXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XHJcbiAgICBAaW1wb3J0IFwiLi4vc2Nzcy9tYWluXCI7XHJcbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cIm15LWF1dG9cIj5cclxuICAgICAgICA8aDIgY2xhc3M9XCJteS1hYm91dC1uYW1lIG1iLTUgLS1iZWJhc1wiIHYtbGFuZz1cIidza2lsbHMudGl0bGUnXCI+PC9oMj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGZsZXgtY29sdW1uIGZsZXgtbWQtcm93IG1iLTVcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlc3VtZS1jb250ZW50IG1yLWF1dG9cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWJoZWFkaW5nIG1iLTMgLS1iZWJhc1wiIHYtbGFuZz1cIidza2lsbHMubGFuZ3VhZ2VzJ1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibGlzdC1pbmxpbmUgbGlzdC1pY29uc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtaW5saW5lLWl0ZW1cIiB2LWItdG9vbHRpcC5ob3ZlciB0aXRsZT1cIkhUTUw1XCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1odG1sNVwiPjwvc3Bhbj48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtaW5saW5lLWl0ZW1cIiB2LWItdG9vbHRpcC5ob3ZlciB0aXRsZT1cIkNTUzNcIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJza2lsbHMtaWNvbiBpY29uLWNzczNcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWlubGluZS1pdGVtXCIgdi1iLXRvb2x0aXAuaG92ZXIgdGl0bGU9XCJKYXZhU2NyaXB0XCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1qYXZhc2NyaXB0XCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwialF1ZXJ5XCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1qcXVlcnlcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWlubGluZS1pdGVtXCIgdi1iLXRvb2x0aXAuaG92ZXIgdGl0bGU9XCJKU09OXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1qc29uXCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiUEhQXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1waHBcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWlubGluZS1pdGVtXCIgdi1iLXRvb2x0aXAuaG92ZXIgdGl0bGU9XCJNeVNRTFwiPjxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInNraWxscy1pY29uIGljb24tbXlzcWxcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWlubGluZS1pdGVtXCIgdi1iLXRvb2x0aXAuaG92ZXIgdGl0bGU9XCJTQVNTXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1zYXNzXCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN1YmhlYWRpbmcgbWItMyAtLWJlYmFzXCIgdi1sYW5nPVwiJ3NraWxscy50b29scydcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3QtaW5saW5lIGxpc3QtaWNvbnNcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWlubGluZS1pdGVtXCIgdi1iLXRvb2x0aXAuaG92ZXIgdGl0bGU9XCJucG1cIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJza2lsbHMtaWNvbiBpY29uLW5wbVwiPjwvc3Bhbj48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtaW5saW5lLWl0ZW1cIiB2LWItdG9vbHRpcC5ob3ZlciB0aXRsZT1cIkd1bHBcIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJza2lsbHMtaWNvbiBpY29uLWd1bHBcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWlubGluZS1pdGVtXCIgdi1iLXRvb2x0aXAuaG92ZXIgdGl0bGU9XCJXZWJwYWNrXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi13ZWJwYWNrXCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiR2l0XCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1naXRcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWlubGluZS1pdGVtXCIgdi1iLXRvb2x0aXAuaG92ZXIgdGl0bGU9XCJTdWJ2ZXJzaW9uXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1zdWJ2ZXJzaW9uXCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiV2ViU3Rvcm1cIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJza2lsbHMtaWNvbiBpY29uLXdlYnN0b3JtXCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiU3VibGltZXRleHRcIj48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJza2lsbHMtaWNvbiBpY29uLXN1YmxpbWV0ZXh0XCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiUGhvdG9zaG9wXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1hZG9iZXBob3Rvc2hvcFwiPjwvc3Bhbj48L2xpPlxyXG5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3ViaGVhZGluZyBtYi0zIC0tYmViYXNcIiB2LWxhbmc9XCInc2tpbGxzLmZyYW1ld29ya3MnXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJsaXN0LWlubGluZSBsaXN0LWljb25zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiVnVlLmpzXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi12dWVqc1wiPjwvc3Bhbj48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtaW5saW5lLWl0ZW1cIiB2LWItdG9vbHRpcC5ob3ZlciB0aXRsZT1cIkJvb3RzdHJhcFwiPjxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInNraWxscy1pY29uIGljb24tYm9vdHN0cmFwXCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiSm9vbWxhXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1qb29tbGFcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWlubGluZS1pdGVtXCIgdi1iLXRvb2x0aXAuaG92ZXIgdGl0bGU9XCJMYXJhdmVsXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi1sYXJhdmVsXCI+PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiIHYtYi10b29sdGlwLmhvdmVyIHRpdGxlPVwiV29yZFByZXNzXCI+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2tpbGxzLWljb24gaWNvbi13b3JkcHJlc3NcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3ViaGVhZGluZyBtYi0zIC0tYmViYXNcIiB2LWxhbmc9XCInc2tpbGxzLndvcmtmbG93J1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibGlzdCBteS1jaGVjay1saXN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pdGVtXCI+PGkgY2xhc3M9XCJteS1jaGVjay1pY29uIGljb24tY2hlY2sgbXItMlwiPjwvaT48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1sYW5nPVwiJ3NraWxscy5maXJzdCdcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWl0ZW1cIj48aSBjbGFzcz1cIm15LWNoZWNrLWljb24gaWNvbi1jaGVjayBtci0yXCI+PC9pPjxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWxhbmc9XCInc2tpbGxzLnNlY29uZCdcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWl0ZW1cIj48aSBjbGFzcz1cIm15LWNoZWNrLWljb24gaWNvbi1jaGVjayBtci0yXCI+PC9pPjxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWxhbmc9XCInc2tpbGxzLnRoaXJkJ1wiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtaXRlbVwiPjxpIGNsYXNzPVwibXktY2hlY2staWNvbiBpY29uLWNoZWNrIG1yLTJcIj48L2k+PHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbGFuZz1cIidza2lsbHMuZm91cidcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWl0ZW1cIj48aSBjbGFzcz1cIm15LWNoZWNrLWljb24gaWNvbi1jaGVjayBtci0yXCI+PC9pPjxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWxhbmc9XCInc2tpbGxzLmZpdmUnXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pdGVtXCI+PGkgY2xhc3M9XCJteS1jaGVjay1pY29uIGljb24tY2hlY2sgbXItMlwiPjwvaT48c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1sYW5nPVwiJ3NraWxscy5zaXgnXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOiBcIm0tc2tpbGxzXCJcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cclxuICAgIEBpbXBvcnQgXCIuLi9zY3NzL21haW5cIjtcclxuXHJcbiAgICAubXktY2hlY2stbGlzdCB7XHJcbiAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XHJcblxyXG4gICAgICAgIC5saXN0LWl0ZW0ge1xyXG4gICAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuMzVyZW07XHJcbiAgICAgICAgICAgIGNvbG9yOiAkZ3JheS1yZWd1bGFyO1xyXG5cclxuICAgICAgICAgICAgLm15LWNoZWNrLWljb24ge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICRibHVlLXJlZ3VsYXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3Bhbi5za2lsbHMtaWNvbiB7XHJcbiAgICAgICAgZm9udC1zaXplOiAycmVtO1xyXG4gICAgICAgIGNvbG9yOiAkYmx1ZS1yZWd1bGFyO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkYmx1ZS1kYXJrbmVzcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+Il0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmNISnZZMlZ6Y3k5aWNtOTNjMlZ5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDNaMVpTOWthWE4wTDNaMVpTNXlkVzUwYVcxbExtTnZiVzF2Ymk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5MmRXVnBabmt2YkdsaUwybHVjMlZ5ZEMxamMzTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZkblZsYVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTkyZFdVdGFHOTBMWEpsYkc5aFpDMWhjR2t2WkdsemRDOXBibVJsZUM1cWN5SXNJbk55WTF4Y2FuTmNYR0Z3Y0M1cWN5SXNJbk55WTF4Y2FuTmNYR3hoYm1jdWFuTWlMQ0p6Y21OY1hIWjFaVnhjYlMxaFltOTFkQzUyZFdVL05UTTVZelZtTWpRaUxDSnpjbU5jWEhaMVpWeGNiUzFoY0d4cFkyRjBhVzl1TG5aMVpUOHpNemswTW1RNU1pSXNJbk55WTF4Y2RuVmxYRnh0TFdObGNuUnBabWxqWVhScGIyNXpMbloxWlQ4d1ptVXhOVFE0WXlJc0luTnlZMXhjZG5WbFhGeHRMV052Ym5SbGJuUXVkblZsUHpobVlqWXpaRE0wSWl3aWMzSmpYRngyZFdWY1hHMHRaV1IxWTJGMGFXOXVMbloxWlQ5bFpESXdaVGt3WVNJc0luTnlZMXhjZG5WbFhGeHRMV1Y0Y0dWeWFXVnVZMlV1ZG5WbFB6RmtPRGxsTVRoaklpd2ljM0pqWEZ4MmRXVmNYRzB0YVc1MFpYSmxjM1J6TG5aMVpUOHpOakV6TmpWbFpTSXNJbk55WTF4Y2RuVmxYRnh0TFhOcmFXeHNjeTUyZFdVL01UaGhaR0kwTm1VaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVU40VEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVTnVkbEJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOMlFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU5zVDBFN096czdRVUZEUVRzN096czdPMEZCU0VFc1NVRkJTU3hOUVVGS0xFTkJRVmNzVVVGQldDeEhRVUZ6UWl4SlFVRjBRanM3UVVGTFFTeEpRVUZKTEU5QlFVOHNiMEpCUVZnN08wRkJSVUVzVDBGQlR5eFJRVUZRTEVOQlFXZENMRXRCUVdoQ0xFZEJRWGRDTEV0QlFVc3NVMEZCVEN4RFFVRmxMRTlCUVdZc1EwRkJlRUk3TzBGQlJVRXNTVUZCU1N4VFFVRktMRU5CUVdNc1RVRkJaQ3hGUVVGelFqdEJRVU5zUWl4alFVRlZMR3RDUVVGVkxFVkJRVllzUlVGQll5eFBRVUZrTEVWQlFYVkNPMEZCUXpkQ0xGZEJRVWNzVTBGQlNDeEhRVUZsTEV0QlFVc3NVMEZCVEN4RFFVRmxMRkZCUVZFc1MwRkJka0lzUTBGQlpqdEJRVU5JTzBGQlNHbENMRU5CUVhSQ08wRkJTMEVzU1VGQlNTeFRRVUZLTEVOQlFXTXNaVUZCWkN4RlFVRXJRanRCUVVNelFpeGpRVUZWTEd0Q1FVRlZMRVZCUVZZc1JVRkJZeXhQUVVGa0xFVkJRWFZDTzBGQlF6ZENMRmRCUVVjc1VVRkJTQ3hEUVVGWkxFTkJRVm9zUlVGQlpTeFRRVUZtTEVkQlFUSkNMRXRCUVVzc1UwRkJUQ3hEUVVGbExGRkJRVkVzUzBGQmRrSXNRMEZCTTBJN1FVRkRTRHRCUVVnd1FpeERRVUV2UWpzN1FVRk5RU3hKUVVGSkxFZEJRVW9zUTBGQlVUdEJRVU5LTEZGQlFVa3NUVUZFUVR0QlFVVktMR2RDUVVGWkxFVkJRVU1zYlVOQlFVUTdRVUZHVWl4RFFVRlNPenM3T3pzN096czdPenM3TzBsRGNFSnhRaXhKTzBGQlJXcENMRzlDUVVGak8wRkJRVUU3TzBGQlExWXNZVUZCU3l4UlFVRk1MRWRCUVdkQ0xFTkJRVU1zVlVGQlZTeFJRVUZXTEVsQlFYTkNMRlZCUVZVc1dVRkJha01zUlVGQkswTXNTMEZCTDBNc1EwRkJjVVFzUjBGQmNrUXNSVUZCTUVRc1EwRkJNVVFzUTBGQmFFSTdRVUZEUVN4aFFVRkxMRTlCUVV3c1IwRkJaU3hGUVVGbU8wRkJRMEVzWVVGQlN5eFZRVUZNTEVkQlFXdENMRXRCUVVzc1NVRkJUQ3hEUVVGVkxFdEJRVXNzVDBGQlRDeEpRVUZuUWl4TFFVRkxMRkZCUVM5Q0xFTkJRV3hDTzBGQlEwZzdPenM3YTBOQlJWTXNSeXhGUVVGTE8wRkJRMWdzYlVKQlFVOHNSVUZCUlN4SFFVRkdMRU5CUVUwc1MwRkJTeXhWUVVGWUxFVkJRWFZDTEVkQlFYWkNMRVZCUVRSQ0xGbEJRVFZDTEVOQlFWQTdRVUZEU0RzN096WkNRVVZYTEVrc1JVRkJUU3hKTEVWQlFVMDdRVUZEY0VJc1owSkJRVWtzWVVGQllTeEpRVUZxUWp0QlFVTkJMR05CUVVVc1NVRkJSaXhEUVVGUE8wRkJRMGdzY1VKQlFVc3NWMEZCVnl4SlFVRllMRWRCUVd0Q0xFOUJSSEJDTzBGQlJVZ3NNRUpCUVZVc1RVRkdVRHRCUVVkSUxIVkNRVUZQTEV0QlNFbzdRVUZKU0N4NVFrRkJVeXhwUWtGQlZTeEpRVUZXTEVWQlFXZENPMEZCUTNKQ0xHbERRVUZoTEVsQlFXSTdRVUZEU0N4cFFrRk9SVHRCUVU5SUxIVkNRVUZQTEdsQ1FVRlpMRU5CUTJ4Q08wRkJVa1VzWVVGQlVEdEJRVlZCTEcxQ1FVRlJMR05CUVdNc1NVRkJaQ3hKUVVGelFpeERRVUZETEVsQlFYaENMRWRCUVdkRExFdEJRVXNzU1VGQlRDeERRVUZWTEVsQlFWWXNRMEZCYUVNc1IwRkJhMFFzVlVGQmVrUTdRVUZEU0RzN096czdPMnRDUVhwQ1owSXNTVHM3T3pzN096czdPenM3TzFWRE1rTnlRaXhCUVVOQk96czdPenM3T3p0QlFUVkRRVHM3TzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdNRUpETUVKQk96czdPenM3T3pzN2RVTkJSMEU3VlVGRVFTeEJRVVZCT3pzN096czdPenRCUVRsQ1FUczdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzFWRGMwSkJMRUZCUTBFN096czdPenM3TzBGQmRrSkJPenM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN01FSkRkMEpCT3pzN095dENRVU5CT3pzN096aENRVU5CT3pzN096SkNRVU5CT3pzN096aENRVU5CT3pzN08yMURRVU5CT3pzN096czdPenM3T3l0RFFVbEJPM0ZEUVVOQk95dENRVU5CTzNWRFFVTkJPelpDUVVOQk8zRkRRVXhCTEVGQlRVRTdRVUZPUVR0alFVUkJMRUZCVTBFN096czdPenM3TzBGQmVFTkJPenM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1ZVTjVRa0VzUVVGRFFUczdPenM3T3pzN1FVRXhRa0U3T3p0QlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dFZRM0ZEUVN4QlFVTkJPenM3T3pzN096dEJRWFJEUVRzN08wRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMVZEV1VFc1FVRkRRVHM3T3pzN096czdRVUZpUVRzN08wRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMVZEYjBaQkxFRkJRMEU3T3pzN096czdPMEZCY2taQk96czdRVUZCUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVJR1VvZEN4dUxISXBlMloxYm1OMGFXOXVJSE1vYnl4MUtYdHBaaWdoYmx0dlhTbDdhV1lvSVhSYmIxMHBlM1poY2lCaFBYUjVjR1Z2WmlCeVpYRjFhWEpsUFQxY0ltWjFibU4wYVc5dVhDSW1KbkpsY1hWcGNtVTdhV1lvSVhVbUptRXBjbVYwZFhKdUlHRW9ieXdoTUNrN2FXWW9hU2x5WlhSMWNtNGdhU2h2TENFd0tUdDJZWElnWmoxdVpYY2dSWEp5YjNJb1hDSkRZVzV1YjNRZ1ptbHVaQ0J0YjJSMWJHVWdKMXdpSzI4clhDSW5YQ0lwTzNSb2NtOTNJR1l1WTI5a1pUMWNJazFQUkZWTVJWOU9UMVJmUms5VlRrUmNJaXhtZlhaaGNpQnNQVzViYjEwOWUyVjRjRzl5ZEhNNmUzMTlPM1JiYjExYk1GMHVZMkZzYkNoc0xtVjRjRzl5ZEhNc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUc0OWRGdHZYVnN4WFZ0bFhUdHlaWFIxY200Z2N5aHVQMjQ2WlNsOUxHd3NiQzVsZUhCdmNuUnpMR1VzZEN4dUxISXBmWEpsZEhWeWJpQnVXMjlkTG1WNGNHOXlkSE45ZG1GeUlHazlkSGx3Wlc5bUlISmxjWFZwY21VOVBWd2lablZ1WTNScGIyNWNJaVltY21WeGRXbHlaVHRtYjNJb2RtRnlJRzg5TUR0dlBISXViR1Z1WjNSb08yOHJLeWx6S0hKYmIxMHBPM0psZEhWeWJpQnpmU2tpTENJdkx5QnphR2x0SUdadmNpQjFjMmx1WnlCd2NtOWpaWE56SUdsdUlHSnliM2R6WlhKY2JuWmhjaUJ3Y205alpYTnpJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3ZlR0Y2JseHVMeThnWTJGamFHVmtJR1p5YjIwZ2QyaGhkR1YyWlhJZ1oyeHZZbUZzSUdseklIQnlaWE5sYm5RZ2MyOGdkR2hoZENCMFpYTjBJSEoxYm01bGNuTWdkR2hoZENCemRIVmlJR2wwWEc0dkx5QmtiMjRuZENCaWNtVmhheUIwYUdsdVozTXVJQ0JDZFhRZ2QyVWdibVZsWkNCMGJ5QjNjbUZ3SUdsMElHbHVJR0VnZEhKNUlHTmhkR05vSUdsdUlHTmhjMlVnYVhRZ2FYTmNiaTh2SUhkeVlYQndaV1FnYVc0Z2MzUnlhV04wSUcxdlpHVWdZMjlrWlNCM2FHbGphQ0JrYjJWemJpZDBJR1JsWm1sdVpTQmhibmtnWjJ4dlltRnNjeTRnSUVsMEozTWdhVzV6YVdSbElHRmNiaTh2SUdaMWJtTjBhVzl1SUdKbFkyRjFjMlVnZEhKNUwyTmhkR05vWlhNZ1pHVnZjSFJwYldsNlpTQnBiaUJqWlhKMFlXbHVJR1Z1WjJsdVpYTXVYRzVjYm5aaGNpQmpZV05vWldSVFpYUlVhVzFsYjNWME8xeHVkbUZ5SUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZER0Y2JseHVablZ1WTNScGIyNGdaR1ZtWVhWc2RGTmxkRlJwYlc5MWRDZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozTmxkRlJwYldWdmRYUWdhR0Z6SUc1dmRDQmlaV1Z1SUdSbFptbHVaV1FuS1R0Y2JuMWNibVoxYm1OMGFXOXVJR1JsWm1GMWJIUkRiR1ZoY2xScGJXVnZkWFFnS0NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWTJ4bFlYSlVhVzFsYjNWMElHaGhjeUJ1YjNRZ1ltVmxiaUJrWldacGJtVmtKeWs3WEc1OVhHNG9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMlYwVkdsdFpXOTFkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ1pHVm1ZWFZzZEZObGRGUnBiVzkxZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUTdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTJ4bFlYSlVhVzFsYjNWMElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFNCamJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lIMWNibjBnS0NrcFhHNW1kVzVqZEdsdmJpQnlkVzVVYVcxbGIzVjBLR1oxYmlrZ2UxeHVJQ0FnSUdsbUlDaGpZV05vWldSVFpYUlVhVzFsYjNWMElEMDlQU0J6WlhSVWFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZibTl5YldGc0lHVnVkbWx5YjIxbGJuUnpJR2x1SUhOaGJtVWdjMmwwZFdGMGFXOXVjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2htZFc0c0lEQXBPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QnBaaUJ6WlhSVWFXMWxiM1YwSUhkaGMyNG5kQ0JoZG1GcGJHRmliR1VnWW5WMElIZGhjeUJzWVhSMFpYSWdaR1ZtYVc1bFpGeHVJQ0FnSUdsbUlDZ29ZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlQVDBnWkdWbVlYVnNkRk5sZEZScGJXOTFkQ0I4ZkNBaFkyRmphR1ZrVTJWMFZHbHRaVzkxZENrZ0ppWWdjMlYwVkdsdFpXOTFkQ2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9ablZ1TENBd0tUdGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdMeThnZDJobGJpQjNhR1Z1SUhOdmJXVmliMlI1SUdoaGN5QnpZM0psZDJWa0lIZHBkR2dnYzJWMFZHbHRaVzkxZENCaWRYUWdibThnU1M1RkxpQnRZV1JrYm1WemMxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrVTJWMFZHbHRaVzkxZENobWRXNHNJREFwTzF4dUlDQWdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhhR1Z1SUhkbElHRnlaU0JwYmlCSkxrVXVJR0oxZENCMGFHVWdjMk55YVhCMElHaGhjeUJpWldWdUlHVjJZV3hsWkNCemJ5QkpMa1V1SUdSdlpYTnVKM1FnZEhKMWMzUWdkR2hsSUdkc2IySmhiQ0J2WW1wbFkzUWdkMmhsYmlCallXeHNaV1FnYm05eWJXRnNiSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwTG1OaGJHd29iblZzYkN3Z1puVnVMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmhiV1VnWVhNZ1lXSnZkbVVnWW5WMElIZG9aVzRnYVhRbmN5QmhJSFpsY25OcGIyNGdiMllnU1M1RkxpQjBhR0YwSUcxMWMzUWdhR0YyWlNCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCbWIzSWdKM1JvYVhNbkxDQm9iM0JtZFd4c2VTQnZkWElnWTI5dWRHVjRkQ0JqYjNKeVpXTjBJRzkwYUdWeWQybHpaU0JwZENCM2FXeHNJSFJvY205M0lHRWdaMnh2WW1Gc0lHVnljbTl5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrVTJWMFZHbHRaVzkxZEM1allXeHNLSFJvYVhNc0lHWjFiaXdnTUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNibHh1ZlZ4dVpuVnVZM1JwYjI0Z2NuVnVRMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWtnZTF4dUlDQWdJR2xtSUNoallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJR05zWldGeVZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMMjV2Y20xaGJDQmxiblpwY205dFpXNTBjeUJwYmlCellXNWxJSE5wZEhWaGRHbHZibk5jYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05zWldGeVZHbHRaVzkxZENodFlYSnJaWElwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJwWmlCamJHVmhjbFJwYldWdmRYUWdkMkZ6YmlkMElHRjJZV2xzWVdKc1pTQmlkWFFnZDJGeklHeGhkSFJsY2lCa1pXWnBibVZrWEc0Z0lDQWdhV1lnS0NoallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJR1JsWm1GMWJIUkRiR1ZoY2xScGJXVnZkWFFnZkh3Z0lXTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDa2dKaVlnWTJ4bFlYSlVhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5SUdOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTnNaV0Z5VkdsdFpXOTFkQ2h0WVhKclpYSXBPMXh1SUNBZ0lIMWNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0F2THlCM2FHVnVJSGRvWlc0Z2MyOXRaV0p2WkhrZ2FHRnpJSE5qY21WM1pXUWdkMmwwYUNCelpYUlVhVzFsYjNWMElHSjFkQ0J1YnlCSkxrVXVJRzFoWkdSdVpYTnpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUW9iV0Z5YTJWeUtUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtYdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkb1pXNGdkMlVnWVhKbElHbHVJRWt1UlM0Z1luVjBJSFJvWlNCelkzSnBjSFFnYUdGeklHSmxaVzRnWlhaaGJHVmtJSE52SUVrdVJTNGdaRzlsYzI0bmRDQWdkSEoxYzNRZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ2QyaGxiaUJqWVd4c1pXUWdibTl5YldGc2JIbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFF1WTJGc2JDaHVkV3hzTENCdFlYSnJaWElwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmhiV1VnWVhNZ1lXSnZkbVVnWW5WMElIZG9aVzRnYVhRbmN5QmhJSFpsY25OcGIyNGdiMllnU1M1RkxpQjBhR0YwSUcxMWMzUWdhR0YyWlNCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCbWIzSWdKM1JvYVhNbkxDQm9iM0JtZFd4c2VTQnZkWElnWTI5dWRHVjRkQ0JqYjNKeVpXTjBJRzkwYUdWeWQybHpaU0JwZENCM2FXeHNJSFJvY205M0lHRWdaMnh2WW1Gc0lHVnljbTl5TGx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVTI5dFpTQjJaWEp6YVc5dWN5QnZaaUJKTGtVdUlHaGhkbVVnWkdsbVptVnlaVzUwSUhKMWJHVnpJR1p2Y2lCamJHVmhjbFJwYldWdmRYUWdkbk1nYzJWMFZHbHRaVzkxZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDNWpZV3hzS0hSb2FYTXNJRzFoY210bGNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmx4dVhHNTlYRzUyWVhJZ2NYVmxkV1VnUFNCYlhUdGNiblpoY2lCa2NtRnBibWx1WnlBOUlHWmhiSE5sTzF4dWRtRnlJR04xY25KbGJuUlJkV1YxWlR0Y2JuWmhjaUJ4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzVjYm1aMWJtTjBhVzl1SUdOc1pXRnVWWEJPWlhoMFZHbGpheWdwSUh0Y2JpQWdJQ0JwWmlBb0lXUnlZV2x1YVc1bklIeDhJQ0ZqZFhKeVpXNTBVWFZsZFdVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0JrY21GcGJtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBVWFZsZFdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lIRjFaWFZsSUQwZ1kzVnljbVZ1ZEZGMVpYVmxMbU52Ym1OaGRDaHhkV1YxWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY1hWbGRXVkpibVJsZUNBOUlDMHhPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jWFZsZFdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lHUnlZV2x1VVhWbGRXVW9LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUnlZV2x1VVhWbGRXVW9LU0I3WEc0Z0lDQWdhV1lnS0dSeVlXbHVhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUhScGJXVnZkWFFnUFNCeWRXNVVhVzFsYjNWMEtHTnNaV0Z1VlhCT1pYaDBWR2xqYXlrN1hHNGdJQ0FnWkhKaGFXNXBibWNnUFNCMGNuVmxPMXh1WEc0Z0lDQWdkbUZ5SUd4bGJpQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdJQ0IzYUdsc1pTaHNaVzRwSUh0Y2JpQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZGMVpYVmxJRDBnY1hWbGRXVTdYRzRnSUNBZ0lDQWdJSEYxWlhWbElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2dySzNGMVpYVmxTVzVrWlhnZ1BDQnNaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamRYSnlaVzUwVVhWbGRXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBVWFZsZFdWYmNYVmxkV1ZKYm1SbGVGMHVjblZ1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NYVmxkV1ZKYm1SbGVDQTlJQzB4TzF4dUlDQWdJQ0FnSUNCc1pXNGdQU0J4ZFdWMVpTNXNaVzVuZEdnN1hHNGdJQ0FnZlZ4dUlDQWdJR04xY25KbGJuUlJkV1YxWlNBOUlHNTFiR3c3WEc0Z0lDQWdaSEpoYVc1cGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCeWRXNURiR1ZoY2xScGJXVnZkWFFvZEdsdFpXOTFkQ2s3WEc1OVhHNWNibkJ5YjJObGMzTXVibVY0ZEZScFkyc2dQU0JtZFc1amRHbHZiaUFvWm5WdUtTQjdYRzRnSUNBZ2RtRnlJR0Z5WjNNZ1BTQnVaWGNnUVhKeVlYa29ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQXRJREVwTzF4dUlDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Uc2dhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSm5jMXRwSUMwZ01WMGdQU0JoY21kMWJXVnVkSE5iYVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY1hWbGRXVXVjSFZ6YUNodVpYY2dTWFJsYlNobWRXNHNJR0Z5WjNNcEtUdGNiaUFnSUNCcFppQW9jWFZsZFdVdWJHVnVaM1JvSUQwOVBTQXhJQ1ltSUNGa2NtRnBibWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnlkVzVVYVcxbGIzVjBLR1J5WVdsdVVYVmxkV1VwTzF4dUlDQWdJSDFjYm4wN1hHNWNiaTh2SUhZNElHeHBhMlZ6SUhCeVpXUnBZM1JwWW14bElHOWlhbVZqZEhOY2JtWjFibU4wYVc5dUlFbDBaVzBvWm5WdUxDQmhjbkpoZVNrZ2UxeHVJQ0FnSUhSb2FYTXVablZ1SUQwZ1puVnVPMXh1SUNBZ0lIUm9hWE11WVhKeVlYa2dQU0JoY25KaGVUdGNibjFjYmtsMFpXMHVjSEp2ZEc5MGVYQmxMbkoxYmlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjBhR2x6TG1aMWJpNWhjSEJzZVNodWRXeHNMQ0IwYUdsekxtRnljbUY1S1R0Y2JuMDdYRzV3Y205alpYTnpMblJwZEd4bElEMGdKMkp5YjNkelpYSW5PMXh1Y0hKdlkyVnpjeTVpY205M2MyVnlJRDBnZEhKMVpUdGNibkJ5YjJObGMzTXVaVzUySUQwZ2UzMDdYRzV3Y205alpYTnpMbUZ5WjNZZ1BTQmJYVHRjYm5CeWIyTmxjM011ZG1WeWMybHZiaUE5SUNjbk95QXZMeUJsYlhCMGVTQnpkSEpwYm1jZ2RHOGdZWFp2YVdRZ2NtVm5aWGh3SUdsemMzVmxjMXh1Y0hKdlkyVnpjeTUyWlhKemFXOXVjeUE5SUh0OU8xeHVYRzVtZFc1amRHbHZiaUJ1YjI5d0tDa2dlMzFjYmx4dWNISnZZMlZ6Y3k1dmJpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtRmtaRXhwYzNSbGJtVnlJRDBnYm05dmNEdGNibkJ5YjJObGMzTXViMjVqWlNBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG05bVppQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuSmxiVzkyWlV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011Y21WdGIzWmxRV3hzVEdsemRHVnVaWEp6SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011WlcxcGRDQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuQnlaWEJsYm1STWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG5CeVpYQmxibVJQYm1ObFRHbHpkR1Z1WlhJZ1BTQnViMjl3TzF4dVhHNXdjbTlqWlhOekxteHBjM1JsYm1WeWN5QTlJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdJSEpsZEhWeWJpQmJYU0I5WEc1Y2JuQnliMk5sYzNNdVltbHVaR2x1WnlBOUlHWjFibU4wYVc5dUlDaHVZVzFsS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R3Y205alpYTnpMbUpwYm1ScGJtY2dhWE1nYm05MElITjFjSEJ2Y25SbFpDY3BPMXh1ZlR0Y2JseHVjSEp2WTJWemN5NWpkMlFnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQW5MeWNnZlR0Y2JuQnliMk5sYzNNdVkyaGthWElnUFNCbWRXNWpkR2x2YmlBb1pHbHlLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHdjbTlqWlhOekxtTm9aR2x5SUdseklHNXZkQ0J6ZFhCd2IzSjBaV1FuS1R0Y2JuMDdYRzV3Y205alpYTnpMblZ0WVhOcklEMGdablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUF3T3lCOU8xeHVJaXdpTHlvaFhHNGdLaUJXZFdVdWFuTWdkakl1TlM0eE0xeHVJQ29nS0dNcElESXdNVFF0TWpBeE55QkZkbUZ1SUZsdmRWeHVJQ29nVW1Wc1pXRnpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVJQ292WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYmk4cUlDQXFMMXh1WEc1MllYSWdaVzF3ZEhsUFltcGxZM1FnUFNCUFltcGxZM1F1Wm5KbFpYcGxLSHQ5S1R0Y2JseHVMeThnZEdobGMyVWdhR1ZzY0dWeWN5QndjbTlrZFdObGN5QmlaWFIwWlhJZ2RtMGdZMjlrWlNCcGJpQktVeUJsYm1kcGJtVnpJR1IxWlNCMGJ5QjBhR1ZwY2x4dUx5OGdaWGh3YkdsamFYUnVaWE56SUdGdVpDQm1kVzVqZEdsdmJpQnBibXhwYm1sdVoxeHVablZ1WTNScGIyNGdhWE5WYm1SbFppQW9kaWtnZTF4dUlDQnlaWFIxY200Z2RpQTlQVDBnZFc1a1pXWnBibVZrSUh4OElIWWdQVDA5SUc1MWJHeGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTkVaV1lnS0hZcElIdGNiaUFnY21WMGRYSnVJSFlnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIySUNFOVBTQnVkV3hzWEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6VkhKMVpTQW9kaWtnZTF4dUlDQnlaWFIxY200Z2RpQTlQVDBnZEhKMVpWeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwWmhiSE5sSUNoMktTQjdYRzRnSUhKbGRIVnliaUIySUQwOVBTQm1ZV3h6WlZ4dWZWeHVYRzR2S2lwY2JpQXFJRU5vWldOcklHbG1JSFpoYkhWbElHbHpJSEJ5YVcxcGRHbDJaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMUJ5YVcxcGRHbDJaU0FvZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0IwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2R6ZEhKcGJtY25JSHg4WEc0Z0lDQWdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5iblZ0WW1WeUp5QjhmRnh1SUNBZ0lDOHZJQ1JtYkc5M0xXUnBjMkZpYkdVdGJHbHVaVnh1SUNBZ0lIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0ozTjViV0p2YkNjZ2ZIeGNiaUFnSUNCMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkaWIyOXNaV0Z1SjF4dUlDQXBYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VYVnBZMnNnYjJKcVpXTjBJR05vWldOcklDMGdkR2hwY3lCcGN5QndjbWx0WVhKcGJIa2dkWE5sWkNCMGJ5QjBaV3hzWEc0Z0tpQlBZbXBsWTNSeklHWnliMjBnY0hKcGJXbDBhWFpsSUhaaGJIVmxjeUIzYUdWdUlIZGxJR3R1YjNjZ2RHaGxJSFpoYkhWbFhHNGdLaUJwY3lCaElFcFRUMDR0WTI5dGNHeHBZVzUwSUhSNWNHVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpUMkpxWldOMElDaHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlHOWlhaUFoUFQwZ2JuVnNiQ0FtSmlCMGVYQmxiMllnYjJKcUlEMDlQU0FuYjJKcVpXTjBKMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFZGxkQ0IwYUdVZ2NtRjNJSFI1Y0dVZ2MzUnlhVzVuSUc5bUlHRWdkbUZzZFdVZ1pTNW5MaUJiYjJKcVpXTjBJRTlpYW1WamRGMWNiaUFxTDF4dWRtRnlJRjkwYjFOMGNtbHVaeUE5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWM3WEc1Y2JtWjFibU4wYVc5dUlIUnZVbUYzVkhsd1pTQW9kbUZzZFdVcElIdGNiaUFnY21WMGRYSnVJRjkwYjFOMGNtbHVaeTVqWVd4c0tIWmhiSFZsS1M1emJHbGpaU2c0TENBdE1TbGNibjFjYmx4dUx5b3FYRzRnS2lCVGRISnBZM1FnYjJKcVpXTjBJSFI1Y0dVZ1kyaGxZMnN1SUU5dWJIa2djbVYwZFhKdWN5QjBjblZsWEc0Z0tpQm1iM0lnY0d4aGFXNGdTbUYyWVZOamNtbHdkQ0J2WW1wbFkzUnpMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMUJzWVdsdVQySnFaV04wSUNodlltb3BJSHRjYmlBZ2NtVjBkWEp1SUY5MGIxTjBjbWx1Wnk1allXeHNLRzlpYWlrZ1BUMDlJQ2RiYjJKcVpXTjBJRTlpYW1WamRGMG5YRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpVbVZuUlhod0lDaDJLU0I3WEc0Z0lISmxkSFZ5YmlCZmRHOVRkSEpwYm1jdVkyRnNiQ2gyS1NBOVBUMGdKMXR2WW1wbFkzUWdVbVZuUlhod1hTZGNibjFjYmx4dUx5b3FYRzRnS2lCRGFHVmpheUJwWmlCMllXd2dhWE1nWVNCMllXeHBaQ0JoY25KaGVTQnBibVJsZUM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOV1lXeHBaRUZ5Y21GNVNXNWtaWGdnS0haaGJDa2dlMXh1SUNCMllYSWdiaUE5SUhCaGNuTmxSbXh2WVhRb1UzUnlhVzVuS0haaGJDa3BPMXh1SUNCeVpYUjFjbTRnYmlBK1BTQXdJQ1ltSUUxaGRHZ3VabXh2YjNJb2Jpa2dQVDA5SUc0Z0ppWWdhWE5HYVc1cGRHVW9kbUZzS1Z4dWZWeHVYRzR2S2lwY2JpQXFJRU52Ym5abGNuUWdZU0IyWVd4MVpTQjBieUJoSUhOMGNtbHVaeUIwYUdGMElHbHpJR0ZqZEhWaGJHeDVJSEpsYm1SbGNtVmtMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQjBiMU4wY21sdVp5QW9kbUZzS1NCN1hHNGdJSEpsZEhWeWJpQjJZV3dnUFQwZ2JuVnNiRnh1SUNBZ0lEOGdKeWRjYmlBZ0lDQTZJSFI1Y0dWdlppQjJZV3dnUFQwOUlDZHZZbXBsWTNRblhHNGdJQ0FnSUNBL0lFcFRUMDR1YzNSeWFXNW5hV1o1S0haaGJDd2diblZzYkN3Z01pbGNiaUFnSUNBZ0lEb2dVM1J5YVc1bktIWmhiQ2xjYm4xY2JseHVMeW9xWEc0Z0tpQkRiMjUyWlhKMElHRWdhVzV3ZFhRZ2RtRnNkV1VnZEc4Z1lTQnVkVzFpWlhJZ1ptOXlJSEJsY25OcGMzUmxibU5sTGx4dUlDb2dTV1lnZEdobElHTnZiblpsY25OcGIyNGdabUZwYkhNc0lISmxkSFZ5YmlCdmNtbG5hVzVoYkNCemRISnBibWN1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJ2VG5WdFltVnlJQ2gyWVd3cElIdGNiaUFnZG1GeUlHNGdQU0J3WVhKelpVWnNiMkYwS0haaGJDazdYRzRnSUhKbGRIVnliaUJwYzA1aFRpaHVLU0EvSUhaaGJDQTZJRzVjYm4xY2JseHVMeW9xWEc0Z0tpQk5ZV3RsSUdFZ2JXRndJR0Z1WkNCeVpYUjFjbTRnWVNCbWRXNWpkR2x2YmlCbWIzSWdZMmhsWTJ0cGJtY2dhV1lnWVNCclpYbGNiaUFxSUdseklHbHVJSFJvWVhRZ2JXRndMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnRZV3RsVFdGd0lDaGNiaUFnYzNSeUxGeHVJQ0JsZUhCbFkzUnpURzkzWlhKRFlYTmxYRzRwSUh0Y2JpQWdkbUZ5SUcxaGNDQTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lIWmhjaUJzYVhOMElEMGdjM1J5TG5Od2JHbDBLQ2NzSnlrN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdsemRDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJRzFoY0Z0c2FYTjBXMmxkWFNBOUlIUnlkV1U3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1Y0Y0dWamRITk1iM2RsY2tOaGMyVmNiaUFnSUNBL0lHWjFibU4wYVc5dUlDaDJZV3dwSUhzZ2NtVjBkWEp1SUcxaGNGdDJZV3d1ZEc5TWIzZGxja05oYzJVb0tWMDdJSDFjYmlBZ0lDQTZJR1oxYm1OMGFXOXVJQ2gyWVd3cElIc2djbVYwZFhKdUlHMWhjRnQyWVd4ZE95QjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnNnYVdZZ1lTQjBZV2NnYVhNZ1lTQmlkV2xzZEMxcGJpQjBZV2N1WEc0Z0tpOWNiblpoY2lCcGMwSjFhV3gwU1c1VVlXY2dQU0J0WVd0bFRXRndLQ2R6Ykc5MExHTnZiWEJ2Ym1WdWRDY3NJSFJ5ZFdVcE8xeHVYRzR2S2lwY2JpQXFJRU5vWldOcklHbG1JR0VnWVhSMGNtbGlkWFJsSUdseklHRWdjbVZ6WlhKMlpXUWdZWFIwY21saWRYUmxMbHh1SUNvdlhHNTJZWElnYVhOU1pYTmxjblpsWkVGMGRISnBZblYwWlNBOUlHMWhhMlZOWVhBb0oydGxlU3h5WldZc2MyeHZkQ3h6Ykc5MExYTmpiM0JsTEdsekp5azdYRzVjYmk4cUtseHVJQ29nVW1WdGIzWmxJR0Z1SUdsMFpXMGdabkp2YlNCaGJpQmhjbkpoZVZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJ5WlcxdmRtVWdLR0Z5Y2l3Z2FYUmxiU2tnZTF4dUlDQnBaaUFvWVhKeUxteGxibWQwYUNrZ2UxeHVJQ0FnSUhaaGNpQnBibVJsZUNBOUlHRnljaTVwYm1SbGVFOW1LR2wwWlcwcE8xeHVJQ0FnSUdsbUlDaHBibVJsZUNBK0lDMHhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZWEp5TG5Od2JHbGpaU2hwYm1SbGVDd2dNU2xjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJEYUdWamF5QjNhR1YwYUdWeUlIUm9aU0J2WW1wbFkzUWdhR0Z6SUhSb1pTQndjbTl3WlhKMGVTNWNiaUFxTDF4dWRtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JtWjFibU4wYVc5dUlHaGhjMDkzYmlBb2IySnFMQ0JyWlhrcElIdGNiaUFnY21WMGRYSnVJR2hoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcUxDQnJaWGtwWEc1OVhHNWNiaThxS2x4dUlDb2dRM0psWVhSbElHRWdZMkZqYUdWa0lIWmxjbk5wYjI0Z2IyWWdZU0J3ZFhKbElHWjFibU4wYVc5dUxseHVJQ292WEc1bWRXNWpkR2x2YmlCallXTm9aV1FnS0dadUtTQjdYRzRnSUhaaGNpQmpZV05vWlNBOUlFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDazdYRzRnSUhKbGRIVnliaUFvWm5WdVkzUnBiMjRnWTJGamFHVmtSbTRnS0hOMGNpa2dlMXh1SUNBZ0lIWmhjaUJvYVhRZ1BTQmpZV05vWlZ0emRISmRPMXh1SUNBZ0lISmxkSFZ5YmlCb2FYUWdmSHdnS0dOaFkyaGxXM04wY2wwZ1BTQm1iaWh6ZEhJcEtWeHVJQ0I5S1Z4dWZWeHVYRzR2S2lwY2JpQXFJRU5oYldWc2FYcGxJR0VnYUhsd2FHVnVMV1JsYkdsdGFYUmxaQ0J6ZEhKcGJtY3VYRzRnS2k5Y2JuWmhjaUJqWVcxbGJHbDZaVkpGSUQwZ0x5MG9YRngzS1M5bk8xeHVkbUZ5SUdOaGJXVnNhWHBsSUQwZ1kyRmphR1ZrS0daMWJtTjBhVzl1SUNoemRISXBJSHRjYmlBZ2NtVjBkWEp1SUhOMGNpNXlaWEJzWVdObEtHTmhiV1ZzYVhwbFVrVXNJR1oxYm1OMGFXOXVJQ2hmTENCaktTQjdJSEpsZEhWeWJpQmpJRDhnWXk1MGIxVndjR1Z5UTJGelpTZ3BJRG9nSnljN0lIMHBYRzU5S1R0Y2JseHVMeW9xWEc0Z0tpQkRZWEJwZEdGc2FYcGxJR0VnYzNSeWFXNW5MbHh1SUNvdlhHNTJZWElnWTJGd2FYUmhiR2w2WlNBOUlHTmhZMmhsWkNobWRXNWpkR2x2YmlBb2MzUnlLU0I3WEc0Z0lISmxkSFZ5YmlCemRISXVZMmhoY2tGMEtEQXBMblJ2VlhCd1pYSkRZWE5sS0NrZ0t5QnpkSEl1YzJ4cFkyVW9NU2xjYm4wcE8xeHVYRzR2S2lwY2JpQXFJRWg1Y0dobGJtRjBaU0JoSUdOaGJXVnNRMkZ6WlNCemRISnBibWN1WEc0Z0tpOWNiblpoY2lCb2VYQm9aVzVoZEdWU1JTQTlJQzljWEVJb1cwRXRXbDBwTDJjN1hHNTJZWElnYUhsd2FHVnVZWFJsSUQwZ1kyRmphR1ZrS0daMWJtTjBhVzl1SUNoemRISXBJSHRjYmlBZ2NtVjBkWEp1SUhOMGNpNXlaWEJzWVdObEtHaDVjR2hsYm1GMFpWSkZMQ0FuTFNReEp5a3VkRzlNYjNkbGNrTmhjMlVvS1Z4dWZTazdYRzVjYmk4cUtseHVJQ29nVTJsdGNHeGxJR0pwYm1Rc0lHWmhjM1JsY2lCMGFHRnVJRzVoZEdsMlpWeHVJQ292WEc1bWRXNWpkR2x2YmlCaWFXNWtJQ2htYml3Z1kzUjRLU0I3WEc0Z0lHWjFibU4wYVc5dUlHSnZkVzVrUm00Z0tHRXBJSHRjYmlBZ0lDQjJZWElnYkNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN1hHNGdJQ0FnY21WMGRYSnVJR3hjYmlBZ0lDQWdJRDhnYkNBK0lERmNiaUFnSUNBZ0lDQWdQeUJtYmk1aGNIQnNlU2hqZEhnc0lHRnlaM1Z0Wlc1MGN5bGNiaUFnSUNBZ0lDQWdPaUJtYmk1allXeHNLR04wZUN3Z1lTbGNiaUFnSUNBZ0lEb2dabTR1WTJGc2JDaGpkSGdwWEc0Z0lIMWNiaUFnTHk4Z2NtVmpiM0prSUc5eWFXZHBibUZzSUdadUlHeGxibWQwYUZ4dUlDQmliM1Z1WkVadUxsOXNaVzVuZEdnZ1BTQm1iaTVzWlc1bmRHZzdYRzRnSUhKbGRIVnliaUJpYjNWdVpFWnVYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyOXVkbVZ5ZENCaGJpQkJjbkpoZVMxc2FXdGxJRzlpYW1WamRDQjBieUJoSUhKbFlXd2dRWEp5WVhrdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhSdlFYSnlZWGtnS0d4cGMzUXNJSE4wWVhKMEtTQjdYRzRnSUhOMFlYSjBJRDBnYzNSaGNuUWdmSHdnTUR0Y2JpQWdkbUZ5SUdrZ1BTQnNhWE4wTG14bGJtZDBhQ0F0SUhOMFlYSjBPMXh1SUNCMllYSWdjbVYwSUQwZ2JtVjNJRUZ5Y21GNUtHa3BPMXh1SUNCM2FHbHNaU0FvYVMwdEtTQjdYRzRnSUNBZ2NtVjBXMmxkSUQwZ2JHbHpkRnRwSUNzZ2MzUmhjblJkTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhSY2JuMWNibHh1THlvcVhHNGdLaUJOYVhnZ2NISnZjR1Z5ZEdsbGN5QnBiblJ2SUhSaGNtZGxkQ0J2WW1wbFkzUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHVjRkR1Z1WkNBb2RHOHNJRjltY205dEtTQjdYRzRnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJmWm5KdmJTa2dlMXh1SUNBZ0lIUnZXMnRsZVYwZ1BTQmZabkp2YlZ0clpYbGRPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQjBiMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFMWxjbWRsSUdGdUlFRnljbUY1SUc5bUlFOWlhbVZqZEhNZ2FXNTBieUJoSUhOcGJtZHNaU0JQWW1wbFkzUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlIUnZUMkpxWldOMElDaGhjbklwSUh0Y2JpQWdkbUZ5SUhKbGN5QTlJSHQ5TzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0Z5Y2k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lHbG1JQ2hoY25KYmFWMHBJSHRjYmlBZ0lDQWdJR1Y0ZEdWdVpDaHlaWE1zSUdGeWNsdHBYU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE5jYm4xY2JseHVMeW9xWEc0Z0tpQlFaWEptYjNKdElHNXZJRzl3WlhKaGRHbHZiaTVjYmlBcUlGTjBkV0ppYVc1bklHRnlaM01nZEc4Z2JXRnJaU0JHYkc5M0lHaGhjSEI1SUhkcGRHaHZkWFFnYkdWaGRtbHVaeUIxYzJWc1pYTnpJSFJ5WVc1emNHbHNaV1FnWTI5a1pWeHVJQ29nZDJsMGFDQXVMaTV5WlhOMElDaG9kSFJ3Y3pvdkwyWnNiM2N1YjNKbkwySnNiMmN2TWpBeE55OHdOUzh3Tnk5VGRISnBZM1F0Um5WdVkzUnBiMjR0UTJGc2JDMUJjbWwwZVM4cFhHNGdLaTljYm1aMWJtTjBhVzl1SUc1dmIzQWdLR0VzSUdJc0lHTXBJSHQ5WEc1Y2JpOHFLbHh1SUNvZ1FXeDNZWGx6SUhKbGRIVnliaUJtWVd4elpTNWNiaUFxTDF4dWRtRnlJRzV2SUQwZ1puVnVZM1JwYjI0Z0tHRXNJR0lzSUdNcElIc2djbVYwZFhKdUlHWmhiSE5sT3lCOU8xeHVYRzR2S2lwY2JpQXFJRkpsZEhWeWJpQnpZVzFsSUhaaGJIVmxYRzRnS2k5Y2JuWmhjaUJwWkdWdWRHbDBlU0E5SUdaMWJtTjBhVzl1SUNoZktTQjdJSEpsZEhWeWJpQmZPeUI5TzF4dVhHNHZLaXBjYmlBcUlFZGxibVZ5WVhSbElHRWdjM1JoZEdsaklHdGxlWE1nYzNSeWFXNW5JR1p5YjIwZ1kyOXRjR2xzWlhJZ2JXOWtkV3hsY3k1Y2JpQXFMMXh1WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnNnYVdZZ2RIZHZJSFpoYkhWbGN5QmhjbVVnYkc5dmMyVnNlU0JsY1hWaGJDQXRJSFJvWVhRZ2FYTXNYRzRnS2lCcFppQjBhR1Y1SUdGeVpTQndiR0ZwYmlCdlltcGxZM1J6TENCa2J5QjBhR1Y1SUdoaGRtVWdkR2hsSUhOaGJXVWdjMmhoY0dVL1hHNGdLaTljYm1aMWJtTjBhVzl1SUd4dmIzTmxSWEYxWVd3Z0tHRXNJR0lwSUh0Y2JpQWdhV1lnS0dFZ1BUMDlJR0lwSUhzZ2NtVjBkWEp1SUhSeWRXVWdmVnh1SUNCMllYSWdhWE5QWW1wbFkzUkJJRDBnYVhOUFltcGxZM1FvWVNrN1hHNGdJSFpoY2lCcGMwOWlhbVZqZEVJZ1BTQnBjMDlpYW1WamRDaGlLVHRjYmlBZ2FXWWdLR2x6VDJKcVpXTjBRU0FtSmlCcGMwOWlhbVZqZEVJcElIdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdkbUZ5SUdselFYSnlZWGxCSUQwZ1FYSnlZWGt1YVhOQmNuSmhlU2hoS1R0Y2JpQWdJQ0FnSUhaaGNpQnBjMEZ5Y21GNVFpQTlJRUZ5Y21GNUxtbHpRWEp5WVhrb1lpazdYRzRnSUNBZ0lDQnBaaUFvYVhOQmNuSmhlVUVnSmlZZ2FYTkJjbkpoZVVJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRXViR1Z1WjNSb0lEMDlQU0JpTG14bGJtZDBhQ0FtSmlCaExtVjJaWEo1S0daMWJtTjBhVzl1SUNobExDQnBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4dmIzTmxSWEYxWVd3b1pTd2dZbHRwWFNsY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9JV2x6UVhKeVlYbEJJQ1ltSUNGcGMwRnljbUY1UWlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYTJWNWMwRWdQU0JQWW1wbFkzUXVhMlY1Y3loaEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUd0bGVYTkNJRDBnVDJKcVpXTjBMbXRsZVhNb1lpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnJaWGx6UVM1c1pXNW5kR2dnUFQwOUlHdGxlWE5DTG14bGJtZDBhQ0FtSmlCclpYbHpRUzVsZG1WeWVTaG1kVzVqZEdsdmJpQW9hMlY1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHeHZiM05sUlhGMVlXd29ZVnRyWlhsZExDQmlXMnRsZVYwcFhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdibVY0ZENBcUwxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlZjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tDRnBjMDlpYW1WamRFRWdKaVlnSVdselQySnFaV04wUWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJUZEhKcGJtY29ZU2tnUFQwOUlGTjBjbWx1WnloaUtWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUd4dmIzTmxTVzVrWlhoUFppQW9ZWEp5TENCMllXd3BJSHRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmhjbkl1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCcFppQW9iRzl2YzJWRmNYVmhiQ2hoY25KYmFWMHNJSFpoYkNrcElIc2djbVYwZFhKdUlHa2dmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQXRNVnh1ZlZ4dVhHNHZLaXBjYmlBcUlFVnVjM1Z5WlNCaElHWjFibU4wYVc5dUlHbHpJR05oYkd4bFpDQnZibXg1SUc5dVkyVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHOXVZMlVnS0dadUtTQjdYRzRnSUhaaGNpQmpZV3hzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQnBaaUFvSVdOaGJHeGxaQ2tnZTF4dUlDQWdJQ0FnWTJGc2JHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lHWnVMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JuWmhjaUJUVTFKZlFWUlVVaUE5SUNka1lYUmhMWE5sY25abGNpMXlaVzVrWlhKbFpDYzdYRzVjYm5aaGNpQkJVMU5GVkY5VVdWQkZVeUE5SUZ0Y2JpQWdKMk52YlhCdmJtVnVkQ2NzWEc0Z0lDZGthWEpsWTNScGRtVW5MRnh1SUNBblptbHNkR1Z5SjF4dVhUdGNibHh1ZG1GeUlFeEpSa1ZEV1VOTVJWOUlUMDlMVXlBOUlGdGNiaUFnSjJKbFptOXlaVU55WldGMFpTY3NYRzRnSUNkamNtVmhkR1ZrSnl4Y2JpQWdKMkpsWm05eVpVMXZkVzUwSnl4Y2JpQWdKMjF2ZFc1MFpXUW5MRnh1SUNBblltVm1iM0psVlhCa1lYUmxKeXhjYmlBZ0ozVndaR0YwWldRbkxGeHVJQ0FuWW1WbWIzSmxSR1Z6ZEhKdmVTY3NYRzRnSUNka1pYTjBjbTk1WldRbkxGeHVJQ0FuWVdOMGFYWmhkR1ZrSnl4Y2JpQWdKMlJsWVdOMGFYWmhkR1ZrSnl4Y2JpQWdKMlZ5Y205eVEyRndkSFZ5WldRblhHNWRPMXh1WEc0dktpQWdLaTljYmx4dWRtRnlJR052Ym1acFp5QTlJQ2g3WEc0Z0lDOHFLbHh1SUNBZ0tpQlBjSFJwYjI0Z2JXVnlaMlVnYzNSeVlYUmxaMmxsY3lBb2RYTmxaQ0JwYmlCamIzSmxMM1YwYVd3dmIzQjBhVzl1Y3lsY2JpQWdJQ292WEc0Z0lDOHZJQ1JtYkc5M0xXUnBjMkZpYkdVdGJHbHVaVnh1SUNCdmNIUnBiMjVOWlhKblpWTjBjbUYwWldkcFpYTTZJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2tzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRmRvWlhSb1pYSWdkRzhnYzNWd2NISmxjM01nZDJGeWJtbHVaM011WEc0Z0lDQXFMMXh1SUNCemFXeGxiblE2SUdaaGJITmxMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRhRzkzSUhCeWIyUjFZM1JwYjI0Z2JXOWtaU0IwYVhBZ2JXVnpjMkZuWlNCdmJpQmliMjkwUDF4dUlDQWdLaTljYmlBZ2NISnZaSFZqZEdsdmJsUnBjRG9nY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1Snl4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVjJobGRHaGxjaUIwYnlCbGJtRmliR1VnWkdWMmRHOXZiSE5jYmlBZ0lDb3ZYRzRnSUdSbGRuUnZiMnh6T2lCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bkxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCWGFHVjBhR1Z5SUhSdklISmxZMjl5WkNCd1pYSm1YRzRnSUNBcUwxeHVJQ0J3WlhKbWIzSnRZVzVqWlRvZ1ptRnNjMlVzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVZ5Y205eUlHaGhibVJzWlhJZ1ptOXlJSGRoZEdOb1pYSWdaWEp5YjNKelhHNGdJQ0FxTDF4dUlDQmxjbkp2Y2toaGJtUnNaWEk2SUc1MWJHd3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGZGhjbTRnYUdGdVpHeGxjaUJtYjNJZ2QyRjBZMmhsY2lCM1lYSnVjMXh1SUNBZ0tpOWNiaUFnZDJGeWJraGhibVJzWlhJNklHNTFiR3dzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWxuYm05eVpTQmpaWEowWVdsdUlHTjFjM1J2YlNCbGJHVnRaVzUwYzF4dUlDQWdLaTljYmlBZ2FXZHViM0psWkVWc1pXMWxiblJ6T2lCYlhTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1EzVnpkRzl0SUhWelpYSWdhMlY1SUdGc2FXRnpaWE1nWm05eUlIWXRiMjVjYmlBZ0lDb3ZYRzRnSUM4dklDUm1iRzkzTFdScGMyRmliR1V0YkdsdVpWeHVJQ0JyWlhsRGIyUmxjem9nVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1N4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJobFkyc2dhV1lnWVNCMFlXY2dhWE1nY21WelpYSjJaV1FnYzI4Z2RHaGhkQ0JwZENCallXNXViM1FnWW1VZ2NtVm5hWE4wWlhKbFpDQmhjeUJoWEc0Z0lDQXFJR052YlhCdmJtVnVkQzRnVkdocGN5QnBjeUJ3YkdGMFptOXliUzFrWlhCbGJtUmxiblFnWVc1a0lHMWhlU0JpWlNCdmRtVnlkM0pwZEhSbGJpNWNiaUFnSUNvdlhHNGdJR2x6VW1WelpYSjJaV1JVWVdjNklHNXZMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRhR1ZqYXlCcFppQmhiaUJoZEhSeWFXSjFkR1VnYVhNZ2NtVnpaWEoyWldRZ2MyOGdkR2hoZENCcGRDQmpZVzV1YjNRZ1ltVWdkWE5sWkNCaGN5QmhJR052YlhCdmJtVnVkRnh1SUNBZ0tpQndjbTl3TGlCVWFHbHpJR2x6SUhCc1lYUm1iM0p0TFdSbGNHVnVaR1Z1ZENCaGJtUWdiV0Y1SUdKbElHOTJaWEozY21sMGRHVnVMbHh1SUNBZ0tpOWNiaUFnYVhOU1pYTmxjblpsWkVGMGRISTZJRzV2TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYUdWamF5QnBaaUJoSUhSaFp5QnBjeUJoYmlCMWJtdHViM2R1SUdWc1pXMWxiblF1WEc0Z0lDQXFJRkJzWVhSbWIzSnRMV1JsY0dWdVpHVnVkQzVjYmlBZ0lDb3ZYRzRnSUdselZXNXJibTkzYmtWc1pXMWxiblE2SUc1dkxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCSFpYUWdkR2hsSUc1aGJXVnpjR0ZqWlNCdlppQmhiaUJsYkdWdFpXNTBYRzRnSUNBcUwxeHVJQ0JuWlhSVVlXZE9ZVzFsYzNCaFkyVTZJRzV2YjNBc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZCaGNuTmxJSFJvWlNCeVpXRnNJSFJoWnlCdVlXMWxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdjR3hoZEdadmNtMHVYRzRnSUNBcUwxeHVJQ0J3WVhKelpWQnNZWFJtYjNKdFZHRm5UbUZ0WlRvZ2FXUmxiblJwZEhrc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOb1pXTnJJR2xtSUdGdUlHRjBkSEpwWW5WMFpTQnRkWE4wSUdKbElHSnZkVzVrSUhWemFXNW5JSEJ5YjNCbGNuUjVMQ0JsTG1jdUlIWmhiSFZsWEc0Z0lDQXFJRkJzWVhSbWIzSnRMV1JsY0dWdVpHVnVkQzVjYmlBZ0lDb3ZYRzRnSUcxMWMzUlZjMlZRY205d09pQnVieXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSWGh3YjNObFpDQm1iM0lnYkdWbllXTjVJSEpsWVhOdmJuTmNiaUFnSUNvdlhHNGdJRjlzYVdabFkzbGpiR1ZJYjI5cmN6b2dURWxHUlVOWlEweEZYMGhQVDB0VFhHNTlLVHRjYmx4dUx5b2dJQ292WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnNnYVdZZ1lTQnpkSEpwYm1jZ2MzUmhjblJ6SUhkcGRHZ2dKQ0J2Y2lCZlhHNGdLaTljYm1aMWJtTjBhVzl1SUdselVtVnpaWEoyWldRZ0tITjBjaWtnZTF4dUlDQjJZWElnWXlBOUlDaHpkSElnS3lBbkp5a3VZMmhoY2tOdlpHVkJkQ2d3S1R0Y2JpQWdjbVYwZFhKdUlHTWdQVDA5SURCNE1qUWdmSHdnWXlBOVBUMGdNSGcxUmx4dWZWeHVYRzR2S2lwY2JpQXFJRVJsWm1sdVpTQmhJSEJ5YjNCbGNuUjVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmtaV1lnS0c5aWFpd2dhMlY1TENCMllXd3NJR1Z1ZFcxbGNtRmliR1VwSUh0Y2JpQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0c5aWFpd2dhMlY1TENCN1hHNGdJQ0FnZG1Gc2RXVTZJSFpoYkN4Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lBaElXVnVkVzFsY21GaWJHVXNYRzRnSUNBZ2QzSnBkR0ZpYkdVNklIUnlkV1VzWEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxYRzRnSUgwcE8xeHVmVnh1WEc0dktpcGNiaUFxSUZCaGNuTmxJSE5wYlhCc1pTQndZWFJvTGx4dUlDb3ZYRzUyWVhJZ1ltRnBiRkpGSUQwZ0wxdGVYRngzTGlSZEx6dGNibVoxYm1OMGFXOXVJSEJoY25ObFVHRjBhQ0FvY0dGMGFDa2dlMXh1SUNCcFppQW9ZbUZwYkZKRkxuUmxjM1FvY0dGMGFDa3BJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1SUNCMllYSWdjMlZuYldWdWRITWdQU0J3WVhSb0xuTndiR2wwS0NjdUp5azdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvYjJKcUtTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnpaV2R0Wlc1MGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnYVdZZ0tDRnZZbW9wSUhzZ2NtVjBkWEp1SUgxY2JpQWdJQ0FnSUc5aWFpQTlJRzlpYWx0elpXZHRaVzUwYzF0cFhWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ2WW1wY2JpQWdmVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVYRzR2THlCallXNGdkMlVnZFhObElGOWZjSEp2ZEc5Zlh6OWNiblpoY2lCb1lYTlFjbTkwYnlBOUlDZGZYM0J5YjNSdlgxOG5JR2x1SUh0OU8xeHVYRzR2THlCQ2NtOTNjMlZ5SUdWdWRtbHliMjV0Wlc1MElITnVhV1ptYVc1blhHNTJZWElnYVc1Q2NtOTNjMlZ5SUQwZ2RIbHdaVzltSUhkcGJtUnZkeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDYzdYRzUyWVhJZ2FXNVhaV1Y0SUQwZ2RIbHdaVzltSUZkWVJXNTJhWEp2Ym0xbGJuUWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JQ0VoVjFoRmJuWnBjbTl1YldWdWRDNXdiR0YwWm05eWJUdGNiblpoY2lCM1pXVjRVR3hoZEdadmNtMGdQU0JwYmxkbFpYZ2dKaVlnVjFoRmJuWnBjbTl1YldWdWRDNXdiR0YwWm05eWJTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dWRtRnlJRlZCSUQwZ2FXNUNjbTkzYzJWeUlDWW1JSGRwYm1SdmR5NXVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNTJZWElnYVhOSlJTQTlJRlZCSUNZbUlDOXRjMmxsZkhSeWFXUmxiblF2TG5SbGMzUW9WVUVwTzF4dWRtRnlJR2x6U1VVNUlEMGdWVUVnSmlZZ1ZVRXVhVzVrWlhoUFppZ25iWE5wWlNBNUxqQW5LU0ErSURBN1hHNTJZWElnYVhORlpHZGxJRDBnVlVFZ0ppWWdWVUV1YVc1a1pYaFBaaWduWldSblpTOG5LU0ErSURBN1hHNTJZWElnYVhOQmJtUnliMmxrSUQwZ0tGVkJJQ1ltSUZWQkxtbHVaR1Y0VDJZb0oyRnVaSEp2YVdRbktTQStJREFwSUh4OElDaDNaV1Y0VUd4aGRHWnZjbTBnUFQwOUlDZGhibVJ5YjJsa0p5azdYRzUyWVhJZ2FYTkpUMU1nUFNBb1ZVRWdKaVlnTDJsd2FHOXVaWHhwY0dGa2ZHbHdiMlI4YVc5ekx5NTBaWE4wS0ZWQktTa2dmSHdnS0hkbFpYaFFiR0YwWm05eWJTQTlQVDBnSjJsdmN5Y3BPMXh1ZG1GeUlHbHpRMmh5YjIxbElEMGdWVUVnSmlZZ0wyTm9jbTl0WlZ4Y0wxeGNaQ3N2TG5SbGMzUW9WVUVwSUNZbUlDRnBjMFZrWjJVN1hHNWNiaTh2SUVacGNtVm1iM2dnYUdGeklHRWdYQ0ozWVhSamFGd2lJR1oxYm1OMGFXOXVJRzl1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1TGk1Y2JuWmhjaUJ1WVhScGRtVlhZWFJqYUNBOUlDaDdmU2t1ZDJGMFkyZzdYRzVjYm5aaGNpQnpkWEJ3YjNKMGMxQmhjM05wZG1VZ1BTQm1ZV3h6WlR0Y2JtbG1JQ2hwYmtKeWIzZHpaWElwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0IyWVhJZ2IzQjBjeUE5SUh0OU8xeHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHZjSFJ6TENBbmNHRnpjMmwyWlNjc0lDaDdYRzRnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1SUdkbGRDQW9LU0I3WEc0Z0lDQWdJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292WEc0Z0lDQWdJQ0FnSUhOMWNIQnZjblJ6VUdGemMybDJaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTa3BPeUF2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlptRmpaV0p2YjJzdlpteHZkeTlwYzNOMVpYTXZNamcxWEc0Z0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozUmxjM1F0Y0dGemMybDJaU2NzSUc1MWJHd3NJRzl3ZEhNcE8xeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN2ZWeHVmVnh1WEc0dkx5QjBhR2x6SUc1bFpXUnpJSFJ2SUdKbElHeGhlbmt0WlhaaGJHVmtJR0psWTJGMWMyVWdkblZsSUcxaGVTQmlaU0J5WlhGMWFYSmxaQ0JpWldadmNtVmNiaTh2SUhaMVpTMXpaWEoyWlhJdGNtVnVaR1Z5WlhJZ1kyRnVJSE5sZENCV1ZVVmZSVTVXWEc1MllYSWdYMmx6VTJWeWRtVnlPMXh1ZG1GeUlHbHpVMlZ5ZG1WeVVtVnVaR1Z5YVc1bklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQnBaaUFvWDJselUyVnlkbVZ5SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdJQ0JwWmlBb0lXbHVRbkp2ZDNObGNpQW1KaUIwZVhCbGIyWWdaMnh2WW1Gc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0x5OGdaR1YwWldOMElIQnlaWE5sYm1ObElHOW1JSFoxWlMxelpYSjJaWEl0Y21WdVpHVnlaWElnWVc1a0lHRjJiMmxrWEc0Z0lDQWdJQ0F2THlCWFpXSndZV05ySUhOb2FXMXRhVzVuSUhSb1pTQndjbTlqWlhOelhHNGdJQ0FnSUNCZmFYTlRaWEoyWlhJZ1BTQm5iRzlpWVd4YkozQnliMk5sYzNNblhTNWxibll1VmxWRlgwVk9WaUE5UFQwZ0ozTmxjblpsY2ljN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJRjlwYzFObGNuWmxjaUE5SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z1gybHpVMlZ5ZG1WeVhHNTlPMXh1WEc0dkx5QmtaWFJsWTNRZ1pHVjJkRzl2YkhOY2JuWmhjaUJrWlhaMGIyOXNjeUE5SUdsdVFuSnZkM05sY2lBbUppQjNhVzVrYjNjdVgxOVdWVVZmUkVWV1ZFOVBURk5mUjB4UFFrRk1YMGhQVDB0Zlh6dGNibHh1THlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYm1aMWJtTjBhVzl1SUdselRtRjBhWFpsSUNoRGRHOXlLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnUTNSdmNpQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQXZibUYwYVhabElHTnZaR1V2TG5SbGMzUW9RM1J2Y2k1MGIxTjBjbWx1WnlncEtWeHVmVnh1WEc1MllYSWdhR0Z6VTNsdFltOXNJRDFjYmlBZ2RIbHdaVzltSUZONWJXSnZiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnYVhOT1lYUnBkbVVvVTNsdFltOXNLU0FtSmx4dUlDQjBlWEJsYjJZZ1VtVm1iR1ZqZENBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2FYTk9ZWFJwZG1Vb1VtVm1iR1ZqZEM1dmQyNUxaWGx6S1R0Y2JseHVkbUZ5SUY5VFpYUTdYRzR2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOGdMeThnSkdac2IzY3RaR2x6WVdKc1pTMXNhVzVsWEc1cFppQW9kSGx3Wlc5bUlGTmxkQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnYVhOT1lYUnBkbVVvVTJWMEtTa2dlMXh1SUNBdkx5QjFjMlVnYm1GMGFYWmxJRk5sZENCM2FHVnVJR0YyWVdsc1lXSnNaUzVjYmlBZ1gxTmxkQ0E5SUZObGREdGNibjBnWld4elpTQjdYRzRnSUM4dklHRWdibTl1TFhOMFlXNWtZWEprSUZObGRDQndiMng1Wm1sc2JDQjBhR0YwSUc5dWJIa2dkMjl5YTNNZ2QybDBhQ0J3Y21sdGFYUnBkbVVnYTJWNWN5NWNiaUFnWDFObGRDQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnVTJWMElDZ3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWMyVjBJRDBnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdVMlYwTG5CeWIzUnZkSGx3WlM1b1lYTWdQU0JtZFc1amRHbHZiaUJvWVhNZ0tHdGxlU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBXMnRsZVYwZ1BUMDlJSFJ5ZFdWY2JpQWdJQ0I5TzF4dUlDQWdJRk5sZEM1d2NtOTBiM1I1Y0dVdVlXUmtJRDBnWm5WdVkzUnBiMjRnWVdSa0lDaHJaWGtwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjMlYwVzJ0bGVWMGdQU0IwY25WbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVTJWMExuQnliM1J2ZEhsd1pTNWpiR1ZoY2lBOUlHWjFibU4wYVc5dUlHTnNaV0Z5SUNncElIdGNiaUFnSUNBZ0lIUm9hWE11YzJWMElEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdjbVYwZFhKdUlGTmxkRHRjYmlBZ2ZTZ3BLVHRjYm4xY2JseHVMeW9nSUNvdlhHNWNiblpoY2lCM1lYSnVJRDBnYm05dmNEdGNiblpoY2lCMGFYQWdQU0J1YjI5d08xeHVkbUZ5SUdkbGJtVnlZWFJsUTI5dGNHOXVaVzUwVkhKaFkyVWdQU0FvYm05dmNDazdJQzh2SUhkdmNtc2dZWEp2ZFc1a0lHWnNiM2NnWTJobFkydGNiblpoY2lCbWIzSnRZWFJEYjIxd2IyNWxiblJPWVcxbElEMGdLRzV2YjNBcE8xeHVYRzVwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNCMllYSWdhR0Z6UTI5dWMyOXNaU0E5SUhSNWNHVnZaaUJqYjI1emIyeGxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p6dGNiaUFnZG1GeUlHTnNZWE56YVdaNVVrVWdQU0F2S0Q4NlhueGJMVjlkS1NoY1hIY3BMMmM3WEc0Z0lIWmhjaUJqYkdGemMybG1lU0E5SUdaMWJtTjBhVzl1SUNoemRISXBJSHNnY21WMGRYSnVJSE4wY2x4dUlDQWdJQzV5WlhCc1lXTmxLR05zWVhOemFXWjVVa1VzSUdaMWJtTjBhVzl1SUNoaktTQjdJSEpsZEhWeWJpQmpMblJ2VlhCd1pYSkRZWE5sS0NrN0lIMHBYRzRnSUNBZ0xuSmxjR3hoWTJVb0wxc3RYMTB2Wnl3Z0p5Y3BPeUI5TzF4dVhHNGdJSGRoY200Z1BTQm1kVzVqZEdsdmJpQW9iWE5uTENCMmJTa2dlMXh1SUNBZ0lIWmhjaUIwY21GalpTQTlJSFp0SUQ4Z1oyVnVaWEpoZEdWRGIyMXdiMjVsYm5SVWNtRmpaU2gyYlNrZ09pQW5KenRjYmx4dUlDQWdJR2xtSUNoamIyNW1hV2N1ZDJGeWJraGhibVJzWlhJcElIdGNiaUFnSUNBZ0lHTnZibVpwWnk1M1lYSnVTR0Z1Wkd4bGNpNWpZV3hzS0c1MWJHd3NJRzF6Wnl3Z2RtMHNJSFJ5WVdObEtUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHaGhjME52Ym5OdmJHVWdKaVlnS0NGamIyNW1hV2N1YzJsc1pXNTBLU2tnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ29YQ0piVm5WbElIZGhjbTVkT2lCY0lpQXJJRzF6WnlBcklIUnlZV05sS1NrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lIUnBjQ0E5SUdaMWJtTjBhVzl1SUNodGMyY3NJSFp0S1NCN1hHNGdJQ0FnYVdZZ0tHaGhjME52Ym5OdmJHVWdKaVlnS0NGamIyNW1hV2N1YzJsc1pXNTBLU2tnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGd2lXMVoxWlNCMGFYQmRPaUJjSWlBcklHMXpaeUFySUNoY2JpQWdJQ0FnSUNBZ2RtMGdQeUJuWlc1bGNtRjBaVU52YlhCdmJtVnVkRlJ5WVdObEtIWnRLU0E2SUNjblhHNGdJQ0FnSUNBcEtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdabTl5YldGMFEyOXRjRzl1Wlc1MFRtRnRaU0E5SUdaMWJtTjBhVzl1SUNoMmJTd2dhVzVqYkhWa1pVWnBiR1VwSUh0Y2JpQWdJQ0JwWmlBb2RtMHVKSEp2YjNRZ1BUMDlJSFp0S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSnp4U2IyOTBQaWRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJRzl3ZEdsdmJuTWdQU0IwZVhCbGIyWWdkbTBnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnZG0wdVkybGtJQ0U5SUc1MWJHeGNiaUFnSUNBZ0lEOGdkbTB1YjNCMGFXOXVjMXh1SUNBZ0lDQWdPaUIyYlM1ZmFYTldkV1ZjYmlBZ0lDQWdJQ0FnUHlCMmJTNGtiM0IwYVc5dWN5QjhmQ0IyYlM1amIyNXpkSEoxWTNSdmNpNXZjSFJwYjI1elhHNGdJQ0FnSUNBZ0lEb2dkbTBnZkh3Z2UzMDdYRzRnSUNBZ2RtRnlJRzVoYldVZ1BTQnZjSFJwYjI1ekxtNWhiV1VnZkh3Z2IzQjBhVzl1Y3k1ZlkyOXRjRzl1Wlc1MFZHRm5PMXh1SUNBZ0lIWmhjaUJtYVd4bElEMGdiM0IwYVc5dWN5NWZYMlpwYkdVN1hHNGdJQ0FnYVdZZ0tDRnVZVzFsSUNZbUlHWnBiR1VwSUh0Y2JpQWdJQ0FnSUhaaGNpQnRZWFJqYUNBOUlHWnBiR1V1YldGMFkyZ29MeWhiWGk5Y1hGeGNYU3NwWEZ3dWRuVmxKQzhwTzF4dUlDQWdJQ0FnYm1GdFpTQTlJRzFoZEdOb0lDWW1JRzFoZEdOb1d6RmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBb2JtRnRaU0EvSUNoY0lqeGNJaUFySUNoamJHRnpjMmxtZVNodVlXMWxLU2tnS3lCY0lqNWNJaWtnT2lCY0lqeEJibTl1ZVcxdmRYTStYQ0lwSUN0Y2JpQWdJQ0FnSUNobWFXeGxJQ1ltSUdsdVkyeDFaR1ZHYVd4bElDRTlQU0JtWVd4elpTQS9JQ2hjSWlCaGRDQmNJaUFySUdacGJHVXBJRG9nSnljcFhHNGdJQ0FnS1Z4dUlDQjlPMXh1WEc0Z0lIWmhjaUJ5WlhCbFlYUWdQU0JtZFc1amRHbHZiaUFvYzNSeUxDQnVLU0I3WEc0Z0lDQWdkbUZ5SUhKbGN5QTlJQ2NuTzF4dUlDQWdJSGRvYVd4bElDaHVLU0I3WEc0Z0lDQWdJQ0JwWmlBb2JpQWxJRElnUFQwOUlERXBJSHNnY21WeklDczlJSE4wY2pzZ2ZWeHVJQ0FnSUNBZ2FXWWdLRzRnUGlBeEtTQjdJSE4wY2lBclBTQnpkSEk3SUgxY2JpQWdJQ0FnSUc0Z1BqNDlJREU3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTmNiaUFnZlR0Y2JseHVJQ0JuWlc1bGNtRjBaVU52YlhCdmJtVnVkRlJ5WVdObElEMGdablZ1WTNScGIyNGdLSFp0S1NCN1hHNGdJQ0FnYVdZZ0tIWnRMbDlwYzFaMVpTQW1KaUIyYlM0a2NHRnlaVzUwS1NCN1hHNGdJQ0FnSUNCMllYSWdkSEpsWlNBOUlGdGRPMXh1SUNBZ0lDQWdkbUZ5SUdOMWNuSmxiblJTWldOMWNuTnBkbVZUWlhGMVpXNWpaU0E5SURBN1hHNGdJQ0FnSUNCM2FHbHNaU0FvZG0wcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSeVpXVXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJzWVhOMElEMGdkSEpsWlZ0MGNtVmxMbXhsYm1kMGFDQXRJREZkTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hzWVhOMExtTnZibk4wY25WamRHOXlJRDA5UFNCMmJTNWpiMjV6ZEhKMVkzUnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGSmxZM1Z5YzJsMlpWTmxjWFZsYm1ObEt5czdYRzRnSUNBZ0lDQWdJQ0FnSUNCMmJTQTlJSFp0TGlSd1lYSmxiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpWeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWTNWeWNtVnVkRkpsWTNWeWMybDJaVk5sY1hWbGJtTmxJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKbFpWdDBjbVZsTG14bGJtZDBhQ0F0SURGZElEMGdXMnhoYzNRc0lHTjFjbkpsYm5SU1pXTjFjbk5wZG1WVFpYRjFaVzVqWlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBVbVZqZFhKemFYWmxVMlZ4ZFdWdVkyVWdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwY21WbExuQjFjMmdvZG0wcE8xeHVJQ0FnSUNBZ0lDQjJiU0E5SUhadExpUndZWEpsYm5RN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnSjF4Y2JseGNibVp2ZFc1a0lHbHVYRnh1WEZ4dUp5QXJJSFJ5WldWY2JpQWdJQ0FnSUNBZ0xtMWhjQ2htZFc1amRHbHZiaUFvZG0wc0lHa3BJSHNnY21WMGRYSnVJQ2hjSWx3aUlDc2dLR2tnUFQwOUlEQWdQeUFuTFMwdFBpQW5JRG9nY21Wd1pXRjBLQ2NnSnl3Z05TQXJJR2tnS2lBeUtTa2dLeUFvUVhKeVlYa3VhWE5CY25KaGVTaDJiU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdLQ2htYjNKdFlYUkRiMjF3YjI1bGJuUk9ZVzFsS0hadFd6QmRLU2tnS3lCY0lpNHVMaUFvWENJZ0t5QW9kbTFiTVYwcElDc2dYQ0lnY21WamRYSnphWFpsSUdOaGJHeHpLVndpS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdPaUJtYjNKdFlYUkRiMjF3YjI1bGJuUk9ZVzFsS0hadEtTa3BPeUI5S1Z4dUlDQWdJQ0FnSUNBdWFtOXBiaWduWEZ4dUp5bGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2hjSWx4Y2JseGNiaWhtYjNWdVpDQnBiaUJjSWlBcklDaG1iM0p0WVhSRGIyMXdiMjVsYm5ST1lXMWxLSFp0S1NrZ0t5QmNJaWxjSWlsY2JpQWdJQ0I5WEc0Z0lIMDdYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNWNiblpoY2lCMWFXUWtNU0E5SURBN1hHNWNiaThxS2x4dUlDb2dRU0JrWlhBZ2FYTWdZVzRnYjJKelpYSjJZV0pzWlNCMGFHRjBJR05oYmlCb1lYWmxJRzExYkhScGNHeGxYRzRnS2lCa2FYSmxZM1JwZG1WeklITjFZbk5qY21saWFXNW5JSFJ2SUdsMExseHVJQ292WEc1MllYSWdSR1Z3SUQwZ1puVnVZM1JwYjI0Z1JHVndJQ2dwSUh0Y2JpQWdkR2hwY3k1cFpDQTlJSFZwWkNReEt5czdYRzRnSUhSb2FYTXVjM1ZpY3lBOUlGdGRPMXh1ZlR0Y2JseHVSR1Z3TG5CeWIzUnZkSGx3WlM1aFpHUlRkV0lnUFNCbWRXNWpkR2x2YmlCaFpHUlRkV0lnS0hOMVlpa2dlMXh1SUNCMGFHbHpMbk4xWW5NdWNIVnphQ2h6ZFdJcE8xeHVmVHRjYmx4dVJHVndMbkJ5YjNSdmRIbHdaUzV5WlcxdmRtVlRkV0lnUFNCbWRXNWpkR2x2YmlCeVpXMXZkbVZUZFdJZ0tITjFZaWtnZTF4dUlDQnlaVzF2ZG1Vb2RHaHBjeTV6ZFdKekxDQnpkV0lwTzF4dWZUdGNibHh1UkdWd0xuQnliM1J2ZEhsd1pTNWtaWEJsYm1RZ1BTQm1kVzVqZEdsdmJpQmtaWEJsYm1RZ0tDa2dlMXh1SUNCcFppQW9SR1Z3TG5SaGNtZGxkQ2tnZTF4dUlDQWdJRVJsY0M1MFlYSm5aWFF1WVdSa1JHVndLSFJvYVhNcE8xeHVJQ0I5WEc1OU8xeHVYRzVFWlhBdWNISnZkRzkwZVhCbExtNXZkR2xtZVNBOUlHWjFibU4wYVc5dUlHNXZkR2xtZVNBb0tTQjdYRzRnSUM4dklITjBZV0pwYkdsNlpTQjBhR1VnYzNWaWMyTnlhV0psY2lCc2FYTjBJR1pwY25OMFhHNGdJSFpoY2lCemRXSnpJRDBnZEdocGN5NXpkV0p6TG5Oc2FXTmxLQ2s3WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc0lEMGdjM1ZpY3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNCemRXSnpXMmxkTG5Wd1pHRjBaU2dwTzF4dUlDQjlYRzU5TzF4dVhHNHZMeUIwYUdVZ1kzVnljbVZ1ZENCMFlYSm5aWFFnZDJGMFkyaGxjaUJpWldsdVp5QmxkbUZzZFdGMFpXUXVYRzR2THlCMGFHbHpJR2x6SUdkc2IySmhiR3g1SUhWdWFYRjFaU0JpWldOaGRYTmxJSFJvWlhKbElHTnZkV3hrSUdKbElHOXViSGtnYjI1bFhHNHZMeUIzWVhSamFHVnlJR0psYVc1bklHVjJZV3gxWVhSbFpDQmhkQ0JoYm5rZ2RHbHRaUzVjYmtSbGNDNTBZWEpuWlhRZ1BTQnVkV3hzTzF4dWRtRnlJSFJoY21kbGRGTjBZV05ySUQwZ1cxMDdYRzVjYm1aMWJtTjBhVzl1SUhCMWMyaFVZWEpuWlhRZ0tGOTBZWEpuWlhRcElIdGNiaUFnYVdZZ0tFUmxjQzUwWVhKblpYUXBJSHNnZEdGeVoyVjBVM1JoWTJzdWNIVnphQ2hFWlhBdWRHRnlaMlYwS1RzZ2ZWeHVJQ0JFWlhBdWRHRnlaMlYwSUQwZ1gzUmhjbWRsZER0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY0c5d1ZHRnlaMlYwSUNncElIdGNiaUFnUkdWd0xuUmhjbWRsZENBOUlIUmhjbWRsZEZOMFlXTnJMbkJ2Y0NncE8xeHVmVnh1WEc0dktpQWdLaTljYmx4dWRtRnlJRlpPYjJSbElEMGdablZ1WTNScGIyNGdWazV2WkdVZ0tGeHVJQ0IwWVdjc1hHNGdJR1JoZEdFc1hHNGdJR05vYVd4a2NtVnVMRnh1SUNCMFpYaDBMRnh1SUNCbGJHMHNYRzRnSUdOdmJuUmxlSFFzWEc0Z0lHTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5Nc1hHNGdJR0Z6ZVc1alJtRmpkRzl5ZVZ4dUtTQjdYRzRnSUhSb2FYTXVkR0ZuSUQwZ2RHRm5PMXh1SUNCMGFHbHpMbVJoZEdFZ1BTQmtZWFJoTzF4dUlDQjBhR2x6TG1Ob2FXeGtjbVZ1SUQwZ1kyaHBiR1J5Wlc0N1hHNGdJSFJvYVhNdWRHVjRkQ0E5SUhSbGVIUTdYRzRnSUhSb2FYTXVaV3h0SUQwZ1pXeHRPMXh1SUNCMGFHbHpMbTV6SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0IwYUdsekxtTnZiblJsZUhRZ1BTQmpiMjUwWlhoME8xeHVJQ0IwYUdsekxtWnVRMjl1ZEdWNGRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ2RHaHBjeTVtYms5d2RHbHZibk1nUFNCMWJtUmxabWx1WldRN1hHNGdJSFJvYVhNdVptNVRZMjl3WlVsa0lEMGdkVzVrWldacGJtVmtPMXh1SUNCMGFHbHpMbXRsZVNBOUlHUmhkR0VnSmlZZ1pHRjBZUzVyWlhrN1hHNGdJSFJvYVhNdVkyOXRjRzl1Wlc1MFQzQjBhVzl1Y3lBOUlHTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NN1hHNGdJSFJvYVhNdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUhSb2FYTXVjR0Z5Wlc1MElEMGdkVzVrWldacGJtVmtPMXh1SUNCMGFHbHpMbkpoZHlBOUlHWmhiSE5sTzF4dUlDQjBhR2x6TG1selUzUmhkR2xqSUQwZ1ptRnNjMlU3WEc0Z0lIUm9hWE11YVhOU2IyOTBTVzV6WlhKMElEMGdkSEoxWlR0Y2JpQWdkR2hwY3k1cGMwTnZiVzFsYm5RZ1BTQm1ZV3h6WlR0Y2JpQWdkR2hwY3k1cGMwTnNiMjVsWkNBOUlHWmhiSE5sTzF4dUlDQjBhR2x6TG1selQyNWpaU0E5SUdaaGJITmxPMXh1SUNCMGFHbHpMbUZ6ZVc1alJtRmpkRzl5ZVNBOUlHRnplVzVqUm1GamRHOXllVHRjYmlBZ2RHaHBjeTVoYzNsdVkwMWxkR0VnUFNCMWJtUmxabWx1WldRN1hHNGdJSFJvYVhNdWFYTkJjM2x1WTFCc1lXTmxhRzlzWkdWeUlEMGdabUZzYzJVN1hHNTlPMXh1WEc1MllYSWdjSEp2ZEc5MGVYQmxRV05qWlhOemIzSnpJRDBnZXlCamFHbHNaRG9nZXlCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVZ2ZTQjlPMXh1WEc0dkx5QkVSVkJTUlVOQlZFVkVPaUJoYkdsaGN5Qm1iM0lnWTI5dGNHOXVaVzUwU1c1emRHRnVZMlVnWm05eUlHSmhZMnQzWVhKa2N5QmpiMjF3WVhRdVhHNHZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdibVY0ZENBcUwxeHVjSEp2ZEc5MGVYQmxRV05qWlhOemIzSnpMbU5vYVd4a0xtZGxkQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnY21WMGRYSnVJSFJvYVhNdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJWY2JuMDdYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLQ0JXVG05a1pTNXdjbTkwYjNSNWNHVXNJSEJ5YjNSdmRIbHdaVUZqWTJWemMyOXljeUFwTzF4dVhHNTJZWElnWTNKbFlYUmxSVzF3ZEhsV1RtOWtaU0E5SUdaMWJtTjBhVzl1SUNoMFpYaDBLU0I3WEc0Z0lHbG1JQ2dnZEdWNGRDQTlQVDBnZG05cFpDQXdJQ2tnZEdWNGRDQTlJQ2NuTzF4dVhHNGdJSFpoY2lCdWIyUmxJRDBnYm1WM0lGWk9iMlJsS0NrN1hHNGdJRzV2WkdVdWRHVjRkQ0E5SUhSbGVIUTdYRzRnSUc1dlpHVXVhWE5EYjIxdFpXNTBJRDBnZEhKMVpUdGNiaUFnY21WMGRYSnVJRzV2WkdWY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVlJsZUhSV1RtOWtaU0FvZG1Gc0tTQjdYRzRnSUhKbGRIVnliaUJ1WlhjZ1ZrNXZaR1VvZFc1a1pXWnBibVZrTENCMWJtUmxabWx1WldRc0lIVnVaR1ZtYVc1bFpDd2dVM1J5YVc1bktIWmhiQ2twWEc1OVhHNWNiaTh2SUc5d2RHbHRhWHBsWkNCemFHRnNiRzkzSUdOc2IyNWxYRzR2THlCMWMyVmtJR1p2Y2lCemRHRjBhV01nYm05a1pYTWdZVzVrSUhOc2IzUWdibTlrWlhNZ1ltVmpZWFZ6WlNCMGFHVjVJRzFoZVNCaVpTQnlaWFZ6WldRZ1lXTnliM056WEc0dkx5QnRkV3gwYVhCc1pTQnlaVzVrWlhKekxDQmpiRzl1YVc1bklIUm9aVzBnWVhadmFXUnpJR1Z5Y205eWN5QjNhR1Z1SUVSUFRTQnRZVzVwY0hWc1lYUnBiMjV6SUhKbGJIbGNiaTh2SUc5dUlIUm9aV2x5SUdWc2JTQnlaV1psY21WdVkyVXVYRzVtZFc1amRHbHZiaUJqYkc5dVpWWk9iMlJsSUNoMmJtOWtaU3dnWkdWbGNDa2dlMXh1SUNCMllYSWdZMjl0Y0c5dVpXNTBUM0IwYVc5dWN5QTlJSFp1YjJSbExtTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NN1hHNGdJSFpoY2lCamJHOXVaV1FnUFNCdVpYY2dWazV2WkdVb1hHNGdJQ0FnZG01dlpHVXVkR0ZuTEZ4dUlDQWdJSFp1YjJSbExtUmhkR0VzWEc0Z0lDQWdkbTV2WkdVdVkyaHBiR1J5Wlc0c1hHNGdJQ0FnZG01dlpHVXVkR1Y0ZEN4Y2JpQWdJQ0IyYm05a1pTNWxiRzBzWEc0Z0lDQWdkbTV2WkdVdVkyOXVkR1Y0ZEN4Y2JpQWdJQ0JqYjIxd2IyNWxiblJQY0hScGIyNXpMRnh1SUNBZ0lIWnViMlJsTG1GemVXNWpSbUZqZEc5eWVWeHVJQ0FwTzF4dUlDQmpiRzl1WldRdWJuTWdQU0IyYm05a1pTNXVjenRjYmlBZ1kyeHZibVZrTG1selUzUmhkR2xqSUQwZ2RtNXZaR1V1YVhOVGRHRjBhV003WEc0Z0lHTnNiMjVsWkM1clpYa2dQU0IyYm05a1pTNXJaWGs3WEc0Z0lHTnNiMjVsWkM1cGMwTnZiVzFsYm5RZ1BTQjJibTlrWlM1cGMwTnZiVzFsYm5RN1hHNGdJR05zYjI1bFpDNW1ia052Ym5SbGVIUWdQU0IyYm05a1pTNW1ia052Ym5SbGVIUTdYRzRnSUdOc2IyNWxaQzVtYms5d2RHbHZibk1nUFNCMmJtOWtaUzVtYms5d2RHbHZibk03WEc0Z0lHTnNiMjVsWkM1bWJsTmpiM0JsU1dRZ1BTQjJibTlrWlM1bWJsTmpiM0JsU1dRN1hHNGdJR05zYjI1bFpDNXBjME5zYjI1bFpDQTlJSFJ5ZFdVN1hHNGdJR2xtSUNoa1pXVndLU0I3WEc0Z0lDQWdhV1lnS0hadWIyUmxMbU5vYVd4a2NtVnVLU0I3WEc0Z0lDQWdJQ0JqYkc5dVpXUXVZMmhwYkdSeVpXNGdQU0JqYkc5dVpWWk9iMlJsY3loMmJtOWtaUzVqYUdsc1pISmxiaXdnZEhKMVpTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGpiMjF3YjI1bGJuUlBjSFJwYjI1eklDWW1JR052YlhCdmJtVnVkRTl3ZEdsdmJuTXVZMmhwYkdSeVpXNHBJSHRjYmlBZ0lDQWdJR052YlhCdmJtVnVkRTl3ZEdsdmJuTXVZMmhwYkdSeVpXNGdQU0JqYkc5dVpWWk9iMlJsY3loamIyMXdiMjVsYm5SUGNIUnBiMjV6TG1Ob2FXeGtjbVZ1TENCMGNuVmxLVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlHTnNiMjVsWkZ4dWZWeHVYRzVtZFc1amRHbHZiaUJqYkc5dVpWWk9iMlJsY3lBb2RtNXZaR1Z6TENCa1pXVndLU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQjJibTlrWlhNdWJHVnVaM1JvTzF4dUlDQjJZWElnY21WeklEMGdibVYzSUVGeWNtRjVLR3hsYmlrN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JpQWdJQ0J5WlhOYmFWMGdQU0JqYkc5dVpWWk9iMlJsS0hadWIyUmxjMXRwWFN3Z1pHVmxjQ2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsYzF4dWZWeHVYRzR2S2x4dUlDb2dibTkwSUhSNWNHVWdZMmhsWTJ0cGJtY2dkR2hwY3lCbWFXeGxJR0psWTJGMWMyVWdabXh2ZHlCa2IyVnpiaWQwSUhCc1lYa2dkMlZzYkNCM2FYUm9YRzRnS2lCa2VXNWhiV2xqWVd4c2VTQmhZMk5sYzNOcGJtY2diV1YwYUc5a2N5QnZiaUJCY25KaGVTQndjbTkwYjNSNWNHVmNiaUFxTDF4dVhHNTJZWElnWVhKeVlYbFFjbTkwYnlBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlR0Y2JuWmhjaUJoY25KaGVVMWxkR2h2WkhNZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0dGeWNtRjVVSEp2ZEc4cE8xdGNiaUFnSjNCMWMyZ25MRnh1SUNBbmNHOXdKeXhjYmlBZ0ozTm9hV1owSnl4Y2JpQWdKM1Z1YzJocFpuUW5MRnh1SUNBbmMzQnNhV05sSnl4Y2JpQWdKM052Y25RbkxGeHVJQ0FuY21WMlpYSnpaU2RjYmwwdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2JXVjBhRzlrS1NCN1hHNGdJQzh2SUdOaFkyaGxJRzl5YVdkcGJtRnNJRzFsZEdodlpGeHVJQ0IyWVhJZ2IzSnBaMmx1WVd3Z1BTQmhjbkpoZVZCeWIzUnZXMjFsZEdodlpGMDdYRzRnSUdSbFppaGhjbkpoZVUxbGRHaHZaSE1zSUcxbGRHaHZaQ3dnWm5WdVkzUnBiMjRnYlhWMFlYUnZjaUFvS1NCN1hHNGdJQ0FnZG1GeUlHRnlaM01nUFNCYlhTd2diR1Z1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUR0Y2JpQWdJQ0IzYUdsc1pTQW9JR3hsYmkwdElDa2dZWEpuYzFzZ2JHVnVJRjBnUFNCaGNtZDFiV1Z1ZEhOYklHeGxiaUJkTzF4dVhHNGdJQ0FnZG1GeUlISmxjM1ZzZENBOUlHOXlhV2RwYm1Gc0xtRndjR3g1S0hSb2FYTXNJR0Z5WjNNcE8xeHVJQ0FnSUhaaGNpQnZZaUE5SUhSb2FYTXVYMTl2WWw5Zk8xeHVJQ0FnSUhaaGNpQnBibk5sY25SbFpEdGNiaUFnSUNCemQybDBZMmdnS0cxbGRHaHZaQ2tnZTF4dUlDQWdJQ0FnWTJGelpTQW5jSFZ6YUNjNlhHNGdJQ0FnSUNCallYTmxJQ2QxYm5Ob2FXWjBKenBjYmlBZ0lDQWdJQ0FnYVc1elpYSjBaV1FnUFNCaGNtZHpPMXh1SUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ1kyRnpaU0FuYzNCc2FXTmxKenBjYmlBZ0lDQWdJQ0FnYVc1elpYSjBaV1FnUFNCaGNtZHpMbk5zYVdObEtESXBPMXh1SUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2FXNXpaWEowWldRcElIc2diMkl1YjJKelpYSjJaVUZ5Y21GNUtHbHVjMlZ5ZEdWa0tUc2dmVnh1SUNBZ0lDOHZJRzV2ZEdsbWVTQmphR0Z1WjJWY2JpQWdJQ0J2WWk1a1pYQXVibTkwYVdaNUtDazdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRnh1SUNCOUtUdGNibjBwTzF4dVhHNHZLaUFnS2k5Y2JseHVkbUZ5SUdGeWNtRjVTMlY1Y3lBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVTVoYldWektHRnljbUY1VFdWMGFHOWtjeWs3WEc1Y2JpOHFLbHh1SUNvZ1Fua2daR1ZtWVhWc2RDd2dkMmhsYmlCaElISmxZV04wYVhabElIQnliM0JsY25SNUlHbHpJSE5sZEN3Z2RHaGxJRzVsZHlCMllXeDFaU0JwYzF4dUlDb2dZV3h6YnlCamIyNTJaWEowWldRZ2RHOGdZbVZqYjIxbElISmxZV04wYVhabExpQkliM2RsZG1WeUlIZG9aVzRnY0dGemMybHVaeUJrYjNkdUlIQnliM0J6TEZ4dUlDb2dkMlVnWkc5dUozUWdkMkZ1ZENCMGJ5Qm1iM0pqWlNCamIyNTJaWEp6YVc5dUlHSmxZMkYxYzJVZ2RHaGxJSFpoYkhWbElHMWhlU0JpWlNCaElHNWxjM1JsWkNCMllXeDFaVnh1SUNvZ2RXNWtaWElnWVNCbWNtOTZaVzRnWkdGMFlTQnpkSEoxWTNSMWNtVXVJRU52Ym5abGNuUnBibWNnYVhRZ2QyOTFiR1FnWkdWbVpXRjBJSFJvWlNCdmNIUnBiV2w2WVhScGIyNHVYRzRnS2k5Y2JuWmhjaUJ2WW5ObGNuWmxjbE4wWVhSbElEMGdlMXh1SUNCemFHOTFiR1JEYjI1MlpYSjBPaUIwY25WbFhHNTlPMXh1WEc0dktpcGNiaUFxSUU5aWMyVnlkbVZ5SUdOc1lYTnpJSFJvWVhRZ1lYSmxJR0YwZEdGamFHVmtJSFJ2SUdWaFkyZ2diMkp6WlhKMlpXUmNiaUFxSUc5aWFtVmpkQzRnVDI1alpTQmhkSFJoWTJobFpDd2dkR2hsSUc5aWMyVnlkbVZ5SUdOdmJuWmxjblJ6SUhSaGNtZGxkRnh1SUNvZ2IySnFaV04wSjNNZ2NISnZjR1Z5ZEhrZ2EyVjVjeUJwYm5SdklHZGxkSFJsY2k5elpYUjBaWEp6SUhSb1lYUmNiaUFxSUdOdmJHeGxZM1FnWkdWd1pXNWtaVzVqYVdWeklHRnVaQ0JrYVhOd1lYUmphR1Z6SUhWd1pHRjBaWE11WEc0Z0tpOWNiblpoY2lCUFluTmxjblpsY2lBOUlHWjFibU4wYVc5dUlFOWljMlZ5ZG1WeUlDaDJZV3gxWlNrZ2UxeHVJQ0IwYUdsekxuWmhiSFZsSUQwZ2RtRnNkV1U3WEc0Z0lIUm9hWE11WkdWd0lEMGdibVYzSUVSbGNDZ3BPMXh1SUNCMGFHbHpMblp0UTI5MWJuUWdQU0F3TzF4dUlDQmtaV1lvZG1Gc2RXVXNJQ2RmWDI5aVgxOG5MQ0IwYUdsektUdGNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdkbUZ5SUdGMVoyMWxiblFnUFNCb1lYTlFjbTkwYjF4dUlDQWdJQ0FnUHlCd2NtOTBiMEYxWjIxbGJuUmNiaUFnSUNBZ0lEb2dZMjl3ZVVGMVoyMWxiblE3WEc0Z0lDQWdZWFZuYldWdWRDaDJZV3gxWlN3Z1lYSnlZWGxOWlhSb2IyUnpMQ0JoY25KaGVVdGxlWE1wTzF4dUlDQWdJSFJvYVhNdWIySnpaWEoyWlVGeWNtRjVLSFpoYkhWbEtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjBhR2x6TG5kaGJHc29kbUZzZFdVcE8xeHVJQ0I5WEc1OU8xeHVYRzR2S2lwY2JpQXFJRmRoYkdzZ2RHaHliM1ZuYUNCbFlXTm9JSEJ5YjNCbGNuUjVJR0Z1WkNCamIyNTJaWEowSUhSb1pXMGdhVzUwYjF4dUlDb2daMlYwZEdWeUwzTmxkSFJsY25NdUlGUm9hWE1nYldWMGFHOWtJSE5vYjNWc1pDQnZibXg1SUdKbElHTmhiR3hsWkNCM2FHVnVYRzRnS2lCMllXeDFaU0IwZVhCbElHbHpJRTlpYW1WamRDNWNiaUFxTDF4dVQySnpaWEoyWlhJdWNISnZkRzkwZVhCbExuZGhiR3NnUFNCbWRXNWpkR2x2YmlCM1lXeHJJQ2h2WW1vcElIdGNiaUFnZG1GeUlHdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aHZZbW9wTzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3RsZVhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQmtaV1pwYm1WU1pXRmpkR2wyWlNodlltb3NJR3RsZVhOYmFWMHNJRzlpYWx0clpYbHpXMmxkWFNrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dUMkp6WlhKMlpTQmhJR3hwYzNRZ2IyWWdRWEp5WVhrZ2FYUmxiWE11WEc0Z0tpOWNiazlpYzJWeWRtVnlMbkJ5YjNSdmRIbHdaUzV2WW5ObGNuWmxRWEp5WVhrZ1BTQm1kVzVqZEdsdmJpQnZZbk5sY25abFFYSnlZWGtnS0dsMFpXMXpLU0I3WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc0lEMGdhWFJsYlhNdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ2IySnpaWEoyWlNocGRHVnRjMXRwWFNrN1hHNGdJSDFjYm4wN1hHNWNiaTh2SUdobGJIQmxjbk5jYmx4dUx5b3FYRzRnS2lCQmRXZHRaVzUwSUdGdUlIUmhjbWRsZENCUFltcGxZM1FnYjNJZ1FYSnlZWGtnWW5rZ2FXNTBaWEpqWlhCMGFXNW5YRzRnS2lCMGFHVWdjSEp2ZEc5MGVYQmxJR05vWVdsdUlIVnphVzVuSUY5ZmNISnZkRzlmWDF4dUlDb3ZYRzVtZFc1amRHbHZiaUJ3Y205MGIwRjFaMjFsYm5RZ0tIUmhjbWRsZEN3Z2MzSmpMQ0JyWlhsektTQjdYRzRnSUM4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUc1dkxYQnliM1J2SUNvdlhHNGdJSFJoY21kbGRDNWZYM0J5YjNSdlgxOGdQU0J6Y21NN1hHNGdJQzhxSUdWemJHbHVkQzFsYm1GaWJHVWdibTh0Y0hKdmRHOGdLaTljYm4xY2JseHVMeW9xWEc0Z0tpQkJkV2R0Wlc1MElHRnVJSFJoY21kbGRDQlBZbXBsWTNRZ2IzSWdRWEp5WVhrZ1lua2daR1ZtYVc1cGJtZGNiaUFxSUdocFpHUmxiaUJ3Y205d1pYSjBhV1Z6TGx4dUlDb3ZYRzR2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1Wm5WdVkzUnBiMjRnWTI5d2VVRjFaMjFsYm5RZ0tIUmhjbWRsZEN3Z2MzSmpMQ0JyWlhsektTQjdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ2EyVjVjeTVzWlc1bmRHZzdJR2tnUENCc095QnBLeXNwSUh0Y2JpQWdJQ0IyWVhJZ2EyVjVJRDBnYTJWNWMxdHBYVHRjYmlBZ0lDQmtaV1lvZEdGeVoyVjBMQ0JyWlhrc0lITnlZMXRyWlhsZEtUdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRUYwZEdWdGNIUWdkRzhnWTNKbFlYUmxJR0Z1SUc5aWMyVnlkbVZ5SUdsdWMzUmhibU5sSUdadmNpQmhJSFpoYkhWbExGeHVJQ29nY21WMGRYSnVjeUIwYUdVZ2JtVjNJRzlpYzJWeWRtVnlJR2xtSUhOMVkyTmxjM05tZFd4c2VTQnZZbk5sY25abFpDeGNiaUFxSUc5eUlIUm9aU0JsZUdsemRHbHVaeUJ2WW5ObGNuWmxjaUJwWmlCMGFHVWdkbUZzZFdVZ1lXeHlaV0ZrZVNCb1lYTWdiMjVsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ2WW5ObGNuWmxJQ2gyWVd4MVpTd2dZWE5TYjI5MFJHRjBZU2tnZTF4dUlDQnBaaUFvSVdselQySnFaV04wS0haaGJIVmxLU0I4ZkNCMllXeDFaU0JwYm5OMFlXNWpaVzltSUZaT2IyUmxLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmlBZ2RtRnlJRzlpTzF4dUlDQnBaaUFvYUdGelQzZHVLSFpoYkhWbExDQW5YMTl2WWw5Zkp5a2dKaVlnZG1Gc2RXVXVYMTl2WWw5ZklHbHVjM1JoYm1ObGIyWWdUMkp6WlhKMlpYSXBJSHRjYmlBZ0lDQnZZaUE5SUhaaGJIVmxMbDlmYjJKZlh6dGNiaUFnZlNCbGJITmxJR2xtSUNoY2JpQWdJQ0J2WW5ObGNuWmxjbE4wWVhSbExuTm9iM1ZzWkVOdmJuWmxjblFnSmlaY2JpQWdJQ0FoYVhOVFpYSjJaWEpTWlc1a1pYSnBibWNvS1NBbUpseHVJQ0FnSUNoQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkhWbEtTQjhmQ0JwYzFCc1lXbHVUMkpxWldOMEtIWmhiSFZsS1NrZ0ppWmNiaUFnSUNCUFltcGxZM1F1YVhORmVIUmxibk5wWW14bEtIWmhiSFZsS1NBbUpseHVJQ0FnSUNGMllXeDFaUzVmYVhOV2RXVmNiaUFnS1NCN1hHNGdJQ0FnYjJJZ1BTQnVaWGNnVDJKelpYSjJaWElvZG1Gc2RXVXBPMXh1SUNCOVhHNGdJR2xtSUNoaGMxSnZiM1JFWVhSaElDWW1JRzlpS1NCN1hHNGdJQ0FnYjJJdWRtMURiM1Z1ZENzck8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdllseHVmVnh1WEc0dktpcGNiaUFxSUVSbFptbHVaU0JoSUhKbFlXTjBhWFpsSUhCeWIzQmxjblI1SUc5dUlHRnVJRTlpYW1WamRDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1pHVm1hVzVsVW1WaFkzUnBkbVVnS0Z4dUlDQnZZbW9zWEc0Z0lHdGxlU3hjYmlBZ2RtRnNMRnh1SUNCamRYTjBiMjFUWlhSMFpYSXNYRzRnSUhOb1lXeHNiM2RjYmlrZ2UxeHVJQ0IyWVhJZ1pHVndJRDBnYm1WM0lFUmxjQ2dwTzF4dVhHNGdJSFpoY2lCd2NtOXdaWEowZVNBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvYjJKcUxDQnJaWGtwTzF4dUlDQnBaaUFvY0hKdmNHVnlkSGtnSmlZZ2NISnZjR1Z5ZEhrdVkyOXVabWxuZFhKaFlteGxJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc1Y2JpQWdMeThnWTJGMFpYSWdabTl5SUhCeVpTMWtaV1pwYm1Wa0lHZGxkSFJsY2k5elpYUjBaWEp6WEc0Z0lIWmhjaUJuWlhSMFpYSWdQU0J3Y205d1pYSjBlU0FtSmlCd2NtOXdaWEowZVM1blpYUTdYRzRnSUhaaGNpQnpaWFIwWlhJZ1BTQndjbTl3WlhKMGVTQW1KaUJ3Y205d1pYSjBlUzV6WlhRN1hHNWNiaUFnZG1GeUlHTm9hV3hrVDJJZ1BTQWhjMmhoYkd4dmR5QW1KaUJ2WW5ObGNuWmxLSFpoYkNrN1hHNGdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodlltb3NJR3RsZVN3Z2UxeHVJQ0FnSUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRnY21WaFkzUnBkbVZIWlhSMFpYSWdLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ1oyVjBkR1Z5SUQ4Z1oyVjBkR1Z5TG1OaGJHd29iMkpxS1NBNklIWmhiRHRjYmlBZ0lDQWdJR2xtSUNoRVpYQXVkR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQWdJR1JsY0M1a1pYQmxibVFvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR05vYVd4a1QySXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamFHbHNaRTlpTG1SbGNDNWtaWEJsYm1Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxjR1Z1WkVGeWNtRjVLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpWeHVJQ0FnSUgwc1hHNGdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpQnlaV0ZqZEdsMlpWTmxkSFJsY2lBb2JtVjNWbUZzS1NCN1hHNGdJQ0FnSUNCMllYSWdkbUZzZFdVZ1BTQm5aWFIwWlhJZ1B5Qm5aWFIwWlhJdVkyRnNiQ2h2WW1vcElEb2dkbUZzTzF4dUlDQWdJQ0FnTHlvZ1pYTnNhVzUwTFdScGMyRmliR1VnYm04dGMyVnNaaTFqYjIxd1lYSmxJQ292WEc0Z0lDQWdJQ0JwWmlBb2JtVjNWbUZzSUQwOVBTQjJZV3gxWlNCOGZDQW9ibVYzVm1Gc0lDRTlQU0J1WlhkV1lXd2dKaVlnZG1Gc2RXVWdJVDA5SUhaaGJIVmxLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJQzhxSUdWemJHbHVkQzFsYm1GaWJHVWdibTh0YzJWc1ppMWpiMjF3WVhKbElDb3ZYRzRnSUNBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQmpkWE4wYjIxVFpYUjBaWElwSUh0Y2JpQWdJQ0FnSUNBZ1kzVnpkRzl0VTJWMGRHVnlLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2MyVjBkR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lITmxkSFJsY2k1allXeHNLRzlpYWl3Z2JtVjNWbUZzS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhaaGJDQTlJRzVsZDFaaGJEdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHTm9hV3hrVDJJZ1BTQWhjMmhoYkd4dmR5QW1KaUJ2WW5ObGNuWmxLRzVsZDFaaGJDazdYRzRnSUNBZ0lDQmtaWEF1Ym05MGFXWjVLQ2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibjFjYmx4dUx5b3FYRzRnS2lCVFpYUWdZU0J3Y205d1pYSjBlU0J2YmlCaGJpQnZZbXBsWTNRdUlFRmtaSE1nZEdobElHNWxkeUJ3Y205d1pYSjBlU0JoYm1SY2JpQXFJSFJ5YVdkblpYSnpJR05vWVc1blpTQnViM1JwWm1sallYUnBiMjRnYVdZZ2RHaGxJSEJ5YjNCbGNuUjVJR1J2WlhOdUozUmNiaUFxSUdGc2NtVmhaSGtnWlhocGMzUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlITmxkQ0FvZEdGeVoyVjBMQ0JyWlhrc0lIWmhiQ2tnZTF4dUlDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaDBZWEpuWlhRcElDWW1JR2x6Vm1Gc2FXUkJjbkpoZVVsdVpHVjRLR3RsZVNrcElIdGNiaUFnSUNCMFlYSm5aWFF1YkdWdVozUm9JRDBnVFdGMGFDNXRZWGdvZEdGeVoyVjBMbXhsYm1kMGFDd2dhMlY1S1R0Y2JpQWdJQ0IwWVhKblpYUXVjM0JzYVdObEtHdGxlU3dnTVN3Z2RtRnNLVHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNYRzRnSUgxY2JpQWdhV1lnS0d0bGVTQnBiaUIwWVhKblpYUWdKaVlnSVNoclpYa2dhVzRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaU2twSUh0Y2JpQWdJQ0IwWVhKblpYUmJhMlY1WFNBOUlIWmhiRHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNYRzRnSUgxY2JpQWdkbUZ5SUc5aUlEMGdLSFJoY21kbGRDa3VYMTl2WWw5Zk8xeHVJQ0JwWmlBb2RHRnlaMlYwTGw5cGMxWjFaU0I4ZkNBb2IySWdKaVlnYjJJdWRtMURiM1Z1ZENrcElIdGNiaUFnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklDWW1JSGRoY200b1hHNGdJQ0FnSUNBblFYWnZhV1FnWVdSa2FXNW5JSEpsWVdOMGFYWmxJSEJ5YjNCbGNuUnBaWE1nZEc4Z1lTQldkV1VnYVc1emRHRnVZMlVnYjNJZ2FYUnpJSEp2YjNRZ0pHUmhkR0VnSnlBclhHNGdJQ0FnSUNBbllYUWdjblZ1ZEdsdFpTQXRJR1JsWTJ4aGNtVWdhWFFnZFhCbWNtOXVkQ0JwYmlCMGFHVWdaR0YwWVNCdmNIUnBiMjR1SjF4dUlDQWdJQ2s3WEc0Z0lDQWdjbVYwZFhKdUlIWmhiRnh1SUNCOVhHNGdJR2xtSUNnaGIySXBJSHRjYmlBZ0lDQjBZWEpuWlhSYmEyVjVYU0E5SUhaaGJEdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc1hHNGdJSDFjYmlBZ1pHVm1hVzVsVW1WaFkzUnBkbVVvYjJJdWRtRnNkV1VzSUd0bGVTd2dkbUZzS1R0Y2JpQWdiMkl1WkdWd0xtNXZkR2xtZVNncE8xeHVJQ0J5WlhSMWNtNGdkbUZzWEc1OVhHNWNiaThxS2x4dUlDb2dSR1ZzWlhSbElHRWdjSEp2Y0dWeWRIa2dZVzVrSUhSeWFXZG5aWElnWTJoaGJtZGxJR2xtSUc1bFkyVnpjMkZ5ZVM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWkdWc0lDaDBZWEpuWlhRc0lHdGxlU2tnZTF4dUlDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaDBZWEpuWlhRcElDWW1JR2x6Vm1Gc2FXUkJjbkpoZVVsdVpHVjRLR3RsZVNrcElIdGNiaUFnSUNCMFlYSm5aWFF1YzNCc2FXTmxLR3RsZVN3Z01TazdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNiaUFnZG1GeUlHOWlJRDBnS0hSaGNtZGxkQ2t1WDE5dllsOWZPMXh1SUNCcFppQW9kR0Z5WjJWMExsOXBjMVoxWlNCOGZDQW9iMklnSmlZZ2IySXVkbTFEYjNWdWRDa3BJSHRjYmlBZ0lDQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltSUhkaGNtNG9YRzRnSUNBZ0lDQW5RWFp2YVdRZ1pHVnNaWFJwYm1jZ2NISnZjR1Z5ZEdsbGN5QnZiaUJoSUZaMVpTQnBibk4wWVc1alpTQnZjaUJwZEhNZ2NtOXZkQ0FrWkdGMFlTQW5JQ3RjYmlBZ0lDQWdJQ2N0SUdwMWMzUWdjMlYwSUdsMElIUnZJRzUxYkd3dUoxeHVJQ0FnSUNrN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdhV1lnS0NGb1lYTlBkMjRvZEdGeVoyVjBMQ0JyWlhrcEtTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNiaUFnWkdWc1pYUmxJSFJoY21kbGRGdHJaWGxkTzF4dUlDQnBaaUFvSVc5aUtTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNiaUFnYjJJdVpHVndMbTV2ZEdsbWVTZ3BPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFTnZiR3hsWTNRZ1pHVndaVzVrWlc1amFXVnpJRzl1SUdGeWNtRjVJR1ZzWlcxbGJuUnpJSGRvWlc0Z2RHaGxJR0Z5Y21GNUlHbHpJSFJ2ZFdOb1pXUXNJSE5wYm1ObFhHNGdLaUIzWlNCallXNXViM1FnYVc1MFpYSmpaWEIwSUdGeWNtRjVJR1ZzWlcxbGJuUWdZV05qWlhOeklHeHBhMlVnY0hKdmNHVnlkSGtnWjJWMGRHVnljeTVjYmlBcUwxeHVablZ1WTNScGIyNGdaR1Z3Wlc1a1FYSnlZWGtnS0haaGJIVmxLU0I3WEc0Z0lHWnZjaUFvZG1GeUlHVWdQU0FvZG05cFpDQXdLU3dnYVNBOUlEQXNJR3dnUFNCMllXeDFaUzVzWlc1bmRHZzdJR2tnUENCc095QnBLeXNwSUh0Y2JpQWdJQ0JsSUQwZ2RtRnNkV1ZiYVYwN1hHNGdJQ0FnWlNBbUppQmxMbDlmYjJKZlh5QW1KaUJsTGw5ZmIySmZYeTVrWlhBdVpHVndaVzVrS0NrN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWlNrcElIdGNiaUFnSUNBZ0lHUmxjR1Z1WkVGeWNtRjVLR1VwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dUx5b3FYRzRnS2lCUGNIUnBiMjRnYjNabGNuZHlhWFJwYm1jZ2MzUnlZWFJsWjJsbGN5QmhjbVVnWm5WdVkzUnBiMjV6SUhSb1lYUWdhR0Z1Wkd4bFhHNGdLaUJvYjNjZ2RHOGdiV1Z5WjJVZ1lTQndZWEpsYm5RZ2IzQjBhVzl1SUhaaGJIVmxJR0Z1WkNCaElHTm9hV3hrSUc5d2RHbHZibHh1SUNvZ2RtRnNkV1VnYVc1MGJ5QjBhR1VnWm1sdVlXd2dkbUZzZFdVdVhHNGdLaTljYm5aaGNpQnpkSEpoZEhNZ1BTQmpiMjVtYVdjdWIzQjBhVzl1VFdWeVoyVlRkSEpoZEdWbmFXVnpPMXh1WEc0dktpcGNiaUFxSUU5d2RHbHZibk1nZDJsMGFDQnlaWE4wY21samRHbHZibk5jYmlBcUwxeHVhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnYzNSeVlYUnpMbVZzSUQwZ2MzUnlZWFJ6TG5CeWIzQnpSR0YwWVNBOUlHWjFibU4wYVc5dUlDaHdZWEpsYm5Rc0lHTm9hV3hrTENCMmJTd2dhMlY1S1NCN1hHNGdJQ0FnYVdZZ0tDRjJiU2tnZTF4dUlDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdYQ0p2Y0hScGIyNGdYRnhjSWx3aUlDc2dhMlY1SUNzZ1hDSmNYRndpSUdOaGJpQnZibXg1SUdKbElIVnpaV1FnWkhWeWFXNW5JR2x1YzNSaGJtTmxJRndpSUN0Y2JpQWdJQ0FnSUNBZ0oyTnlaV0YwYVc5dUlIZHBkR2dnZEdobElHQnVaWGRnSUd0bGVYZHZjbVF1SjF4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHUmxabUYxYkhSVGRISmhkQ2h3WVhKbGJuUXNJR05vYVd4a0tWeHVJQ0I5TzF4dWZWeHVYRzR2S2lwY2JpQXFJRWhsYkhCbGNpQjBhR0YwSUhKbFkzVnljMmwyWld4NUlHMWxjbWRsY3lCMGQyOGdaR0YwWVNCdlltcGxZM1J6SUhSdloyVjBhR1Z5TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ0WlhKblpVUmhkR0VnS0hSdkxDQm1jbTl0S1NCN1hHNGdJR2xtSUNnaFpuSnZiU2tnZXlCeVpYUjFjbTRnZEc4Z2ZWeHVJQ0IyWVhJZ2EyVjVMQ0IwYjFaaGJDd2dabkp2YlZaaGJEdGNiaUFnZG1GeUlHdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aG1jbTl0S1R0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JyWlhsekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdhMlY1SUQwZ2EyVjVjMXRwWFR0Y2JpQWdJQ0IwYjFaaGJDQTlJSFJ2VzJ0bGVWMDdYRzRnSUNBZ1puSnZiVlpoYkNBOUlHWnliMjFiYTJWNVhUdGNiaUFnSUNCcFppQW9JV2hoYzA5M2JpaDBieXdnYTJWNUtTa2dlMXh1SUNBZ0lDQWdjMlYwS0hSdkxDQnJaWGtzSUdaeWIyMVdZV3dwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYVhOUWJHRnBiazlpYW1WamRDaDBiMVpoYkNrZ0ppWWdhWE5RYkdGcGJrOWlhbVZqZENobWNtOXRWbUZzS1NrZ2UxeHVJQ0FnSUNBZ2JXVnlaMlZFWVhSaEtIUnZWbUZzTENCbWNtOXRWbUZzS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFJ2WEc1OVhHNWNiaThxS2x4dUlDb2dSR0YwWVZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJ0WlhKblpVUmhkR0ZQY2tadUlDaGNiaUFnY0dGeVpXNTBWbUZzTEZ4dUlDQmphR2xzWkZaaGJDeGNiaUFnZG0xY2Jpa2dlMXh1SUNCcFppQW9JWFp0S1NCN1hHNGdJQ0FnTHk4Z2FXNGdZU0JXZFdVdVpYaDBaVzVrSUcxbGNtZGxMQ0JpYjNSb0lITm9iM1ZzWkNCaVpTQm1kVzVqZEdsdmJuTmNiaUFnSUNCcFppQW9JV05vYVd4a1ZtRnNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjR0Z5Wlc1MFZtRnNYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDZ2hjR0Z5Wlc1MFZtRnNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMmhwYkdSV1lXeGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2QyaGxiaUJ3WVhKbGJuUldZV3dnSmlCamFHbHNaRlpoYkNCaGNtVWdZbTkwYUNCd2NtVnpaVzUwTEZ4dUlDQWdJQzh2SUhkbElHNWxaV1FnZEc4Z2NtVjBkWEp1SUdFZ1puVnVZM1JwYjI0Z2RHaGhkQ0J5WlhSMWNtNXpJSFJvWlZ4dUlDQWdJQzh2SUcxbGNtZGxaQ0J5WlhOMWJIUWdiMllnWW05MGFDQm1kVzVqZEdsdmJuTXVMaTRnYm04Z2JtVmxaQ0IwYjF4dUlDQWdJQzh2SUdOb1pXTnJJR2xtSUhCaGNtVnVkRlpoYkNCcGN5QmhJR1oxYm1OMGFXOXVJR2hsY21VZ1ltVmpZWFZ6WlZ4dUlDQWdJQzh2SUdsMElHaGhjeUIwYnlCaVpTQmhJR1oxYm1OMGFXOXVJSFJ2SUhCaGMzTWdjSEpsZG1sdmRYTWdiV1Z5WjJWekxseHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ0WlhKblpXUkVZWFJoUm00Z0tDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHMWxjbWRsUkdGMFlTaGNiaUFnSUNBZ0lDQWdkSGx3Wlc5bUlHTm9hV3hrVm1Gc0lEMDlQU0FuWm5WdVkzUnBiMjRuSUQ4Z1kyaHBiR1JXWVd3dVkyRnNiQ2gwYUdsekxDQjBhR2x6S1NBNklHTm9hV3hrVm1Gc0xGeHVJQ0FnSUNBZ0lDQjBlWEJsYjJZZ2NHRnlaVzUwVm1Gc0lEMDlQU0FuWm5WdVkzUnBiMjRuSUQ4Z2NHRnlaVzUwVm1Gc0xtTmhiR3dvZEdocGN5d2dkR2hwY3lrZ09pQndZWEpsYm5SV1lXeGNiaUFnSUNBZ0lDbGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUcxbGNtZGxaRWx1YzNSaGJtTmxSR0YwWVVadUlDZ3BJSHRjYmlBZ0lDQWdJQzh2SUdsdWMzUmhibU5sSUcxbGNtZGxYRzRnSUNBZ0lDQjJZWElnYVc1emRHRnVZMlZFWVhSaElEMGdkSGx3Wlc5bUlHTm9hV3hrVm1Gc0lEMDlQU0FuWm5WdVkzUnBiMjRuWEc0Z0lDQWdJQ0FnSUQ4Z1kyaHBiR1JXWVd3dVkyRnNiQ2gyYlN3Z2RtMHBYRzRnSUNBZ0lDQWdJRG9nWTJocGJHUldZV3c3WEc0Z0lDQWdJQ0IyWVhJZ1pHVm1ZWFZzZEVSaGRHRWdQU0IwZVhCbGIyWWdjR0Z5Wlc1MFZtRnNJRDA5UFNBblpuVnVZM1JwYjI0blhHNGdJQ0FnSUNBZ0lEOGdjR0Z5Wlc1MFZtRnNMbU5oYkd3b2RtMHNJSFp0S1Z4dUlDQWdJQ0FnSUNBNklIQmhjbVZ1ZEZaaGJEdGNiaUFnSUNBZ0lHbG1JQ2hwYm5OMFlXNWpaVVJoZEdFcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMWxjbWRsUkdGMFlTaHBibk4wWVc1alpVUmhkR0VzSUdSbFptRjFiSFJFWVhSaEtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSbFptRjFiSFJFWVhSaFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JuTjBjbUYwY3k1a1lYUmhJRDBnWm5WdVkzUnBiMjRnS0Z4dUlDQndZWEpsYm5SV1lXd3NYRzRnSUdOb2FXeGtWbUZzTEZ4dUlDQjJiVnh1S1NCN1hHNGdJR2xtSUNnaGRtMHBJSHRjYmlBZ0lDQnBaaUFvWTJocGJHUldZV3dnSmlZZ2RIbHdaVzltSUdOb2FXeGtWbUZzSUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUNZbUlIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNkVWFHVWdYQ0prWVhSaFhDSWdiM0IwYVc5dUlITm9iM1ZzWkNCaVpTQmhJR1oxYm1OMGFXOXVJQ2NnSzF4dUlDQWdJQ0FnSUNBbmRHaGhkQ0J5WlhSMWNtNXpJR0VnY0dWeUxXbHVjM1JoYm1ObElIWmhiSFZsSUdsdUlHTnZiWEJ2Ym1WdWRDQW5JQ3RjYmlBZ0lDQWdJQ0FnSjJSbFptbHVhWFJwYjI1ekxpY3NYRzRnSUNBZ0lDQWdJSFp0WEc0Z0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnY0dGeVpXNTBWbUZzWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdFpYSm5aVVJoZEdGUGNrWnVLSEJoY21WdWRGWmhiQ3dnWTJocGJHUldZV3dwWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYldWeVoyVkVZWFJoVDNKR2JpaHdZWEpsYm5SV1lXd3NJR05vYVd4a1ZtRnNMQ0IyYlNsY2JuMDdYRzVjYmk4cUtseHVJQ29nU0c5dmEzTWdZVzVrSUhCeWIzQnpJR0Z5WlNCdFpYSm5aV1FnWVhNZ1lYSnlZWGx6TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ0WlhKblpVaHZiMnNnS0Z4dUlDQndZWEpsYm5SV1lXd3NYRzRnSUdOb2FXeGtWbUZzWEc0cElIdGNiaUFnY21WMGRYSnVJR05vYVd4a1ZtRnNYRzRnSUNBZ1B5QndZWEpsYm5SV1lXeGNiaUFnSUNBZ0lEOGdjR0Z5Wlc1MFZtRnNMbU52Ym1OaGRDaGphR2xzWkZaaGJDbGNiaUFnSUNBZ0lEb2dRWEp5WVhrdWFYTkJjbkpoZVNoamFHbHNaRlpoYkNsY2JpQWdJQ0FnSUNBZ1B5QmphR2xzWkZaaGJGeHVJQ0FnSUNBZ0lDQTZJRnRqYUdsc1pGWmhiRjFjYmlBZ0lDQTZJSEJoY21WdWRGWmhiRnh1ZlZ4dVhHNU1TVVpGUTFsRFRFVmZTRTlQUzFNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2FHOXZheWtnZTF4dUlDQnpkSEpoZEhOYmFHOXZhMTBnUFNCdFpYSm5aVWh2YjJzN1hHNTlLVHRjYmx4dUx5b3FYRzRnS2lCQmMzTmxkSE5jYmlBcVhHNGdLaUJYYUdWdUlHRWdkbTBnYVhNZ2NISmxjMlZ1ZENBb2FXNXpkR0Z1WTJVZ1kzSmxZWFJwYjI0cExDQjNaU0J1WldWa0lIUnZJR1J2WEc0Z0tpQmhJSFJvY21WbExYZGhlU0J0WlhKblpTQmlaWFIzWldWdUlHTnZibk4wY25WamRHOXlJRzl3ZEdsdmJuTXNJR2x1YzNSaGJtTmxYRzRnS2lCdmNIUnBiMjV6SUdGdVpDQndZWEpsYm5RZ2IzQjBhVzl1Y3k1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYldWeVoyVkJjM05sZEhNZ0tGeHVJQ0J3WVhKbGJuUldZV3dzWEc0Z0lHTm9hV3hrVm1Gc0xGeHVJQ0IyYlN4Y2JpQWdhMlY1WEc0cElIdGNiaUFnZG1GeUlISmxjeUE5SUU5aWFtVmpkQzVqY21WaGRHVW9jR0Z5Wlc1MFZtRnNJSHg4SUc1MWJHd3BPMXh1SUNCcFppQW9ZMmhwYkdSV1lXd3BJSHRjYmlBZ0lDQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltSUdGemMyVnlkRTlpYW1WamRGUjVjR1VvYTJWNUxDQmphR2xzWkZaaGJDd2dkbTBwTzF4dUlDQWdJSEpsZEhWeWJpQmxlSFJsYm1Rb2NtVnpMQ0JqYUdsc1pGWmhiQ2xjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6WEc0Z0lIMWNibjFjYmx4dVFWTlRSVlJmVkZsUVJWTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9kSGx3WlNrZ2UxeHVJQ0J6ZEhKaGRITmJkSGx3WlNBcklDZHpKMTBnUFNCdFpYSm5aVUZ6YzJWMGN6dGNibjBwTzF4dVhHNHZLaXBjYmlBcUlGZGhkR05vWlhKekxseHVJQ3BjYmlBcUlGZGhkR05vWlhKeklHaGhjMmhsY3lCemFHOTFiR1FnYm05MElHOTJaWEozY21sMFpTQnZibVZjYmlBcUlHRnViM1JvWlhJc0lITnZJSGRsSUcxbGNtZGxJSFJvWlcwZ1lYTWdZWEp5WVhsekxseHVJQ292WEc1emRISmhkSE11ZDJGMFkyZ2dQU0JtZFc1amRHbHZiaUFvWEc0Z0lIQmhjbVZ1ZEZaaGJDeGNiaUFnWTJocGJHUldZV3dzWEc0Z0lIWnRMRnh1SUNCclpYbGNiaWtnZTF4dUlDQXZMeUIzYjNKcklHRnliM1Z1WkNCR2FYSmxabTk0SjNNZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1M1lYUmphQzR1TGx4dUlDQnBaaUFvY0dGeVpXNTBWbUZzSUQwOVBTQnVZWFJwZG1WWFlYUmphQ2tnZXlCd1lYSmxiblJXWVd3Z1BTQjFibVJsWm1sdVpXUTdJSDFjYmlBZ2FXWWdLR05vYVd4a1ZtRnNJRDA5UFNCdVlYUnBkbVZYWVhSamFDa2dleUJqYUdsc1pGWmhiQ0E5SUhWdVpHVm1hVzVsWkRzZ2ZWeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnYVdZZ0tDRmphR2xzWkZaaGJDa2dleUJ5WlhSMWNtNGdUMkpxWldOMExtTnlaV0YwWlNod1lYSmxiblJXWVd3Z2ZId2diblZzYkNrZ2ZWeHVJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lHRnpjMlZ5ZEU5aWFtVmpkRlI1Y0dVb2EyVjVMQ0JqYUdsc1pGWmhiQ3dnZG0wcE8xeHVJQ0I5WEc0Z0lHbG1JQ2doY0dGeVpXNTBWbUZzS1NCN0lISmxkSFZ5YmlCamFHbHNaRlpoYkNCOVhHNGdJSFpoY2lCeVpYUWdQU0I3ZlR0Y2JpQWdaWGgwWlc1a0tISmxkQ3dnY0dGeVpXNTBWbUZzS1R0Y2JpQWdabTl5SUNoMllYSWdhMlY1SkRFZ2FXNGdZMmhwYkdSV1lXd3BJSHRjYmlBZ0lDQjJZWElnY0dGeVpXNTBJRDBnY21WMFcydGxlU1F4WFR0Y2JpQWdJQ0IyWVhJZ1kyaHBiR1FnUFNCamFHbHNaRlpoYkZ0clpYa2tNVjA3WEc0Z0lDQWdhV1lnS0hCaGNtVnVkQ0FtSmlBaFFYSnlZWGt1YVhOQmNuSmhlU2h3WVhKbGJuUXBLU0I3WEc0Z0lDQWdJQ0J3WVhKbGJuUWdQU0JiY0dGeVpXNTBYVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBXMnRsZVNReFhTQTlJSEJoY21WdWRGeHVJQ0FnSUNBZ1B5QndZWEpsYm5RdVkyOXVZMkYwS0dOb2FXeGtLVnh1SUNBZ0lDQWdPaUJCY25KaGVTNXBjMEZ5Y21GNUtHTm9hV3hrS1NBL0lHTm9hV3hrSURvZ1cyTm9hV3hrWFR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WMFhHNTlPMXh1WEc0dktpcGNiaUFxSUU5MGFHVnlJRzlpYW1WamRDQm9ZWE5vWlhNdVhHNGdLaTljYm5OMGNtRjBjeTV3Y205d2N5QTlYRzV6ZEhKaGRITXViV1YwYUc5a2N5QTlYRzV6ZEhKaGRITXVhVzVxWldOMElEMWNibk4wY21GMGN5NWpiMjF3ZFhSbFpDQTlJR1oxYm1OMGFXOXVJQ2hjYmlBZ2NHRnlaVzUwVm1Gc0xGeHVJQ0JqYUdsc1pGWmhiQ3hjYmlBZ2RtMHNYRzRnSUd0bGVWeHVLU0I3WEc0Z0lHbG1JQ2hqYUdsc1pGWmhiQ0FtSmlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ1lYTnpaWEowVDJKcVpXTjBWSGx3WlNoclpYa3NJR05vYVd4a1ZtRnNMQ0IyYlNrN1hHNGdJSDFjYmlBZ2FXWWdLQ0Z3WVhKbGJuUldZV3dwSUhzZ2NtVjBkWEp1SUdOb2FXeGtWbUZzSUgxY2JpQWdkbUZ5SUhKbGRDQTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lHVjRkR1Z1WkNoeVpYUXNJSEJoY21WdWRGWmhiQ2s3WEc0Z0lHbG1JQ2hqYUdsc1pGWmhiQ2tnZXlCbGVIUmxibVFvY21WMExDQmphR2xzWkZaaGJDazdJSDFjYmlBZ2NtVjBkWEp1SUhKbGRGeHVmVHRjYm5OMGNtRjBjeTV3Y205MmFXUmxJRDBnYldWeVoyVkVZWFJoVDNKR2JqdGNibHh1THlvcVhHNGdLaUJFWldaaGRXeDBJSE4wY21GMFpXZDVMbHh1SUNvdlhHNTJZWElnWkdWbVlYVnNkRk4wY21GMElEMGdablZ1WTNScGIyNGdLSEJoY21WdWRGWmhiQ3dnWTJocGJHUldZV3dwSUh0Y2JpQWdjbVYwZFhKdUlHTm9hV3hrVm1Gc0lEMDlQU0IxYm1SbFptbHVaV1JjYmlBZ0lDQS9JSEJoY21WdWRGWmhiRnh1SUNBZ0lEb2dZMmhwYkdSV1lXeGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1ZtRnNhV1JoZEdVZ1kyOXRjRzl1Wlc1MElHNWhiV1Z6WEc0Z0tpOWNibVoxYm1OMGFXOXVJR05vWldOclEyOXRjRzl1Wlc1MGN5QW9iM0IwYVc5dWN5a2dlMXh1SUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYjNCMGFXOXVjeTVqYjIxd2IyNWxiblJ6S1NCN1hHNGdJQ0FnZG1Gc2FXUmhkR1ZEYjIxd2IyNWxiblJPWVcxbEtHdGxlU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2RtRnNhV1JoZEdWRGIyMXdiMjVsYm5ST1lXMWxJQ2h1WVcxbEtTQjdYRzRnSUdsbUlDZ2hMMTViWVMxNlFTMWFYVnRjWEhjdFhTb2tMeTUwWlhOMEtHNWhiV1VwS1NCN1hHNGdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDZEpiblpoYkdsa0lHTnZiWEJ2Ym1WdWRDQnVZVzFsT2lCY0lpY2dLeUJ1WVcxbElDc2dKMXdpTGlCRGIyMXdiMjVsYm5RZ2JtRnRaWE1nSnlBclhHNGdJQ0FnSUNBblkyRnVJRzl1YkhrZ1kyOXVkR0ZwYmlCaGJIQm9ZVzUxYldWeWFXTWdZMmhoY21GamRHVnljeUJoYm1RZ2RHaGxJR2g1Y0dobGJpd2dKeUFyWEc0Z0lDQWdJQ0FuWVc1a0lHMTFjM1FnYzNSaGNuUWdkMmwwYUNCaElHeGxkSFJsY2k0blhHNGdJQ0FnS1R0Y2JpQWdmVnh1SUNCcFppQW9hWE5DZFdsc2RFbHVWR0ZuS0c1aGJXVXBJSHg4SUdOdmJtWnBaeTVwYzFKbGMyVnlkbVZrVkdGbktHNWhiV1VwS1NCN1hHNGdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDZEVieUJ1YjNRZ2RYTmxJR0oxYVd4MExXbHVJRzl5SUhKbGMyVnlkbVZrSUVoVVRVd2daV3hsYldWdWRITWdZWE1nWTI5dGNHOXVaVzUwSUNjZ0sxeHVJQ0FnSUNBZ0oybGtPaUFuSUNzZ2JtRnRaVnh1SUNBZ0lDazdYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJGYm5OMWNtVWdZV3hzSUhCeWIzQnpJRzl3ZEdsdmJpQnplVzUwWVhnZ1lYSmxJRzV2Y20xaGJHbDZaV1FnYVc1MGJ5QjBhR1ZjYmlBcUlFOWlhbVZqZEMxaVlYTmxaQ0JtYjNKdFlYUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHNXZjbTFoYkdsNlpWQnliM0J6SUNodmNIUnBiMjV6TENCMmJTa2dlMXh1SUNCMllYSWdjSEp2Y0hNZ1BTQnZjSFJwYjI1ekxuQnliM0J6TzF4dUlDQnBaaUFvSVhCeWIzQnpLU0I3SUhKbGRIVnliaUI5WEc0Z0lIWmhjaUJ5WlhNZ1BTQjdmVHRjYmlBZ2RtRnlJR2tzSUhaaGJDd2dibUZ0WlR0Y2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29jSEp2Y0hNcEtTQjdYRzRnSUNBZ2FTQTlJSEJ5YjNCekxteGxibWQwYUR0Y2JpQWdJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnSUNCMllXd2dQU0J3Y205d2MxdHBYVHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZG1Gc0lEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNCdVlXMWxJRDBnWTJGdFpXeHBlbVVvZG1Gc0tUdGNiaUFnSUNBZ0lDQWdjbVZ6VzI1aGJXVmRJRDBnZXlCMGVYQmxPaUJ1ZFd4c0lIMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ2QyRnliaWduY0hKdmNITWdiWFZ6ZENCaVpTQnpkSEpwYm1keklIZG9aVzRnZFhOcGJtY2dZWEp5WVhrZ2MzbHVkR0Y0TGljcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2hwYzFCc1lXbHVUMkpxWldOMEtIQnliM0J6S1NrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ3Y205d2N5a2dlMXh1SUNBZ0lDQWdkbUZzSUQwZ2NISnZjSE5iYTJWNVhUdGNiaUFnSUNBZ0lHNWhiV1VnUFNCallXMWxiR2w2WlNoclpYa3BPMXh1SUNBZ0lDQWdjbVZ6VzI1aGJXVmRJRDBnYVhOUWJHRnBiazlpYW1WamRDaDJZV3dwWEc0Z0lDQWdJQ0FnSUQ4Z2RtRnNYRzRnSUNBZ0lDQWdJRG9nZXlCMGVYQmxPaUIyWVd3Z2ZUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQmNJa2x1ZG1Gc2FXUWdkbUZzZFdVZ1ptOXlJRzl3ZEdsdmJpQmNYRndpY0hKdmNITmNYRndpT2lCbGVIQmxZM1JsWkNCaGJpQkJjbkpoZVNCdmNpQmhiaUJQWW1wbFkzUXNJRndpSUN0Y2JpQWdJQ0FnSUZ3aVluVjBJR2R2ZENCY0lpQXJJQ2gwYjFKaGQxUjVjR1VvY0hKdmNITXBLU0FySUZ3aUxsd2lMRnh1SUNBZ0lDQWdkbTFjYmlBZ0lDQXBPMXh1SUNCOVhHNGdJRzl3ZEdsdmJuTXVjSEp2Y0hNZ1BTQnlaWE03WEc1OVhHNWNiaThxS2x4dUlDb2dUbTl5YldGc2FYcGxJR0ZzYkNCcGJtcGxZM1JwYjI1eklHbHVkRzhnVDJKcVpXTjBMV0poYzJWa0lHWnZjbTFoZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJ1YjNKdFlXeHBlbVZKYm1wbFkzUWdLRzl3ZEdsdmJuTXNJSFp0S1NCN1hHNGdJSFpoY2lCcGJtcGxZM1FnUFNCdmNIUnBiMjV6TG1sdWFtVmpkRHRjYmlBZ2FXWWdLQ0ZwYm1wbFkzUXBJSHNnY21WMGRYSnVJSDFjYmlBZ2RtRnlJRzV2Y20xaGJHbDZaV1FnUFNCdmNIUnBiMjV6TG1sdWFtVmpkQ0E5SUh0OU8xeHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hwYm1wbFkzUXBLU0I3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JwYm1wbFkzUXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUc1dmNtMWhiR2w2WldSYmFXNXFaV04wVzJsZFhTQTlJSHNnWm5KdmJUb2dhVzVxWldOMFcybGRJSDA3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tHbHpVR3hoYVc1UFltcGxZM1FvYVc1cVpXTjBLU2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQnBibXBsWTNRcElIdGNiaUFnSUNBZ0lIWmhjaUIyWVd3Z1BTQnBibXBsWTNSYmEyVjVYVHRjYmlBZ0lDQWdJRzV2Y20xaGJHbDZaV1JiYTJWNVhTQTlJR2x6VUd4aGFXNVBZbXBsWTNRb2RtRnNLVnh1SUNBZ0lDQWdJQ0EvSUdWNGRHVnVaQ2g3SUdaeWIyMDZJR3RsZVNCOUxDQjJZV3dwWEc0Z0lDQWdJQ0FnSURvZ2V5Qm1jbTl0T2lCMllXd2dmVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0JjSWtsdWRtRnNhV1FnZG1Gc2RXVWdabTl5SUc5d2RHbHZiaUJjWEZ3aWFXNXFaV04wWEZ4Y0lqb2daWGh3WldOMFpXUWdZVzRnUVhKeVlYa2diM0lnWVc0Z1QySnFaV04wTENCY0lpQXJYRzRnSUNBZ0lDQmNJbUoxZENCbmIzUWdYQ0lnS3lBb2RHOVNZWGRVZVhCbEtHbHVhbVZqZENrcElDc2dYQ0l1WENJc1hHNGdJQ0FnSUNCMmJWeHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQk9iM0p0WVd4cGVtVWdjbUYzSUdaMWJtTjBhVzl1SUdScGNtVmpkR2wyWlhNZ2FXNTBieUJ2WW1wbFkzUWdabTl5YldGMExseHVJQ292WEc1bWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WRWFYSmxZM1JwZG1WeklDaHZjSFJwYjI1ektTQjdYRzRnSUhaaGNpQmthWEp6SUQwZ2IzQjBhVzl1Y3k1a2FYSmxZM1JwZG1Wek8xeHVJQ0JwWmlBb1pHbHljeWtnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQmthWEp6S1NCN1hHNGdJQ0FnSUNCMllYSWdaR1ZtSUQwZ1pHbHljMXRyWlhsZE8xeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmtaV1lnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnWkdseWMxdHJaWGxkSUQwZ2V5QmlhVzVrT2lCa1pXWXNJSFZ3WkdGMFpUb2daR1ZtSUgwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRnpjMlZ5ZEU5aWFtVmpkRlI1Y0dVZ0tHNWhiV1VzSUhaaGJIVmxMQ0IyYlNrZ2UxeHVJQ0JwWmlBb0lXbHpVR3hoYVc1UFltcGxZM1FvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUZ3aVNXNTJZV3hwWkNCMllXeDFaU0JtYjNJZ2IzQjBhVzl1SUZ4Y1hDSmNJaUFySUc1aGJXVWdLeUJjSWx4Y1hDSTZJR1Y0Y0dWamRHVmtJR0Z1SUU5aWFtVmpkQ3dnWENJZ0sxeHVJQ0FnSUNBZ1hDSmlkWFFnWjI5MElGd2lJQ3NnS0hSdlVtRjNWSGx3WlNoMllXeDFaU2twSUNzZ1hDSXVYQ0lzWEc0Z0lDQWdJQ0IyYlZ4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCTlpYSm5aU0IwZDI4Z2IzQjBhVzl1SUc5aWFtVmpkSE1nYVc1MGJ5QmhJRzVsZHlCdmJtVXVYRzRnS2lCRGIzSmxJSFYwYVd4cGRIa2dkWE5sWkNCcGJpQmliM1JvSUdsdWMzUmhiblJwWVhScGIyNGdZVzVrSUdsdWFHVnlhWFJoYm1ObExseHVJQ292WEc1bWRXNWpkR2x2YmlCdFpYSm5aVTl3ZEdsdmJuTWdLRnh1SUNCd1lYSmxiblFzWEc0Z0lHTm9hV3hrTEZ4dUlDQjJiVnh1S1NCN1hHNGdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ1kyaGxZMnREYjIxd2IyNWxiblJ6S0dOb2FXeGtLVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyaHBiR1FnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQmphR2xzWkNBOUlHTm9hV3hrTG05d2RHbHZibk03WEc0Z0lIMWNibHh1SUNCdWIzSnRZV3hwZW1WUWNtOXdjeWhqYUdsc1pDd2dkbTBwTzF4dUlDQnViM0p0WVd4cGVtVkpibXBsWTNRb1kyaHBiR1FzSUhadEtUdGNiaUFnYm05eWJXRnNhWHBsUkdseVpXTjBhWFpsY3loamFHbHNaQ2s3WEc0Z0lIWmhjaUJsZUhSbGJtUnpSbkp2YlNBOUlHTm9hV3hrTG1WNGRHVnVaSE03WEc0Z0lHbG1JQ2hsZUhSbGJtUnpSbkp2YlNrZ2UxeHVJQ0FnSUhCaGNtVnVkQ0E5SUcxbGNtZGxUM0IwYVc5dWN5aHdZWEpsYm5Rc0lHVjRkR1Z1WkhOR2NtOXRMQ0IyYlNrN1hHNGdJSDFjYmlBZ2FXWWdLR05vYVd4a0xtMXBlR2x1Y3lrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1kyaHBiR1F1YldsNGFXNXpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnY0dGeVpXNTBJRDBnYldWeVoyVlBjSFJwYjI1ektIQmhjbVZ1ZEN3Z1kyaHBiR1F1YldsNGFXNXpXMmxkTENCMmJTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIWmhjaUJ2Y0hScGIyNXpJRDBnZTMwN1hHNGdJSFpoY2lCclpYazdYRzRnSUdadmNpQW9hMlY1SUdsdUlIQmhjbVZ1ZENrZ2UxeHVJQ0FnSUcxbGNtZGxSbWxsYkdRb2EyVjVLVHRjYmlBZ2ZWeHVJQ0JtYjNJZ0tHdGxlU0JwYmlCamFHbHNaQ2tnZTF4dUlDQWdJR2xtSUNnaGFHRnpUM2R1S0hCaGNtVnVkQ3dnYTJWNUtTa2dlMXh1SUNBZ0lDQWdiV1Z5WjJWR2FXVnNaQ2hyWlhrcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCbWRXNWpkR2x2YmlCdFpYSm5aVVpwWld4a0lDaHJaWGtwSUh0Y2JpQWdJQ0IyWVhJZ2MzUnlZWFFnUFNCemRISmhkSE5iYTJWNVhTQjhmQ0JrWldaaGRXeDBVM1J5WVhRN1hHNGdJQ0FnYjNCMGFXOXVjMXRyWlhsZElEMGdjM1J5WVhRb2NHRnlaVzUwVzJ0bGVWMHNJR05vYVd4a1cydGxlVjBzSUhadExDQnJaWGtwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ2Y0hScGIyNXpYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVnpiMngyWlNCaGJpQmhjM05sZEM1Y2JpQXFJRlJvYVhNZ1puVnVZM1JwYjI0Z2FYTWdkWE5sWkNCaVpXTmhkWE5sSUdOb2FXeGtJR2x1YzNSaGJtTmxjeUJ1WldWa0lHRmpZMlZ6YzF4dUlDb2dkRzhnWVhOelpYUnpJR1JsWm1sdVpXUWdhVzRnYVhSeklHRnVZMlZ6ZEc5eUlHTm9ZV2x1TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ5WlhOdmJIWmxRWE56WlhRZ0tGeHVJQ0J2Y0hScGIyNXpMRnh1SUNCMGVYQmxMRnh1SUNCcFpDeGNiaUFnZDJGeWJrMXBjM05wYm1kY2Jpa2dlMXh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2FXWWdLSFI1Y0dWdlppQnBaQ0FoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVJQ0IyWVhJZ1lYTnpaWFJ6SUQwZ2IzQjBhVzl1YzF0MGVYQmxYVHRjYmlBZ0x5OGdZMmhsWTJzZ2JHOWpZV3dnY21WbmFYTjBjbUYwYVc5dUlIWmhjbWxoZEdsdmJuTWdabWx5YzNSY2JpQWdhV1lnS0doaGMwOTNiaWhoYzNObGRITXNJR2xrS1NrZ2V5QnlaWFIxY200Z1lYTnpaWFJ6VzJsa1hTQjlYRzRnSUhaaGNpQmpZVzFsYkdsNlpXUkpaQ0E5SUdOaGJXVnNhWHBsS0dsa0tUdGNiaUFnYVdZZ0tHaGhjMDkzYmloaGMzTmxkSE1zSUdOaGJXVnNhWHBsWkVsa0tTa2dleUJ5WlhSMWNtNGdZWE56WlhSelcyTmhiV1ZzYVhwbFpFbGtYU0I5WEc0Z0lIWmhjaUJRWVhOallXeERZWE5sU1dRZ1BTQmpZWEJwZEdGc2FYcGxLR05oYldWc2FYcGxaRWxrS1R0Y2JpQWdhV1lnS0doaGMwOTNiaWhoYzNObGRITXNJRkJoYzJOaGJFTmhjMlZKWkNrcElIc2djbVYwZFhKdUlHRnpjMlYwYzF0UVlYTmpZV3hEWVhObFNXUmRJSDFjYmlBZ0x5OGdabUZzYkdKaFkyc2dkRzhnY0hKdmRHOTBlWEJsSUdOb1lXbHVYRzRnSUhaaGNpQnlaWE1nUFNCaGMzTmxkSE5iYVdSZElIeDhJR0Z6YzJWMGMxdGpZVzFsYkdsNlpXUkpaRjBnZkh3Z1lYTnpaWFJ6VzFCaGMyTmhiRU5oYzJWSlpGMDdYRzRnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltSUhkaGNtNU5hWE56YVc1bklDWW1JQ0Z5WlhNcElIdGNiaUFnSUNCM1lYSnVLRnh1SUNBZ0lDQWdKMFpoYVd4bFpDQjBieUJ5WlhOdmJIWmxJQ2NnS3lCMGVYQmxMbk5zYVdObEtEQXNJQzB4S1NBcklDYzZJQ2NnS3lCcFpDeGNiaUFnSUNBZ0lHOXdkR2x2Ym5OY2JpQWdJQ0FwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOY2JuMWNibHh1THlvZ0lDb3ZYRzVjYm1aMWJtTjBhVzl1SUhaaGJHbGtZWFJsVUhKdmNDQW9YRzRnSUd0bGVTeGNiaUFnY0hKdmNFOXdkR2x2Ym5Nc1hHNGdJSEJ5YjNCelJHRjBZU3hjYmlBZ2RtMWNiaWtnZTF4dUlDQjJZWElnY0hKdmNDQTlJSEJ5YjNCUGNIUnBiMjV6VzJ0bGVWMDdYRzRnSUhaaGNpQmhZbk5sYm5RZ1BTQWhhR0Z6VDNkdUtIQnliM0J6UkdGMFlTd2dhMlY1S1R0Y2JpQWdkbUZ5SUhaaGJIVmxJRDBnY0hKdmNITkVZWFJoVzJ0bGVWMDdYRzRnSUM4dklHaGhibVJzWlNCaWIyOXNaV0Z1SUhCeWIzQnpYRzRnSUdsbUlDaHBjMVI1Y0dVb1FtOXZiR1ZoYml3Z2NISnZjQzUwZVhCbEtTa2dlMXh1SUNBZ0lHbG1JQ2hoWW5ObGJuUWdKaVlnSVdoaGMwOTNiaWh3Y205d0xDQW5aR1ZtWVhWc2RDY3BLU0I3WEc0Z0lDQWdJQ0IyWVd4MVpTQTlJR1poYkhObE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb0lXbHpWSGx3WlNoVGRISnBibWNzSUhCeWIzQXVkSGx3WlNrZ0ppWWdLSFpoYkhWbElEMDlQU0FuSnlCOGZDQjJZV3gxWlNBOVBUMGdhSGx3YUdWdVlYUmxLR3RsZVNrcEtTQjdYRzRnSUNBZ0lDQjJZV3gxWlNBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJQzh2SUdOb1pXTnJJR1JsWm1GMWJIUWdkbUZzZFdWY2JpQWdhV1lnS0haaGJIVmxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCMllXeDFaU0E5SUdkbGRGQnliM0JFWldaaGRXeDBWbUZzZFdVb2RtMHNJSEJ5YjNBc0lHdGxlU2s3WEc0Z0lDQWdMeThnYzJsdVkyVWdkR2hsSUdSbFptRjFiSFFnZG1Gc2RXVWdhWE1nWVNCbWNtVnphQ0JqYjNCNUxGeHVJQ0FnSUM4dklHMWhhMlVnYzNWeVpTQjBieUJ2WW5ObGNuWmxJR2wwTGx4dUlDQWdJSFpoY2lCd2NtVjJVMmh2ZFd4a1EyOXVkbVZ5ZENBOUlHOWljMlZ5ZG1WeVUzUmhkR1V1YzJodmRXeGtRMjl1ZG1WeWREdGNiaUFnSUNCdlluTmxjblpsY2xOMFlYUmxMbk5vYjNWc1pFTnZiblpsY25RZ1BTQjBjblZsTzF4dUlDQWdJRzlpYzJWeWRtVW9kbUZzZFdVcE8xeHVJQ0FnSUc5aWMyVnlkbVZ5VTNSaGRHVXVjMmh2ZFd4a1EyOXVkbVZ5ZENBOUlIQnlaWFpUYUc5MWJHUkRiMjUyWlhKME8xeHVJQ0I5WEc0Z0lHbG1JQ2hjYmlBZ0lDQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltWEc0Z0lDQWdMeThnYzJ0cGNDQjJZV3hwWkdGMGFXOXVJR1p2Y2lCM1pXVjRJSEpsWTNsamJHVXRiR2x6ZENCamFHbHNaQ0JqYjIxd2IyNWxiblFnY0hKdmNITmNiaUFnSUNBaEtHWmhiSE5sSUNZbUlHbHpUMkpxWldOMEtIWmhiSFZsS1NBbUppQW9KMEJpYVc1a2FXNW5KeUJwYmlCMllXeDFaU2twWEc0Z0lDa2dlMXh1SUNBZ0lHRnpjMlZ5ZEZCeWIzQW9jSEp2Y0N3Z2EyVjVMQ0IyWVd4MVpTd2dkbTBzSUdGaWMyVnVkQ2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFpoYkhWbFhHNTlYRzVjYmk4cUtseHVJQ29nUjJWMElIUm9aU0JrWldaaGRXeDBJSFpoYkhWbElHOW1JR0VnY0hKdmNDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBVSEp2Y0VSbFptRjFiSFJXWVd4MVpTQW9kbTBzSUhCeWIzQXNJR3RsZVNrZ2UxeHVJQ0F2THlCdWJ5QmtaV1poZFd4MExDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa1hHNGdJR2xtSUNnaGFHRnpUM2R1S0hCeWIzQXNJQ2RrWldaaGRXeDBKeWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkVzVrWldacGJtVmtYRzRnSUgxY2JpQWdkbUZ5SUdSbFppQTlJSEJ5YjNBdVpHVm1ZWFZzZER0Y2JpQWdMeThnZDJGeWJpQmhaMkZwYm5OMElHNXZiaTFtWVdOMGIzSjVJR1JsWm1GMWJIUnpJR1p2Y2lCUFltcGxZM1FnSmlCQmNuSmhlVnh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCcGMwOWlhbVZqZENoa1pXWXBLU0I3WEc0Z0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUNkSmJuWmhiR2xrSUdSbFptRjFiSFFnZG1Gc2RXVWdabTl5SUhCeWIzQWdYQ0luSUNzZ2EyVjVJQ3NnSjF3aU9pQW5JQ3RjYmlBZ0lDQWdJQ2RRY205d2N5QjNhWFJvSUhSNWNHVWdUMkpxWldOMEwwRnljbUY1SUcxMWMzUWdkWE5sSUdFZ1ptRmpkRzl5ZVNCbWRXNWpkR2x2YmlBbklDdGNiaUFnSUNBZ0lDZDBieUJ5WlhSMWNtNGdkR2hsSUdSbFptRjFiSFFnZG1Gc2RXVXVKeXhjYmlBZ0lDQWdJSFp0WEc0Z0lDQWdLVHRjYmlBZ2ZWeHVJQ0F2THlCMGFHVWdjbUYzSUhCeWIzQWdkbUZzZFdVZ2QyRnpJR0ZzYzI4Z2RXNWtaV1pwYm1Wa0lHWnliMjBnY0hKbGRtbHZkWE1nY21WdVpHVnlMRnh1SUNBdkx5QnlaWFIxY200Z2NISmxkbWx2ZFhNZ1pHVm1ZWFZzZENCMllXeDFaU0IwYnlCaGRtOXBaQ0IxYm01bFkyVnpjMkZ5ZVNCM1lYUmphR1Z5SUhSeWFXZG5aWEpjYmlBZ2FXWWdLSFp0SUNZbUlIWnRMaVJ2Y0hScGIyNXpMbkJ5YjNCelJHRjBZU0FtSmx4dUlDQWdJSFp0TGlSdmNIUnBiMjV6TG5CeWIzQnpSR0YwWVZ0clpYbGRJRDA5UFNCMWJtUmxabWx1WldRZ0ppWmNiaUFnSUNCMmJTNWZjSEp2Y0hOYmEyVjVYU0FoUFQwZ2RXNWtaV1pwYm1Wa1hHNGdJQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjJiUzVmY0hKdmNITmJhMlY1WFZ4dUlDQjlYRzRnSUM4dklHTmhiR3dnWm1GamRHOXllU0JtZFc1amRHbHZiaUJtYjNJZ2JtOXVMVVoxYm1OMGFXOXVJSFI1Y0dWelhHNGdJQzh2SUdFZ2RtRnNkV1VnYVhNZ1JuVnVZM1JwYjI0Z2FXWWdhWFJ6SUhCeWIzUnZkSGx3WlNCcGN5Qm1kVzVqZEdsdmJpQmxkbVZ1SUdGamNtOXpjeUJrYVdabVpYSmxiblFnWlhobFkzVjBhVzl1SUdOdmJuUmxlSFJjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJrWldZZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ1oyVjBWSGx3WlNod2NtOXdMblI1Y0dVcElDRTlQU0FuUm5WdVkzUnBiMjRuWEc0Z0lDQWdQeUJrWldZdVkyRnNiQ2gyYlNsY2JpQWdJQ0E2SUdSbFpseHVmVnh1WEc0dktpcGNiaUFxSUVGemMyVnlkQ0IzYUdWMGFHVnlJR0VnY0hKdmNDQnBjeUIyWVd4cFpDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1lYTnpaWEowVUhKdmNDQW9YRzRnSUhCeWIzQXNYRzRnSUc1aGJXVXNYRzRnSUhaaGJIVmxMRnh1SUNCMmJTeGNiaUFnWVdKelpXNTBYRzRwSUh0Y2JpQWdhV1lnS0hCeWIzQXVjbVZ4ZFdseVpXUWdKaVlnWVdKelpXNTBLU0I3WEc0Z0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUNkTmFYTnphVzVuSUhKbGNYVnBjbVZrSUhCeWIzQTZJRndpSnlBcklHNWhiV1VnS3lBblhDSW5MRnh1SUNBZ0lDQWdkbTFjYmlBZ0lDQXBPMXh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzRnSUdsbUlDaDJZV3gxWlNBOVBTQnVkV3hzSUNZbUlDRndjbTl3TG5KbGNYVnBjbVZrS1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdkbUZ5SUhSNWNHVWdQU0J3Y205d0xuUjVjR1U3WEc0Z0lIWmhjaUIyWVd4cFpDQTlJQ0YwZVhCbElIeDhJSFI1Y0dVZ1BUMDlJSFJ5ZFdVN1hHNGdJSFpoY2lCbGVIQmxZM1JsWkZSNWNHVnpJRDBnVzEwN1hHNGdJR2xtSUNoMGVYQmxLU0I3WEc0Z0lDQWdhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLSFI1Y0dVcEtTQjdYRzRnSUNBZ0lDQjBlWEJsSUQwZ1czUjVjR1ZkTzF4dUlDQWdJSDFjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFI1Y0dVdWJHVnVaM1JvSUNZbUlDRjJZV3hwWkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1lYTnpaWEowWldSVWVYQmxJRDBnWVhOelpYSjBWSGx3WlNoMllXeDFaU3dnZEhsd1pWdHBYU2s3WEc0Z0lDQWdJQ0JsZUhCbFkzUmxaRlI1Y0dWekxuQjFjMmdvWVhOelpYSjBaV1JVZVhCbExtVjRjR1ZqZEdWa1ZIbHdaU0I4ZkNBbkp5azdYRzRnSUNBZ0lDQjJZV3hwWkNBOUlHRnpjMlZ5ZEdWa1ZIbHdaUzUyWVd4cFpEdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2FXWWdLQ0YyWVd4cFpDa2dlMXh1SUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0JjSWtsdWRtRnNhV1FnY0hKdmNEb2dkSGx3WlNCamFHVmpheUJtWVdsc1pXUWdabTl5SUhCeWIzQWdYRnhjSWx3aUlDc2dibUZ0WlNBcklGd2lYRnhjSWk1Y0lpQXJYRzRnSUNBZ0lDQmNJaUJGZUhCbFkzUmxaQ0JjSWlBcklDaGxlSEJsWTNSbFpGUjVjR1Z6TG0xaGNDaGpZWEJwZEdGc2FYcGxLUzVxYjJsdUtDY3NJQ2NwS1NBclhHNGdJQ0FnSUNCY0lpd2daMjkwSUZ3aUlDc2dLSFJ2VW1GM1ZIbHdaU2gyWVd4MVpTa3BJQ3NnWENJdVhDSXNYRzRnSUNBZ0lDQjJiVnh1SUNBZ0lDazdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNiaUFnZG1GeUlIWmhiR2xrWVhSdmNpQTlJSEJ5YjNBdWRtRnNhV1JoZEc5eU8xeHVJQ0JwWmlBb2RtRnNhV1JoZEc5eUtTQjdYRzRnSUNBZ2FXWWdLQ0YyWVd4cFpHRjBiM0lvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0lDQW5TVzUyWVd4cFpDQndjbTl3T2lCamRYTjBiMjBnZG1Gc2FXUmhkRzl5SUdOb1pXTnJJR1poYVd4bFpDQm1iM0lnY0hKdmNDQmNJaWNnS3lCdVlXMWxJQ3NnSjF3aUxpY3NYRzRnSUNBZ0lDQWdJSFp0WEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1MllYSWdjMmx0Y0d4bFEyaGxZMnRTUlNBOUlDOWVLRk4wY21sdVozeE9kVzFpWlhKOFFtOXZiR1ZoYm54R2RXNWpkR2x2Ym54VGVXMWliMndwSkM4N1hHNWNibVoxYm1OMGFXOXVJR0Z6YzJWeWRGUjVjR1VnS0haaGJIVmxMQ0IwZVhCbEtTQjdYRzRnSUhaaGNpQjJZV3hwWkR0Y2JpQWdkbUZ5SUdWNGNHVmpkR1ZrVkhsd1pTQTlJR2RsZEZSNWNHVW9kSGx3WlNrN1hHNGdJR2xtSUNoemFXMXdiR1ZEYUdWamExSkZMblJsYzNRb1pYaHdaV04wWldSVWVYQmxLU2tnZTF4dUlDQWdJSFpoY2lCMElEMGdkSGx3Wlc5bUlIWmhiSFZsTzF4dUlDQWdJSFpoYkdsa0lEMGdkQ0E5UFQwZ1pYaHdaV04wWldSVWVYQmxMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNGdJQ0FnTHk4Z1ptOXlJSEJ5YVcxcGRHbDJaU0IzY21Gd2NHVnlJRzlpYW1WamRITmNiaUFnSUNCcFppQW9JWFpoYkdsa0lDWW1JSFFnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQjJZV3hwWkNBOUlIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ2RIbHdaVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb1pYaHdaV04wWldSVWVYQmxJRDA5UFNBblQySnFaV04wSnlrZ2UxeHVJQ0FnSUhaaGJHbGtJRDBnYVhOUWJHRnBiazlpYW1WamRDaDJZV3gxWlNrN1hHNGdJSDBnWld4elpTQnBaaUFvWlhod1pXTjBaV1JVZVhCbElEMDlQU0FuUVhKeVlYa25LU0I3WEc0Z0lDQWdkbUZzYVdRZ1BTQkJjbkpoZVM1cGMwRnljbUY1S0haaGJIVmxLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVd4cFpDQTlJSFpoYkhWbElHbHVjM1JoYm1ObGIyWWdkSGx3WlR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSFpoYkdsa09pQjJZV3hwWkN4Y2JpQWdJQ0JsZUhCbFkzUmxaRlI1Y0dVNklHVjRjR1ZqZEdWa1ZIbHdaVnh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nVlhObElHWjFibU4wYVc5dUlITjBjbWx1WnlCdVlXMWxJSFJ2SUdOb1pXTnJJR0oxYVd4MExXbHVJSFI1Y0dWekxGeHVJQ29nWW1WallYVnpaU0JoSUhOcGJYQnNaU0JsY1hWaGJHbDBlU0JqYUdWamF5QjNhV3hzSUdaaGFXd2dkMmhsYmlCeWRXNXVhVzVuWEc0Z0tpQmhZM0p2YzNNZ1pHbG1abVZ5Wlc1MElIWnRjeUF2SUdsbWNtRnRaWE11WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2RsZEZSNWNHVWdLR1p1S1NCN1hHNGdJSFpoY2lCdFlYUmphQ0E5SUdadUlDWW1JR1p1TG5SdlUzUnlhVzVuS0NrdWJXRjBZMmdvTDE1Y1hITXFablZ1WTNScGIyNGdLRnhjZHlzcEx5azdYRzRnSUhKbGRIVnliaUJ0WVhSamFDQS9JRzFoZEdOb1d6RmRJRG9nSnlkY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVhOVWVYQmxJQ2gwZVhCbExDQm1iaWtnZTF4dUlDQnBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa29abTRwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR2RsZEZSNWNHVW9abTRwSUQwOVBTQm5aWFJVZVhCbEtIUjVjR1VwWEc0Z0lIMWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYmlBOUlHWnVMbXhsYm1kMGFEc2dhU0E4SUd4bGJqc2dhU3NyS1NCN1hHNGdJQ0FnYVdZZ0tHZGxkRlI1Y0dVb1ptNWJhVjBwSUQwOVBTQm5aWFJVZVhCbEtIUjVjR1VwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpWeHVJQ0FnSUgxY2JpQWdmVnh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2JtVjRkQ0FxTDF4dUlDQnlaWFIxY200Z1ptRnNjMlZjYm4xY2JseHVMeW9nSUNvdlhHNWNibVoxYm1OMGFXOXVJR2hoYm1Sc1pVVnljbTl5SUNobGNuSXNJSFp0TENCcGJtWnZLU0I3WEc0Z0lHbG1JQ2gyYlNrZ2UxeHVJQ0FnSUhaaGNpQmpkWElnUFNCMmJUdGNiaUFnSUNCM2FHbHNaU0FvS0dOMWNpQTlJR04xY2k0a2NHRnlaVzUwS1NrZ2UxeHVJQ0FnSUNBZ2RtRnlJR2h2YjJ0eklEMGdZM1Z5TGlSdmNIUnBiMjV6TG1WeWNtOXlRMkZ3ZEhWeVpXUTdYRzRnSUNBZ0lDQnBaaUFvYUc5dmEzTXBJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCb2IyOXJjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyRndkSFZ5WlNBOUlHaHZiMnR6VzJsZExtTmhiR3dvWTNWeUxDQmxjbklzSUhadExDQnBibVp2S1NBOVBUMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyRndkSFZ5WlNrZ2V5QnlaWFIxY200Z2ZWeHVJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RzYjJKaGJFaGhibVJzWlVWeWNtOXlLR1VzSUdOMWNpd2dKMlZ5Y205eVEyRndkSFZ5WldRZ2FHOXZheWNwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQm5iRzlpWVd4SVlXNWtiR1ZGY25KdmNpaGxjbklzSUhadExDQnBibVp2S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJ4dlltRnNTR0Z1Wkd4bFJYSnliM0lnS0dWeWNpd2dkbTBzSUdsdVptOHBJSHRjYmlBZ2FXWWdLR052Ym1acFp5NWxjbkp2Y2toaGJtUnNaWElwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJtWnBaeTVsY25KdmNraGhibVJzWlhJdVkyRnNiQ2h1ZFd4c0xDQmxjbklzSUhadExDQnBibVp2S1Z4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUd4dlowVnljbTl5S0dVc0lHNTFiR3dzSUNkamIyNW1hV2N1WlhKeWIzSklZVzVrYkdWeUp5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHeHZaMFZ5Y205eUtHVnljaXdnZG0wc0lHbHVabThwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJzYjJkRmNuSnZjaUFvWlhKeUxDQjJiU3dnYVc1bWJ5a2dlMXh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJSGRoY200b0tGd2lSWEp5YjNJZ2FXNGdYQ0lnS3lCcGJtWnZJQ3NnWENJNklGeGNYQ0pjSWlBcklDaGxjbkl1ZEc5VGRISnBibWNvS1NrZ0t5QmNJbHhjWENKY0lpa3NJSFp0S1R0Y2JpQWdmVnh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ1pXeHpaU0FxTDF4dUlDQnBaaUFvS0dsdVFuSnZkM05sY2lCOGZDQnBibGRsWlhncElDWW1JSFI1Y0dWdlppQmpiMjV6YjJ4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9aWEp5S1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMGFISnZkeUJsY25KY2JpQWdmVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JpOHFJR2RzYjJKaGJITWdUV1Z6YzJGblpVTm9ZVzV1Wld3Z0tpOWNibHh1ZG1GeUlHTmhiR3hpWVdOcmN5QTlJRnRkTzF4dWRtRnlJSEJsYm1ScGJtY2dQU0JtWVd4elpUdGNibHh1Wm5WdVkzUnBiMjRnWm14MWMyaERZV3hzWW1GamEzTWdLQ2tnZTF4dUlDQndaVzVrYVc1bklEMGdabUZzYzJVN1hHNGdJSFpoY2lCamIzQnBaWE1nUFNCallXeHNZbUZqYTNNdWMyeHBZMlVvTUNrN1hHNGdJR05oYkd4aVlXTnJjeTVzWlc1bmRHZ2dQU0F3TzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR052Y0dsbGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR052Y0dsbGMxdHBYU2dwTzF4dUlDQjlYRzU5WEc1Y2JpOHZJRWhsY21VZ2QyVWdhR0YyWlNCaGMzbHVZeUJrWldabGNuSnBibWNnZDNKaGNIQmxjbk1nZFhOcGJtY2dZbTkwYUNCdGFXTnlieUJoYm1RZ2JXRmpjbThnZEdGemEzTXVYRzR2THlCSmJpQThJREl1TkNCM1pTQjFjMlZrSUcxcFkzSnZJSFJoYzJ0eklHVjJaWEo1ZDJobGNtVXNJR0oxZENCMGFHVnlaU0JoY21VZ2MyOXRaU0J6WTJWdVlYSnBiM01nZDJobGNtVmNiaTh2SUcxcFkzSnZJSFJoYzJ0eklHaGhkbVVnZEc5dklHaHBaMmdnWVNCd2NtbHZjbWwwZVNCaGJtUWdabWx5WlhNZ2FXNGdZbVYwZDJWbGJpQnpkWEJ3YjNObFpHeDVYRzR2THlCelpYRjFaVzUwYVdGc0lHVjJaVzUwY3lBb1pTNW5MaUFqTkRVeU1Td2dJelkyT1RBcElHOXlJR1YyWlc0Z1ltVjBkMlZsYmlCaWRXSmliR2x1WnlCdlppQjBhR1VnYzJGdFpWeHVMeThnWlhabGJuUWdLQ00yTlRZMktTNGdTRzkzWlhabGNpd2dkWE5wYm1jZ2JXRmpjbThnZEdGemEzTWdaWFpsY25sM2FHVnlaU0JoYkhOdklHaGhjeUJ6ZFdKMGJHVWdjSEp2WW14bGJYTmNiaTh2SUhkb1pXNGdjM1JoZEdVZ2FYTWdZMmhoYm1kbFpDQnlhV2RvZENCaVpXWnZjbVVnY21Wd1lXbHVkQ0FvWlM1bkxpQWpOamd4TXl3Z2IzVjBMV2x1SUhSeVlXNXphWFJwYjI1ektTNWNiaTh2SUVobGNtVWdkMlVnZFhObElHMXBZM0p2SUhSaGMyc2dZbmtnWkdWbVlYVnNkQ3dnWW5WMElHVjRjRzl6WlNCaElIZGhlU0IwYnlCbWIzSmpaU0J0WVdOeWJ5QjBZWE5ySUhkb1pXNWNiaTh2SUc1bFpXUmxaQ0FvWlM1bkxpQnBiaUJsZG1WdWRDQm9ZVzVrYkdWeWN5QmhkSFJoWTJobFpDQmllU0IyTFc5dUtTNWNiblpoY2lCdGFXTnliMVJwYldWeVJuVnVZenRjYm5aaGNpQnRZV055YjFScGJXVnlSblZ1WXp0Y2JuWmhjaUIxYzJWTllXTnliMVJoYzJzZ1BTQm1ZV3h6WlR0Y2JseHVMeThnUkdWMFpYSnRhVzVsSUNodFlXTnlieWtnVkdGemF5QmtaV1psY2lCcGJYQnNaVzFsYm5SaGRHbHZiaTVjYmk4dklGUmxZMmh1YVdOaGJHeDVJSE5sZEVsdGJXVmthV0YwWlNCemFHOTFiR1FnWW1VZ2RHaGxJR2xrWldGc0lHTm9iMmxqWlN3Z1luVjBJR2wwSjNNZ2IyNXNlU0JoZG1GcGJHRmliR1ZjYmk4dklHbHVJRWxGTGlCVWFHVWdiMjVzZVNCd2IyeDVabWxzYkNCMGFHRjBJR052Ym5OcGMzUmxiblJzZVNCeGRXVjFaWE1nZEdobElHTmhiR3hpWVdOcklHRm1kR1Z5SUdGc2JDQkVUMDFjYmk4dklHVjJaVzUwY3lCMGNtbG5aMlZ5WldRZ2FXNGdkR2hsSUhOaGJXVWdiRzl2Y0NCcGN5QmllU0IxYzJsdVp5Qk5aWE56WVdkbFEyaGhibTVsYkM1Y2JpOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dWFXWWdLSFI1Y0dWdlppQnpaWFJKYlcxbFpHbGhkR1VnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUdselRtRjBhWFpsS0hObGRFbHRiV1ZrYVdGMFpTa3BJSHRjYmlBZ2JXRmpjbTlVYVcxbGNrWjFibU1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2MyVjBTVzF0WldScFlYUmxLR1pzZFhOb1EyRnNiR0poWTJ0ektUdGNiaUFnZlR0Y2JuMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlFMWxjM05oWjJWRGFHRnVibVZzSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlBb1hHNGdJR2x6VG1GMGFYWmxLRTFsYzNOaFoyVkRhR0Z1Ym1Wc0tTQjhmRnh1SUNBdkx5QlFhR0Z1ZEc5dFNsTmNiaUFnVFdWemMyRm5aVU5vWVc1dVpXd3VkRzlUZEhKcGJtY29LU0E5UFQwZ0oxdHZZbXBsWTNRZ1RXVnpjMkZuWlVOb1lXNXVaV3hEYjI1emRISjFZM1J2Y2wwblhHNHBLU0I3WEc0Z0lIWmhjaUJqYUdGdWJtVnNJRDBnYm1WM0lFMWxjM05oWjJWRGFHRnVibVZzS0NrN1hHNGdJSFpoY2lCd2IzSjBJRDBnWTJoaGJtNWxiQzV3YjNKME1qdGNiaUFnWTJoaGJtNWxiQzV3YjNKME1TNXZibTFsYzNOaFoyVWdQU0JtYkhWemFFTmhiR3hpWVdOcmN6dGNiaUFnYldGamNtOVVhVzFsY2taMWJtTWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY0c5eWRDNXdiM04wVFdWemMyRm5aU2d4S1R0Y2JpQWdmVHRjYm4wZ1pXeHpaU0I3WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNGdJRzFoWTNKdlZHbHRaWEpHZFc1aklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSE5sZEZScGJXVnZkWFFvWm14MWMyaERZV3hzWW1GamEzTXNJREFwTzF4dUlDQjlPMXh1ZlZ4dVhHNHZMeUJFWlhSbGNtMXBibVVnVFdsamNtOVVZWE5ySUdSbFptVnlJR2x0Y0d4bGJXVnVkR0YwYVc5dUxseHVMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRc0lDUm1iRzkzTFdScGMyRmliR1V0YkdsdVpTQXFMMXh1YVdZZ0tIUjVjR1Z2WmlCUWNtOXRhWE5sSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCcGMwNWhkR2wyWlNoUWNtOXRhWE5sS1NrZ2UxeHVJQ0IyWVhJZ2NDQTlJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3BPMXh1SUNCdGFXTnliMVJwYldWeVJuVnVZeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCd0xuUm9aVzRvWm14MWMyaERZV3hzWW1GamEzTXBPMXh1SUNBZ0lDOHZJR2x1SUhCeWIySnNaVzFoZEdsaklGVkpWMlZpVm1sbGQzTXNJRkJ5YjIxcGMyVXVkR2hsYmlCa2IyVnpiaWQwSUdOdmJYQnNaWFJsYkhrZ1luSmxZV3NzSUdKMWRGeHVJQ0FnSUM4dklHbDBJR05oYmlCblpYUWdjM1IxWTJzZ2FXNGdZU0IzWldseVpDQnpkR0YwWlNCM2FHVnlaU0JqWVd4c1ltRmphM01nWVhKbElIQjFjMmhsWkNCcGJuUnZJSFJvWlZ4dUlDQWdJQzh2SUcxcFkzSnZkR0Z6YXlCeGRXVjFaU0JpZFhRZ2RHaGxJSEYxWlhWbElHbHpiaWQwSUdKbGFXNW5JR1pzZFhOb1pXUXNJSFZ1ZEdsc0lIUm9aU0JpY205M2MyVnlYRzRnSUNBZ0x5OGdibVZsWkhNZ2RHOGdaRzhnYzI5dFpTQnZkR2hsY2lCM2IzSnJMQ0JsTG1jdUlHaGhibVJzWlNCaElIUnBiV1Z5TGlCVWFHVnlaV1p2Y21VZ2QyVWdZMkZ1WEc0Z0lDQWdMeThnWENKbWIzSmpaVndpSUhSb1pTQnRhV055YjNSaGMyc2djWFZsZFdVZ2RHOGdZbVVnWm14MWMyaGxaQ0JpZVNCaFpHUnBibWNnWVc0Z1pXMXdkSGtnZEdsdFpYSXVYRzRnSUNBZ2FXWWdLR2x6U1U5VEtTQjdJSE5sZEZScGJXVnZkWFFvYm05dmNDazdJSDFjYmlBZ2ZUdGNibjBnWld4elpTQjdYRzRnSUM4dklHWmhiR3hpWVdOcklIUnZJRzFoWTNKdlhHNGdJRzFwWTNKdlZHbHRaWEpHZFc1aklEMGdiV0ZqY205VWFXMWxja1oxYm1NN1hHNTlYRzVjYmk4cUtseHVJQ29nVjNKaGNDQmhJR1oxYm1OMGFXOXVJSE52SUhSb1lYUWdhV1lnWVc1NUlHTnZaR1VnYVc1emFXUmxJSFJ5YVdkblpYSnpJSE4wWVhSbElHTm9ZVzVuWlN4Y2JpQXFJSFJvWlNCamFHRnVaMlZ6SUdGeVpTQnhkV1YxWldRZ2RYTnBibWNnWVNCVVlYTnJJR2x1YzNSbFlXUWdiMllnWVNCTmFXTnliMVJoYzJzdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhkcGRHaE5ZV055YjFSaGMyc2dLR1p1S1NCN1hHNGdJSEpsZEhWeWJpQm1iaTVmZDJsMGFGUmhjMnNnZkh3Z0tHWnVMbDkzYVhSb1ZHRnpheUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMWMyVk5ZV055YjFSaGMyc2dQU0IwY25WbE8xeHVJQ0FnSUhaaGNpQnlaWE1nUFNCbWJpNWhjSEJzZVNodWRXeHNMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJSFZ6WlUxaFkzSnZWR0Z6YXlBOUlHWmhiSE5sTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE5jYmlBZ2ZTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JtVjRkRlJwWTJzZ0tHTmlMQ0JqZEhncElIdGNiaUFnZG1GeUlGOXlaWE52YkhabE8xeHVJQ0JqWVd4c1ltRmphM011Y0hWemFDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdhV1lnS0dOaUtTQjdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCallpNWpZV3hzS0dOMGVDazdYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUdoaGJtUnNaVVZ5Y205eUtHVXNJR04wZUN3Z0oyNWxlSFJVYVdOckp5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGZjbVZ6YjJ4MlpTa2dlMXh1SUNBZ0lDQWdYM0psYzI5c2RtVW9ZM1I0S1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1SUNCcFppQW9JWEJsYm1ScGJtY3BJSHRjYmlBZ0lDQndaVzVrYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0JwWmlBb2RYTmxUV0ZqY205VVlYTnJLU0I3WEc0Z0lDQWdJQ0J0WVdOeWIxUnBiV1Z5Um5WdVl5Z3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCdGFXTnliMVJwYldWeVJuVnVZeWdwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0F2THlBa1pteHZkeTFrYVhOaFlteGxMV3hwYm1WY2JpQWdhV1lnS0NGallpQW1KaUIwZVhCbGIyWWdVSEp2YldselpTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1VcElIdGNiaUFnSUNBZ0lGOXlaWE52YkhabElEMGdjbVZ6YjJ4MlpUdGNiaUFnSUNCOUtWeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzR2S2lCdWIzUWdkSGx3WlNCamFHVmphMmx1WnlCMGFHbHpJR1pwYkdVZ1ltVmpZWFZ6WlNCbWJHOTNJR1J2WlhOdUozUWdjR3hoZVNCM1pXeHNJSGRwZEdnZ1VISnZlSGtnS2k5Y2JseHVkbUZ5SUdsdWFYUlFjbTk0ZVR0Y2JseHVhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnZG1GeUlHRnNiRzkzWldSSGJHOWlZV3h6SUQwZ2JXRnJaVTFoY0NoY2JpQWdJQ0FuU1c1bWFXNXBkSGtzZFc1a1pXWnBibVZrTEU1aFRpeHBjMFpwYm1sMFpTeHBjMDVoVGl3bklDdGNiaUFnSUNBbmNHRnljMlZHYkc5aGRDeHdZWEp6WlVsdWRDeGtaV052WkdWVlVra3NaR1ZqYjJSbFZWSkpRMjl0Y0c5dVpXNTBMR1Z1WTI5a1pWVlNTU3hsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFzSnlBclhHNGdJQ0FnSjAxaGRHZ3NUblZ0WW1WeUxFUmhkR1VzUVhKeVlYa3NUMkpxWldOMExFSnZiMnhsWVc0c1UzUnlhVzVuTEZKbFowVjRjQ3hOWVhBc1UyVjBMRXBUVDA0c1NXNTBiQ3duSUN0Y2JpQWdJQ0FuY21WeGRXbHlaU2NnTHk4Z1ptOXlJRmRsWW5CaFkyc3ZRbkp2ZDNObGNtbG1lVnh1SUNBcE8xeHVYRzRnSUhaaGNpQjNZWEp1VG05dVVISmxjMlZ1ZENBOUlHWjFibU4wYVc5dUlDaDBZWEpuWlhRc0lHdGxlU2tnZTF4dUlDQWdJSGRoY200b1hHNGdJQ0FnSUNCY0lsQnliM0JsY25SNUlHOXlJRzFsZEdodlpDQmNYRndpWENJZ0t5QnJaWGtnS3lCY0lseGNYQ0lnYVhNZ2JtOTBJR1JsWm1sdVpXUWdiMjRnZEdobElHbHVjM1JoYm1ObElHSjFkQ0JjSWlBclhHNGdJQ0FnSUNBbmNtVm1aWEpsYm1ObFpDQmtkWEpwYm1jZ2NtVnVaR1Z5TGlCTllXdGxJSE4xY21VZ2RHaGhkQ0IwYUdseklIQnliM0JsY25SNUlHbHpJSEpsWVdOMGFYWmxMQ0FuSUN0Y2JpQWdJQ0FnSUNkbGFYUm9aWElnYVc0Z2RHaGxJR1JoZEdFZ2IzQjBhVzl1TENCdmNpQm1iM0lnWTJ4aGMzTXRZbUZ6WldRZ1kyOXRjRzl1Wlc1MGN5d2dZbmtnSnlBclhHNGdJQ0FnSUNBbmFXNXBkR2xoYkdsNmFXNW5JSFJvWlNCd2NtOXdaWEowZVM0Z0p5QXJYRzRnSUNBZ0lDQW5VMlZsT2lCb2RIUndjem92TDNaMVpXcHpMbTl5Wnk5Mk1pOW5kV2xrWlM5eVpXRmpkR2wyYVhSNUxtaDBiV3dqUkdWamJHRnlhVzVuTFZKbFlXTjBhWFpsTFZCeWIzQmxjblJwWlhNdUp5eGNiaUFnSUNBZ0lIUmhjbWRsZEZ4dUlDQWdJQ2s3WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJR2hoYzFCeWIzaDVJRDFjYmlBZ0lDQjBlWEJsYjJZZ1VISnZlSGtnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltWEc0Z0lDQWdVSEp2ZUhrdWRHOVRkSEpwYm1jb0tTNXRZWFJqYUNndmJtRjBhWFpsSUdOdlpHVXZLVHRjYmx4dUlDQnBaaUFvYUdGelVISnZlSGtwSUh0Y2JpQWdJQ0IyWVhJZ2FYTkNkV2xzZEVsdVRXOWthV1pwWlhJZ1BTQnRZV3RsVFdGd0tDZHpkRzl3TEhCeVpYWmxiblFzYzJWc1ppeGpkSEpzTEhOb2FXWjBMR0ZzZEN4dFpYUmhMR1Y0WVdOMEp5azdYRzRnSUNBZ1kyOXVabWxuTG10bGVVTnZaR1Z6SUQwZ2JtVjNJRkJ5YjNoNUtHTnZibVpwWnk1clpYbERiMlJsY3l3Z2UxeHVJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaUJ6WlhRZ0tIUmhjbWRsZEN3Z2EyVjVMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2FYTkNkV2xzZEVsdVRXOWthV1pwWlhJb2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIZGhjbTRvS0Z3aVFYWnZhV1FnYjNabGNuZHlhWFJwYm1jZ1luVnBiSFF0YVc0Z2JXOWthV1pwWlhJZ2FXNGdZMjl1Wm1sbkxtdGxlVU52WkdWek9pQXVYQ0lnS3lCclpYa3BLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0IwWVhKblpYUmJhMlY1WFNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQm9ZWE5JWVc1a2JHVnlJRDBnZTF4dUlDQWdJR2hoY3pvZ1puVnVZM1JwYjI0Z2FHRnpJQ2gwWVhKblpYUXNJR3RsZVNrZ2UxeHVJQ0FnSUNBZ2RtRnlJR2hoY3lBOUlHdGxlU0JwYmlCMFlYSm5aWFE3WEc0Z0lDQWdJQ0IyWVhJZ2FYTkJiR3h2ZDJWa0lEMGdZV3hzYjNkbFpFZHNiMkpoYkhNb2EyVjVLU0I4ZkNCclpYa3VZMmhoY2tGMEtEQXBJRDA5UFNBblh5YzdYRzRnSUNBZ0lDQnBaaUFvSVdoaGN5QW1KaUFoYVhOQmJHeHZkMlZrS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTVPYjI1UWNtVnpaVzUwS0hSaGNtZGxkQ3dnYTJWNUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCb1lYTWdmSHdnSVdselFXeHNiM2RsWkZ4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCMllYSWdaMlYwU0dGdVpHeGxjaUE5SUh0Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlHZGxkQ0FvZEdGeVoyVjBMQ0JyWlhrcElIdGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhMlY1SUQwOVBTQW5jM1J5YVc1bkp5QW1KaUFoS0d0bGVTQnBiaUIwWVhKblpYUXBLU0I3WEc0Z0lDQWdJQ0FnSUhkaGNtNU9iMjVRY21WelpXNTBLSFJoY21kbGRDd2dhMlY1S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIwWVhKblpYUmJhMlY1WFZ4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCcGJtbDBVSEp2ZUhrZ1BTQm1kVzVqZEdsdmJpQnBibWwwVUhKdmVIa2dLSFp0S1NCN1hHNGdJQ0FnYVdZZ0tHaGhjMUJ5YjNoNUtTQjdYRzRnSUNBZ0lDQXZMeUJrWlhSbGNtMXBibVVnZDJocFkyZ2djSEp2ZUhrZ2FHRnVaR3hsY2lCMGJ5QjFjMlZjYmlBZ0lDQWdJSFpoY2lCdmNIUnBiMjV6SUQwZ2RtMHVKRzl3ZEdsdmJuTTdYRzRnSUNBZ0lDQjJZWElnYUdGdVpHeGxjbk1nUFNCdmNIUnBiMjV6TG5KbGJtUmxjaUFtSmlCdmNIUnBiMjV6TG5KbGJtUmxjaTVmZDJsMGFGTjBjbWx3Y0dWa1hHNGdJQ0FnSUNBZ0lEOGdaMlYwU0dGdVpHeGxjbHh1SUNBZ0lDQWdJQ0E2SUdoaGMwaGhibVJzWlhJN1hHNGdJQ0FnSUNCMmJTNWZjbVZ1WkdWeVVISnZlSGtnUFNCdVpYY2dVSEp2ZUhrb2RtMHNJR2hoYm1Sc1pYSnpLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtMHVYM0psYm1SbGNsQnliM2g1SUQwZ2RtMDdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZWeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlITmxaVzVQWW1wbFkzUnpJRDBnYm1WM0lGOVRaWFFvS1R0Y2JseHVMeW9xWEc0Z0tpQlNaV04xY25OcGRtVnNlU0IwY21GMlpYSnpaU0JoYmlCdlltcGxZM1FnZEc4Z1pYWnZhMlVnWVd4c0lHTnZiblpsY25SbFpGeHVJQ29nWjJWMGRHVnljeXdnYzI4Z2RHaGhkQ0JsZG1WeWVTQnVaWE4wWldRZ2NISnZjR1Z5ZEhrZ2FXNXphV1JsSUhSb1pTQnZZbXBsWTNSY2JpQXFJR2x6SUdOdmJHeGxZM1JsWkNCaGN5QmhJRndpWkdWbGNGd2lJR1JsY0dWdVpHVnVZM2t1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJ5WVhabGNuTmxJQ2gyWVd3cElIdGNiaUFnWDNSeVlYWmxjbk5sS0haaGJDd2djMlZsYms5aWFtVmpkSE1wTzF4dUlDQnpaV1Z1VDJKcVpXTjBjeTVqYkdWaGNpZ3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZkSEpoZG1WeWMyVWdLSFpoYkN3Z2MyVmxiaWtnZTF4dUlDQjJZWElnYVN3Z2EyVjVjenRjYmlBZ2RtRnlJR2x6UVNBOUlFRnljbUY1TG1selFYSnlZWGtvZG1Gc0tUdGNiaUFnYVdZZ0tDZ2hhWE5CSUNZbUlDRnBjMDlpYW1WamRDaDJZV3dwS1NCOGZDQlBZbXBsWTNRdWFYTkdjbTk2Wlc0b2RtRnNLU2tnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lHbG1JQ2gyWVd3dVgxOXZZbDlmS1NCN1hHNGdJQ0FnZG1GeUlHUmxjRWxrSUQwZ2RtRnNMbDlmYjJKZlh5NWtaWEF1YVdRN1hHNGdJQ0FnYVdZZ0tITmxaVzR1YUdGektHUmxjRWxrS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1SUNBZ0lITmxaVzR1WVdSa0tHUmxjRWxrS1R0Y2JpQWdmVnh1SUNCcFppQW9hWE5CS1NCN1hHNGdJQ0FnYVNBOUlIWmhiQzVzWlc1bmRHZzdYRzRnSUNBZ2QyaHBiR1VnS0drdExTa2dleUJmZEhKaGRtVnljMlVvZG1Gc1cybGRMQ0J6WldWdUtUc2dmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR3RsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeWgyWVd3cE8xeHVJQ0FnSUdrZ1BTQnJaWGx6TG14bGJtZDBhRHRjYmlBZ0lDQjNhR2xzWlNBb2FTMHRLU0I3SUY5MGNtRjJaWEp6WlNoMllXeGJhMlY1YzF0cFhWMHNJSE5sWlc0cE95QjlYRzRnSUgxY2JuMWNibHh1ZG1GeUlHMWhjbXM3WEc1MllYSWdiV1ZoYzNWeVpUdGNibHh1YVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ2RtRnlJSEJsY21ZZ1BTQnBia0p5YjNkelpYSWdKaVlnZDJsdVpHOTNMbkJsY21admNtMWhibU5sTzF4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdhV1lnS0Z4dUlDQWdJSEJsY21ZZ0ppWmNiaUFnSUNCd1pYSm1MbTFoY21zZ0ppWmNiaUFnSUNCd1pYSm1MbTFsWVhOMWNtVWdKaVpjYmlBZ0lDQndaWEptTG1Oc1pXRnlUV0Z5YTNNZ0ppWmNiaUFnSUNCd1pYSm1MbU5zWldGeVRXVmhjM1Z5WlhOY2JpQWdLU0I3WEc0Z0lDQWdiV0Z5YXlBOUlHWjFibU4wYVc5dUlDaDBZV2NwSUhzZ2NtVjBkWEp1SUhCbGNtWXViV0Z5YXloMFlXY3BPeUI5TzF4dUlDQWdJRzFsWVhOMWNtVWdQU0JtZFc1amRHbHZiaUFvYm1GdFpTd2djM1JoY25SVVlXY3NJR1Z1WkZSaFp5a2dlMXh1SUNBZ0lDQWdjR1Z5Wmk1dFpXRnpkWEpsS0c1aGJXVXNJSE4wWVhKMFZHRm5MQ0JsYm1SVVlXY3BPMXh1SUNBZ0lDQWdjR1Z5Wmk1amJHVmhjazFoY210ektITjBZWEowVkdGbktUdGNiaUFnSUNBZ0lIQmxjbVl1WTJ4bFlYSk5ZWEpyY3lobGJtUlVZV2NwTzF4dUlDQWdJQ0FnY0dWeVppNWpiR1ZoY2sxbFlYTjFjbVZ6S0c1aGJXVXBPMXh1SUNBZ0lIMDdYRzRnSUgxY2JuMWNibHh1THlvZ0lDb3ZYRzVjYm5aaGNpQnViM0p0WVd4cGVtVkZkbVZ1ZENBOUlHTmhZMmhsWkNobWRXNWpkR2x2YmlBb2JtRnRaU2tnZTF4dUlDQjJZWElnY0dGemMybDJaU0E5SUc1aGJXVXVZMmhoY2tGMEtEQXBJRDA5UFNBbkppYzdYRzRnSUc1aGJXVWdQU0J3WVhOemFYWmxJRDhnYm1GdFpTNXpiR2xqWlNneEtTQTZJRzVoYldVN1hHNGdJSFpoY2lCdmJtTmxKQ1F4SUQwZ2JtRnRaUzVqYUdGeVFYUW9NQ2tnUFQwOUlDZCtKenNnTHk4Z1VISmxabWw0WldRZ2JHRnpkQ3dnWTJobFkydGxaQ0JtYVhKemRGeHVJQ0J1WVcxbElEMGdiMjVqWlNRa01TQS9JRzVoYldVdWMyeHBZMlVvTVNrZ09pQnVZVzFsTzF4dUlDQjJZWElnWTJGd2RIVnlaU0E5SUc1aGJXVXVZMmhoY2tGMEtEQXBJRDA5UFNBbklTYzdYRzRnSUc1aGJXVWdQU0JqWVhCMGRYSmxJRDhnYm1GdFpTNXpiR2xqWlNneEtTQTZJRzVoYldVN1hHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2JtRnRaVG9nYm1GdFpTeGNiaUFnSUNCdmJtTmxPaUJ2Ym1ObEpDUXhMRnh1SUNBZ0lHTmhjSFIxY21VNklHTmhjSFIxY21Vc1hHNGdJQ0FnY0dGemMybDJaVG9nY0dGemMybDJaVnh1SUNCOVhHNTlLVHRjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsUm01SmJuWnZhMlZ5SUNobWJuTXBJSHRjYmlBZ1puVnVZM1JwYjI0Z2FXNTJiMnRsY2lBb0tTQjdYRzRnSUNBZ2RtRnlJR0Z5WjNWdFpXNTBjeVF4SUQwZ1lYSm5kVzFsYm5Sek8xeHVYRzRnSUNBZ2RtRnlJR1p1Y3lBOUlHbHVkbTlyWlhJdVptNXpPMXh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHWnVjeWtwSUh0Y2JpQWdJQ0FnSUhaaGNpQmpiRzl1WldRZ1BTQm1ibk11YzJ4cFkyVW9LVHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWTJ4dmJtVmtMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHTnNiMjVsWkZ0cFhTNWhjSEJzZVNodWRXeHNMQ0JoY21kMWJXVnVkSE1rTVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUhKbGRIVnliaUJvWVc1a2JHVnlJSEpsZEhWeWJpQjJZV3gxWlNCbWIzSWdjMmx1WjJ4bElHaGhibVJzWlhKelhHNGdJQ0FnSUNCeVpYUjFjbTRnWm01ekxtRndjR3g1S0c1MWJHd3NJR0Z5WjNWdFpXNTBjeWxjYmlBZ0lDQjlYRzRnSUgxY2JpQWdhVzUyYjJ0bGNpNW1ibk1nUFNCbWJuTTdYRzRnSUhKbGRIVnliaUJwYm5admEyVnlYRzU5WEc1Y2JtWjFibU4wYVc5dUlIVndaR0YwWlV4cGMzUmxibVZ5Y3lBb1hHNGdJRzl1TEZ4dUlDQnZiR1JQYml4Y2JpQWdZV1JrTEZ4dUlDQnlaVzF2ZG1Va0pERXNYRzRnSUhadFhHNHBJSHRjYmlBZ2RtRnlJRzVoYldVc0lHUmxaaXdnWTNWeUxDQnZiR1FzSUdWMlpXNTBPMXh1SUNCbWIzSWdLRzVoYldVZ2FXNGdiMjRwSUh0Y2JpQWdJQ0JrWldZZ1BTQmpkWElnUFNCdmJsdHVZVzFsWFR0Y2JpQWdJQ0J2YkdRZ1BTQnZiR1JQYmx0dVlXMWxYVHRjYmlBZ0lDQmxkbVZ1ZENBOUlHNXZjbTFoYkdsNlpVVjJaVzUwS0c1aGJXVXBPMXh1SUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJR2xtSUNocGMxVnVaR1ZtS0dOMWNpa3BJSHRjYmlBZ0lDQWdJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnSmlZZ2QyRnliaWhjYmlBZ0lDQWdJQ0FnWENKSmJuWmhiR2xrSUdoaGJtUnNaWElnWm05eUlHVjJaVzUwSUZ4Y1hDSmNJaUFySUNobGRtVnVkQzV1WVcxbEtTQXJJRndpWEZ4Y0lqb2daMjkwSUZ3aUlDc2dVM1J5YVc1bktHTjFjaWtzWEc0Z0lDQWdJQ0FnSUhadFhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTlZibVJsWmlodmJHUXBLU0I3WEc0Z0lDQWdJQ0JwWmlBb2FYTlZibVJsWmloamRYSXVabTV6S1NrZ2UxeHVJQ0FnSUNBZ0lDQmpkWElnUFNCdmJsdHVZVzFsWFNBOUlHTnlaV0YwWlVadVNXNTJiMnRsY2loamRYSXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZV1JrS0dWMlpXNTBMbTVoYldVc0lHTjFjaXdnWlhabGJuUXViMjVqWlN3Z1pYWmxiblF1WTJGd2RIVnlaU3dnWlhabGJuUXVjR0Z6YzJsMlpTd2daWFpsYm5RdWNHRnlZVzF6S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dOMWNpQWhQVDBnYjJ4a0tTQjdYRzRnSUNBZ0lDQnZiR1F1Wm01eklEMGdZM1Z5TzF4dUlDQWdJQ0FnYjI1YmJtRnRaVjBnUFNCdmJHUTdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHWnZjaUFvYm1GdFpTQnBiaUJ2YkdSUGJpa2dlMXh1SUNBZ0lHbG1JQ2hwYzFWdVpHVm1LRzl1VzI1aGJXVmRLU2tnZTF4dUlDQWdJQ0FnWlhabGJuUWdQU0J1YjNKdFlXeHBlbVZGZG1WdWRDaHVZVzFsS1R0Y2JpQWdJQ0FnSUhKbGJXOTJaU1FrTVNobGRtVnVkQzV1WVcxbExDQnZiR1JQYmx0dVlXMWxYU3dnWlhabGJuUXVZMkZ3ZEhWeVpTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJ0WlhKblpWWk9iMlJsU0c5dmF5QW9aR1ZtTENCb2IyOXJTMlY1TENCb2IyOXJLU0I3WEc0Z0lHbG1JQ2hrWldZZ2FXNXpkR0Z1WTJWdlppQldUbTlrWlNrZ2UxeHVJQ0FnSUdSbFppQTlJR1JsWmk1a1lYUmhMbWh2YjJzZ2ZId2dLR1JsWmk1a1lYUmhMbWh2YjJzZ1BTQjdmU2s3WEc0Z0lIMWNiaUFnZG1GeUlHbHVkbTlyWlhJN1hHNGdJSFpoY2lCdmJHUkliMjlySUQwZ1pHVm1XMmh2YjJ0TFpYbGRPMXh1WEc0Z0lHWjFibU4wYVc5dUlIZHlZWEJ3WldSSWIyOXJJQ2dwSUh0Y2JpQWdJQ0JvYjI5ckxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdMeThnYVcxd2IzSjBZVzUwT2lCeVpXMXZkbVVnYldWeVoyVmtJR2h2YjJzZ2RHOGdaVzV6ZFhKbElHbDBKM01nWTJGc2JHVmtJRzl1YkhrZ2IyNWpaVnh1SUNBZ0lDOHZJR0Z1WkNCd2NtVjJaVzUwSUcxbGJXOXllU0JzWldGclhHNGdJQ0FnY21WdGIzWmxLR2x1ZG05clpYSXVabTV6TENCM2NtRndjR1ZrU0c5dmF5azdYRzRnSUgxY2JseHVJQ0JwWmlBb2FYTlZibVJsWmlodmJHUkliMjlyS1NrZ2UxeHVJQ0FnSUM4dklHNXZJR1Y0YVhOMGFXNW5JR2h2YjJ0Y2JpQWdJQ0JwYm5admEyVnlJRDBnWTNKbFlYUmxSbTVKYm5admEyVnlLRnQzY21Gd2NHVmtTRzl2YTEwcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJR2xtSUNocGMwUmxaaWh2YkdSSWIyOXJMbVp1Y3lrZ0ppWWdhWE5VY25WbEtHOXNaRWh2YjJzdWJXVnlaMlZrS1NrZ2UxeHVJQ0FnSUNBZ0x5OGdZV3h5WldGa2VTQmhJRzFsY21kbFpDQnBiblp2YTJWeVhHNGdJQ0FnSUNCcGJuWnZhMlZ5SUQwZ2IyeGtTRzl2YXp0Y2JpQWdJQ0FnSUdsdWRtOXJaWEl1Wm01ekxuQjFjMmdvZDNKaGNIQmxaRWh2YjJzcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0F2THlCbGVHbHpkR2x1WnlCd2JHRnBiaUJvYjI5clhHNGdJQ0FnSUNCcGJuWnZhMlZ5SUQwZ1kzSmxZWFJsUm01SmJuWnZhMlZ5S0Z0dmJHUkliMjlyTENCM2NtRndjR1ZrU0c5dmExMHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR2x1ZG05clpYSXViV1Z5WjJWa0lEMGdkSEoxWlR0Y2JpQWdaR1ZtVzJodmIydExaWGxkSUQwZ2FXNTJiMnRsY2p0Y2JuMWNibHh1THlvZ0lDb3ZYRzVjYm1aMWJtTjBhVzl1SUdWNGRISmhZM1JRY205d2MwWnliMjFXVG05a1pVUmhkR0VnS0Z4dUlDQmtZWFJoTEZ4dUlDQkRkRzl5TEZ4dUlDQjBZV2RjYmlrZ2UxeHVJQ0F2THlCM1pTQmhjbVVnYjI1c2VTQmxlSFJ5WVdOMGFXNW5JSEpoZHlCMllXeDFaWE1nYUdWeVpTNWNiaUFnTHk4Z2RtRnNhV1JoZEdsdmJpQmhibVFnWkdWbVlYVnNkQ0IyWVd4MVpYTWdZWEpsSUdoaGJtUnNaV1FnYVc0Z2RHaGxJR05vYVd4a1hHNGdJQzh2SUdOdmJYQnZibVZ1ZENCcGRITmxiR1l1WEc0Z0lIWmhjaUJ3Y205d1QzQjBhVzl1Y3lBOUlFTjBiM0l1YjNCMGFXOXVjeTV3Y205d2N6dGNiaUFnYVdZZ0tHbHpWVzVrWldZb2NISnZjRTl3ZEdsdmJuTXBLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmlBZ2RtRnlJSEpsY3lBOUlIdDlPMXh1SUNCMllYSWdZWFIwY25NZ1BTQmtZWFJoTG1GMGRISnpPMXh1SUNCMllYSWdjSEp2Y0hNZ1BTQmtZWFJoTG5CeWIzQnpPMXh1SUNCcFppQW9hWE5FWldZb1lYUjBjbk1wSUh4OElHbHpSR1ZtS0hCeWIzQnpLU2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQndjbTl3VDNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnZG1GeUlHRnNkRXRsZVNBOUlHaDVjR2hsYm1GMFpTaHJaWGtwTzF4dUlDQWdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHdGxlVWx1VEc5M1pYSkRZWE5sSUQwZ2EyVjVMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNCclpYa2dJVDA5SUd0bGVVbHVURzkzWlhKRFlYTmxJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ1lYUjBjbk1nSmlZZ2FHRnpUM2R1S0dGMGRISnpMQ0JyWlhsSmJreHZkMlZ5UTJGelpTbGNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHbHdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSlFjbTl3SUZ4Y1hDSmNJaUFySUd0bGVVbHVURzkzWlhKRFlYTmxJQ3NnWENKY1hGd2lJR2x6SUhCaGMzTmxaQ0IwYnlCamIyMXdiMjVsYm5RZ1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tHWnZjbTFoZEVOdmJYQnZibVZ1ZEU1aGJXVW9kR0ZuSUh4OElFTjBiM0lwS1NBcklGd2lMQ0JpZFhRZ2RHaGxJR1JsWTJ4aGNtVmtJSEJ5YjNBZ2JtRnRaU0JwYzF3aUlDdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aUlGeGNYQ0pjSWlBcklHdGxlU0FySUZ3aVhGeGNJaTRnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKT2IzUmxJSFJvWVhRZ1NGUk5UQ0JoZEhSeWFXSjFkR1Z6SUdGeVpTQmpZWE5sTFdsdWMyVnVjMmwwYVhabElHRnVaQ0JqWVcxbGJFTmhjMlZrSUZ3aUlDdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWNISnZjSE1nYm1WbFpDQjBieUIxYzJVZ2RHaGxhWElnYTJWaVlXSXRZMkZ6WlNCbGNYVnBkbUZzWlc1MGN5QjNhR1Z1SUhWemFXNW5JR2x1TFVSUFRTQmNJaUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJblJsYlhCc1lYUmxjeTRnV1c5MUlITm9iM1ZzWkNCd2NtOWlZV0pzZVNCMWMyVWdYRnhjSWx3aUlDc2dZV3gwUzJWNUlDc2dYQ0pjWEZ3aUlHbHVjM1JsWVdRZ2IyWWdYRnhjSWx3aUlDc2dhMlY1SUNzZ1hDSmNYRndpTGx3aVhHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTJobFkydFFjbTl3S0hKbGN5d2djSEp2Y0hNc0lHdGxlU3dnWVd4MFMyVjVMQ0IwY25WbEtTQjhmRnh1SUNBZ0lDQWdZMmhsWTJ0UWNtOXdLSEpsY3l3Z1lYUjBjbk1zSUd0bGVTd2dZV3gwUzJWNUxDQm1ZV3h6WlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTJobFkydFFjbTl3SUNoY2JpQWdjbVZ6TEZ4dUlDQm9ZWE5vTEZ4dUlDQnJaWGtzWEc0Z0lHRnNkRXRsZVN4Y2JpQWdjSEpsYzJWeWRtVmNiaWtnZTF4dUlDQnBaaUFvYVhORVpXWW9hR0Z6YUNrcElIdGNiaUFnSUNCcFppQW9hR0Z6VDNkdUtHaGhjMmdzSUd0bGVTa3BJSHRjYmlBZ0lDQWdJSEpsYzF0clpYbGRJRDBnYUdGemFGdHJaWGxkTzF4dUlDQWdJQ0FnYVdZZ0tDRndjbVZ6WlhKMlpTa2dlMXh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdhR0Z6YUZ0clpYbGRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1ZjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2hoYzA5M2JpaG9ZWE5vTENCaGJIUkxaWGtwS1NCN1hHNGdJQ0FnSUNCeVpYTmJhMlY1WFNBOUlHaGhjMmhiWVd4MFMyVjVYVHRjYmlBZ0lDQWdJR2xtSUNnaGNISmxjMlZ5ZG1VcElIdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElHaGhjMmhiWVd4MFMyVjVYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQm1ZV3h6WlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1THk4Z1ZHaGxJSFJsYlhCc1lYUmxJR052YlhCcGJHVnlJR0YwZEdWdGNIUnpJSFJ2SUcxcGJtbHRhWHBsSUhSb1pTQnVaV1ZrSUdadmNpQnViM0p0WVd4cGVtRjBhVzl1SUdKNVhHNHZMeUJ6ZEdGMGFXTmhiR3g1SUdGdVlXeDVlbWx1WnlCMGFHVWdkR1Z0Y0d4aGRHVWdZWFFnWTI5dGNHbHNaU0IwYVcxbExseHVMeTljYmk4dklFWnZjaUJ3YkdGcGJpQklWRTFNSUcxaGNtdDFjQ3dnYm05eWJXRnNhWHBoZEdsdmJpQmpZVzRnWW1VZ1kyOXRjR3hsZEdWc2VTQnphMmx3Y0dWa0lHSmxZMkYxYzJVZ2RHaGxYRzR2THlCblpXNWxjbUYwWldRZ2NtVnVaR1Z5SUdaMWJtTjBhVzl1SUdseklHZDFZWEpoYm5SbFpXUWdkRzhnY21WMGRYSnVJRUZ5Y21GNVBGWk9iMlJsUGk0Z1ZHaGxjbVVnWVhKbFhHNHZMeUIwZDI4Z1kyRnpaWE1nZDJobGNtVWdaWGgwY21FZ2JtOXliV0ZzYVhwaGRHbHZiaUJwY3lCdVpXVmtaV1E2WEc1Y2JpOHZJREV1SUZkb1pXNGdkR2hsSUdOb2FXeGtjbVZ1SUdOdmJuUmhhVzV6SUdOdmJYQnZibVZ1ZEhNZ0xTQmlaV05oZFhObElHRWdablZ1WTNScGIyNWhiQ0JqYjIxd2IyNWxiblJjYmk4dklHMWhlU0J5WlhSMWNtNGdZVzRnUVhKeVlYa2dhVzV6ZEdWaFpDQnZaaUJoSUhOcGJtZHNaU0J5YjI5MExpQkpiaUIwYUdseklHTmhjMlVzSUdwMWMzUWdZU0J6YVcxd2JHVmNiaTh2SUc1dmNtMWhiR2w2WVhScGIyNGdhWE1nYm1WbFpHVmtJQzBnYVdZZ1lXNTVJR05vYVd4a0lHbHpJR0Z1SUVGeWNtRjVMQ0IzWlNCbWJHRjBkR1Z1SUhSb1pTQjNhRzlzWlZ4dUx5OGdkR2hwYm1jZ2QybDBhQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVZMjl1WTJGMExpQkpkQ0JwY3lCbmRXRnlZVzUwWldWa0lIUnZJR0psSUc5dWJIa2dNUzFzWlhabGJDQmtaV1Z3WEc0dkx5QmlaV05oZFhObElHWjFibU4wYVc5dVlXd2dZMjl0Y0c5dVpXNTBjeUJoYkhKbFlXUjVJRzV2Y20xaGJHbDZaU0IwYUdWcGNpQnZkMjRnWTJocGJHUnlaVzR1WEc1bWRXNWpkR2x2YmlCemFXMXdiR1ZPYjNKdFlXeHBlbVZEYUdsc1pISmxiaUFvWTJocGJHUnlaVzRwSUh0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JqYUdsc1pISmxiaTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0dOb2FXeGtjbVZ1VzJsZEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1amIyNWpZWFF1WVhCd2JIa29XMTBzSUdOb2FXeGtjbVZ1S1Z4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZMmhwYkdSeVpXNWNibjFjYmx4dUx5OGdNaTRnVjJobGJpQjBhR1VnWTJocGJHUnlaVzRnWTI5dWRHRnBibk1nWTI5dWMzUnlkV04wY3lCMGFHRjBJR0ZzZDJGNWN5Qm5aVzVsY21GMFpXUWdibVZ6ZEdWa0lFRnljbUY1Y3l4Y2JpOHZJR1V1Wnk0Z1BIUmxiWEJzWVhSbFBpd2dQSE5zYjNRK0xDQjJMV1p2Y2l3Z2IzSWdkMmhsYmlCMGFHVWdZMmhwYkdSeVpXNGdhWE1nY0hKdmRtbGtaV1FnWW5rZ2RYTmxjbHh1THk4Z2QybDBhQ0JvWVc1a0xYZHlhWFIwWlc0Z2NtVnVaR1Z5SUdaMWJtTjBhVzl1Y3lBdklFcFRXQzRnU1c0Z2MzVmphQ0JqWVhObGN5QmhJR1oxYkd3Z2JtOXliV0ZzYVhwaGRHbHZibHh1THk4Z2FYTWdibVZsWkdWa0lIUnZJR05oZEdWeUlIUnZJR0ZzYkNCd2IzTnphV0pzWlNCMGVYQmxjeUJ2WmlCamFHbHNaSEpsYmlCMllXeDFaWE11WEc1bWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WRGFHbHNaSEpsYmlBb1kyaHBiR1J5Wlc0cElIdGNiaUFnY21WMGRYSnVJR2x6VUhKcGJXbDBhWFpsS0dOb2FXeGtjbVZ1S1Z4dUlDQWdJRDhnVzJOeVpXRjBaVlJsZUhSV1RtOWtaU2hqYUdsc1pISmxiaWxkWEc0Z0lDQWdPaUJCY25KaGVTNXBjMEZ5Y21GNUtHTm9hV3hrY21WdUtWeHVJQ0FnSUNBZ1B5QnViM0p0WVd4cGVtVkJjbkpoZVVOb2FXeGtjbVZ1S0dOb2FXeGtjbVZ1S1Z4dUlDQWdJQ0FnT2lCMWJtUmxabWx1WldSY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVhOVVpYaDBUbTlrWlNBb2JtOWtaU2tnZTF4dUlDQnlaWFIxY200Z2FYTkVaV1lvYm05a1pTa2dKaVlnYVhORVpXWW9ibTlrWlM1MFpYaDBLU0FtSmlCcGMwWmhiSE5sS0c1dlpHVXVhWE5EYjIxdFpXNTBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnViM0p0WVd4cGVtVkJjbkpoZVVOb2FXeGtjbVZ1SUNoamFHbHNaSEpsYml3Z2JtVnpkR1ZrU1c1a1pYZ3BJSHRjYmlBZ2RtRnlJSEpsY3lBOUlGdGRPMXh1SUNCMllYSWdhU3dnWXl3Z2JHRnpkRWx1WkdWNExDQnNZWE4wTzF4dUlDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z1kyaHBiR1J5Wlc0dWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQmpJRDBnWTJocGJHUnlaVzViYVYwN1hHNGdJQ0FnYVdZZ0tHbHpWVzVrWldZb1l5a2dmSHdnZEhsd1pXOW1JR01nUFQwOUlDZGliMjlzWldGdUp5a2dleUJqYjI1MGFXNTFaU0I5WEc0Z0lDQWdiR0Z6ZEVsdVpHVjRJRDBnY21WekxteGxibWQwYUNBdElERTdYRzRnSUNBZ2JHRnpkQ0E5SUhKbGMxdHNZWE4wU1c1a1pYaGRPMXh1SUNBZ0lDOHZJQ0J1WlhOMFpXUmNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoaktTa2dlMXh1SUNBZ0lDQWdhV1lnS0dNdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0JqSUQwZ2JtOXliV0ZzYVhwbFFYSnlZWGxEYUdsc1pISmxiaWhqTENBb0tHNWxjM1JsWkVsdVpHVjRJSHg4SUNjbktTQXJJRndpWDF3aUlDc2dhU2twTzF4dUlDQWdJQ0FnSUNBdkx5QnRaWEpuWlNCaFpHcGhZMlZ1ZENCMFpYaDBJRzV2WkdWelhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzFSbGVIUk9iMlJsS0dOYk1GMHBJQ1ltSUdselZHVjRkRTV2WkdVb2JHRnpkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE5iYkdGemRFbHVaR1Y0WFNBOUlHTnlaV0YwWlZSbGVIUldUbTlrWlNoc1lYTjBMblJsZUhRZ0t5QW9ZMXN3WFNrdWRHVjRkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1l5NXphR2xtZENncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsY3k1d2RYTm9MbUZ3Y0d4NUtISmxjeXdnWXlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNocGMxQnlhVzFwZEdsMlpTaGpLU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpWR1Y0ZEU1dlpHVW9iR0Z6ZENrcElIdGNiaUFnSUNBZ0lDQWdMeThnYldWeVoyVWdZV1JxWVdObGJuUWdkR1Y0ZENCdWIyUmxjMXh1SUNBZ0lDQWdJQ0F2THlCMGFHbHpJR2x6SUc1bFkyVnpjMkZ5ZVNCbWIzSWdVMU5TSUdoNVpISmhkR2x2YmlCaVpXTmhkWE5sSUhSbGVIUWdibTlrWlhNZ1lYSmxYRzRnSUNBZ0lDQWdJQzh2SUdWemMyVnVkR2xoYkd4NUlHMWxjbWRsWkNCM2FHVnVJSEpsYm1SbGNtVmtJSFJ2SUVoVVRVd2djM1J5YVc1bmMxeHVJQ0FnSUNBZ0lDQnlaWE5iYkdGemRFbHVaR1Y0WFNBOUlHTnlaV0YwWlZSbGVIUldUbTlrWlNoc1lYTjBMblJsZUhRZ0t5QmpLVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWXlBaFBUMGdKeWNwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdZMjl1ZG1WeWRDQndjbWx0YVhScGRtVWdkRzhnZG01dlpHVmNiaUFnSUNBZ0lDQWdjbVZ6TG5CMWMyZ29ZM0psWVhSbFZHVjRkRlpPYjJSbEtHTXBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2FXWWdLR2x6VkdWNGRFNXZaR1VvWXlrZ0ppWWdhWE5VWlhoMFRtOWtaU2hzWVhOMEtTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCdFpYSm5aU0JoWkdwaFkyVnVkQ0IwWlhoMElHNXZaR1Z6WEc0Z0lDQWdJQ0FnSUhKbGMxdHNZWE4wU1c1a1pYaGRJRDBnWTNKbFlYUmxWR1Y0ZEZaT2IyUmxLR3hoYzNRdWRHVjRkQ0FySUdNdWRHVjRkQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2THlCa1pXWmhkV3gwSUd0bGVTQm1iM0lnYm1WemRHVmtJR0Z5Y21GNUlHTm9hV3hrY21WdUlDaHNhV3RsYkhrZ1oyVnVaWEpoZEdWa0lHSjVJSFl0Wm05eUtWeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOVWNuVmxLR05vYVd4a2NtVnVMbDlwYzFaTWFYTjBLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lHbHpSR1ZtS0dNdWRHRm5LU0FtSmx4dUlDQWdJQ0FnSUNBZ0lHbHpWVzVrWldZb1l5NXJaWGtwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdhWE5FWldZb2JtVnpkR1ZrU1c1a1pYZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1l5NXJaWGtnUFNCY0lsOWZkbXhwYzNSY0lpQXJJRzVsYzNSbFpFbHVaR1Y0SUNzZ1hDSmZYQ0lnS3lCcElDc2dYQ0pmWDF3aU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsY3k1d2RYTm9LR01wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJsYm5OMWNtVkRkRzl5SUNoamIyMXdMQ0JpWVhObEtTQjdYRzRnSUdsbUlDaGNiaUFnSUNCamIyMXdMbDlmWlhOTmIyUjFiR1VnZkh4Y2JpQWdJQ0FvYUdGelUzbHRZbTlzSUNZbUlHTnZiWEJiVTNsdFltOXNMblJ2VTNSeWFXNW5WR0ZuWFNBOVBUMGdKMDF2WkhWc1pTY3BYRzRnSUNrZ2UxeHVJQ0FnSUdOdmJYQWdQU0JqYjIxd0xtUmxabUYxYkhRN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdselQySnFaV04wS0dOdmJYQXBYRzRnSUNBZ1B5QmlZWE5sTG1WNGRHVnVaQ2hqYjIxd0tWeHVJQ0FnSURvZ1kyOXRjRnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWQmMzbHVZMUJzWVdObGFHOXNaR1Z5SUNoY2JpQWdabUZqZEc5eWVTeGNiaUFnWkdGMFlTeGNiaUFnWTI5dWRHVjRkQ3hjYmlBZ1kyaHBiR1J5Wlc0c1hHNGdJSFJoWjF4dUtTQjdYRzRnSUhaaGNpQnViMlJsSUQwZ1kzSmxZWFJsUlcxd2RIbFdUbTlrWlNncE8xeHVJQ0J1YjJSbExtRnplVzVqUm1GamRHOXllU0E5SUdaaFkzUnZjbms3WEc0Z0lHNXZaR1V1WVhONWJtTk5aWFJoSUQwZ2V5QmtZWFJoT2lCa1lYUmhMQ0JqYjI1MFpYaDBPaUJqYjI1MFpYaDBMQ0JqYUdsc1pISmxiam9nWTJocGJHUnlaVzRzSUhSaFp6b2dkR0ZuSUgwN1hHNGdJSEpsZEhWeWJpQnViMlJsWEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsYzI5c2RtVkJjM2x1WTBOdmJYQnZibVZ1ZENBb1hHNGdJR1poWTNSdmNua3NYRzRnSUdKaGMyVkRkRzl5TEZ4dUlDQmpiMjUwWlhoMFhHNHBJSHRjYmlBZ2FXWWdLR2x6VkhKMVpTaG1ZV04wYjNKNUxtVnljbTl5S1NBbUppQnBjMFJsWmlobVlXTjBiM0o1TG1WeWNtOXlRMjl0Y0NrcElIdGNiaUFnSUNCeVpYUjFjbTRnWm1GamRHOXllUzVsY25KdmNrTnZiWEJjYmlBZ2ZWeHVYRzRnSUdsbUlDaHBjMFJsWmlobVlXTjBiM0o1TG5KbGMyOXNkbVZrS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtWVdOMGIzSjVMbkpsYzI5c2RtVmtYRzRnSUgxY2JseHVJQ0JwWmlBb2FYTlVjblZsS0daaFkzUnZjbmt1Ykc5aFpHbHVaeWtnSmlZZ2FYTkVaV1lvWm1GamRHOXllUzVzYjJGa2FXNW5RMjl0Y0NrcElIdGNiaUFnSUNCeVpYUjFjbTRnWm1GamRHOXllUzVzYjJGa2FXNW5RMjl0Y0Z4dUlDQjlYRzVjYmlBZ2FXWWdLR2x6UkdWbUtHWmhZM1J2Y25rdVkyOXVkR1Y0ZEhNcEtTQjdYRzRnSUNBZ0x5OGdZV3h5WldGa2VTQndaVzVrYVc1blhHNGdJQ0FnWm1GamRHOXllUzVqYjI1MFpYaDBjeTV3ZFhOb0tHTnZiblJsZUhRcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIWmhjaUJqYjI1MFpYaDBjeUE5SUdaaFkzUnZjbmt1WTI5dWRHVjRkSE1nUFNCYlkyOXVkR1Y0ZEYwN1hHNGdJQ0FnZG1GeUlITjVibU1nUFNCMGNuVmxPMXh1WEc0Z0lDQWdkbUZ5SUdadmNtTmxVbVZ1WkdWeUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3dnUFNCamIyNTBaWGgwY3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdZMjl1ZEdWNGRITmJhVjB1SkdadmNtTmxWWEJrWVhSbEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lIWmhjaUJ5WlhOdmJIWmxJRDBnYjI1alpTaG1kVzVqZEdsdmJpQW9jbVZ6S1NCN1hHNGdJQ0FnSUNBdkx5QmpZV05vWlNCeVpYTnZiSFpsWkZ4dUlDQWdJQ0FnWm1GamRHOXllUzV5WlhOdmJIWmxaQ0E5SUdWdWMzVnlaVU4wYjNJb2NtVnpMQ0JpWVhObFEzUnZjaWs3WEc0Z0lDQWdJQ0F2THlCcGJuWnZhMlVnWTJGc2JHSmhZMnR6SUc5dWJIa2dhV1lnZEdocGN5QnBjeUJ1YjNRZ1lTQnplVzVqYUhKdmJtOTFjeUJ5WlhOdmJIWmxYRzRnSUNBZ0lDQXZMeUFvWVhONWJtTWdjbVZ6YjJ4MlpYTWdZWEpsSUhOb2FXMXRaV1FnWVhNZ2MzbHVZMmh5YjI1dmRYTWdaSFZ5YVc1bklGTlRVaWxjYmlBZ0lDQWdJR2xtSUNnaGMzbHVZeWtnZTF4dUlDQWdJQ0FnSUNCbWIzSmpaVkpsYm1SbGNpZ3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdkbUZ5SUhKbGFtVmpkQ0E5SUc5dVkyVW9ablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCM1lYSnVLRnh1SUNBZ0lDQWdJQ0JjSWtaaGFXeGxaQ0IwYnlCeVpYTnZiSFpsSUdGemVXNWpJR052YlhCdmJtVnVkRG9nWENJZ0t5QW9VM1J5YVc1bktHWmhZM1J2Y25rcEtTQXJYRzRnSUNBZ0lDQWdJQ2h5WldGemIyNGdQeUFvWENKY1hHNVNaV0Z6YjI0NklGd2lJQ3NnY21WaGMyOXVLU0E2SUNjbktWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lHbG1JQ2hwYzBSbFppaG1ZV04wYjNKNUxtVnljbTl5UTI5dGNDa3BJSHRjYmlBZ0lDQWdJQ0FnWm1GamRHOXllUzVsY25KdmNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lHWnZjbU5sVW1WdVpHVnlLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0IyWVhJZ2NtVnpJRDBnWm1GamRHOXllU2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBPMXh1WEc0Z0lDQWdhV1lnS0dselQySnFaV04wS0hKbGN5a3BJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY21WekxuUm9aVzRnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z0tDa2dQVDRnVUhKdmJXbHpaVnh1SUNBZ0lDQWdJQ0JwWmlBb2FYTlZibVJsWmlobVlXTjBiM0o1TG5KbGMyOXNkbVZrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsY3k1MGFHVnVLSEpsYzI5c2RtVXNJSEpsYW1WamRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYVhORVpXWW9jbVZ6TG1OdmJYQnZibVZ1ZENrZ0ppWWdkSGx3Wlc5bUlISmxjeTVqYjIxd2IyNWxiblF1ZEdobGJpQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE11WTI5dGNHOXVaVzUwTG5Sb1pXNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2FYTkVaV1lvY21WekxtVnljbTl5S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1poWTNSdmNua3VaWEp5YjNKRGIyMXdJRDBnWlc1emRYSmxRM1J2Y2loeVpYTXVaWEp5YjNJc0lHSmhjMlZEZEc5eUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMFJsWmloeVpYTXViRzloWkdsdVp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNCbVlXTjBiM0o1TG14dllXUnBibWREYjIxd0lEMGdaVzV6ZFhKbFEzUnZjaWh5WlhNdWJHOWhaR2x1Wnl3Z1ltRnpaVU4wYjNJcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTXVaR1ZzWVhrZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1poWTNSdmNua3ViRzloWkdsdVp5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOVmJtUmxaaWhtWVdOMGIzSjVMbkpsYzI5c2RtVmtLU0FtSmlCcGMxVnVaR1ZtS0daaFkzUnZjbmt1WlhKeWIzSXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1GamRHOXllUzVzYjJGa2FXNW5JRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0pqWlZKbGJtUmxjaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0J5WlhNdVpHVnNZWGtnZkh3Z01qQXdLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2FYTkVaV1lvY21WekxuUnBiV1Z2ZFhRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWE5WYm1SbFppaG1ZV04wYjNKNUxuSmxjMjlzZG1Wa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQeUFvWENKMGFXMWxiM1YwSUNoY0lpQXJJQ2h5WlhNdWRHbHRaVzkxZENrZ0t5QmNJbTF6S1Z3aUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJ1ZFd4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZTd2djbVZ6TG5ScGJXVnZkWFFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNsdVl5QTlJR1poYkhObE8xeHVJQ0FnSUM4dklISmxkSFZ5YmlCcGJpQmpZWE5sSUhKbGMyOXNkbVZrSUhONWJtTm9jbTl1YjNWemJIbGNiaUFnSUNCeVpYUjFjbTRnWm1GamRHOXllUzVzYjJGa2FXNW5YRzRnSUNBZ0lDQS9JR1poWTNSdmNua3ViRzloWkdsdVowTnZiWEJjYmlBZ0lDQWdJRG9nWm1GamRHOXllUzV5WlhOdmJIWmxaRnh1SUNCOVhHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCcGMwRnplVzVqVUd4aFkyVm9iMnhrWlhJZ0tHNXZaR1VwSUh0Y2JpQWdjbVYwZFhKdUlHNXZaR1V1YVhORGIyMXRaVzUwSUNZbUlHNXZaR1V1WVhONWJtTkdZV04wYjNKNVhHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCblpYUkdhWEp6ZEVOdmJYQnZibVZ1ZEVOb2FXeGtJQ2hqYUdsc1pISmxiaWtnZTF4dUlDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGphR2xzWkhKbGJpa3BJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR05vYVd4a2NtVnVMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdZeUE5SUdOb2FXeGtjbVZ1VzJsZE8xeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHTXBJQ1ltSUNocGMwUmxaaWhqTG1OdmJYQnZibVZ1ZEU5d2RHbHZibk1wSUh4OElHbHpRWE41Ym1OUWJHRmpaV2h2YkdSbGNpaGpLU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQnBibWwwUlhabGJuUnpJQ2gyYlNrZ2UxeHVJQ0IyYlM1ZlpYWmxiblJ6SUQwZ1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tUdGNiaUFnZG0wdVgyaGhjMGh2YjJ0RmRtVnVkQ0E5SUdaaGJITmxPMXh1SUNBdkx5QnBibWwwSUhCaGNtVnVkQ0JoZEhSaFkyaGxaQ0JsZG1WdWRITmNiaUFnZG1GeUlHeHBjM1JsYm1WeWN5QTlJSFp0TGlSdmNIUnBiMjV6TGw5d1lYSmxiblJNYVhOMFpXNWxjbk03WEc0Z0lHbG1JQ2hzYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0IxY0dSaGRHVkRiMjF3YjI1bGJuUk1hWE4wWlc1bGNuTW9kbTBzSUd4cGMzUmxibVZ5Y3lrN1hHNGdJSDFjYm4xY2JseHVkbUZ5SUhSaGNtZGxkRHRjYmx4dVpuVnVZM1JwYjI0Z1lXUmtJQ2hsZG1WdWRDd2dabTRzSUc5dVkyVXBJSHRjYmlBZ2FXWWdLRzl1WTJVcElIdGNiaUFnSUNCMFlYSm5aWFF1Skc5dVkyVW9aWFpsYm5Rc0lHWnVLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwWVhKblpYUXVKRzl1S0dWMlpXNTBMQ0JtYmlrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ0YjNabEpERWdLR1YyWlc1MExDQm1iaWtnZTF4dUlDQjBZWEpuWlhRdUpHOW1aaWhsZG1WdWRDd2dabTRwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUIxY0dSaGRHVkRiMjF3YjI1bGJuUk1hWE4wWlc1bGNuTWdLRnh1SUNCMmJTeGNiaUFnYkdsemRHVnVaWEp6TEZ4dUlDQnZiR1JNYVhOMFpXNWxjbk5jYmlrZ2UxeHVJQ0IwWVhKblpYUWdQU0IyYlR0Y2JpQWdkWEJrWVhSbFRHbHpkR1Z1WlhKektHeHBjM1JsYm1WeWN5d2diMnhrVEdsemRHVnVaWEp6SUh4OElIdDlMQ0JoWkdRc0lISmxiVzkyWlNReExDQjJiU2s3WEc0Z0lIUmhjbWRsZENBOUlIVnVaR1ZtYVc1bFpEdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1pYWmxiblJ6VFdsNGFXNGdLRloxWlNrZ2UxeHVJQ0IyWVhJZ2FHOXZhMUpGSUQwZ0wxNW9iMjlyT2k4N1hHNGdJRloxWlM1d2NtOTBiM1I1Y0dVdUpHOXVJRDBnWm5WdVkzUnBiMjRnS0dWMlpXNTBMQ0JtYmlrZ2UxeHVJQ0FnSUhaaGNpQjBhR2x6SkRFZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnZG1GeUlIWnRJRDBnZEdocGN6dGNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNobGRtVnVkQ2twSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1pYWmxiblF1YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE1rTVM0a2IyNG9aWFpsYm5SYmFWMHNJR1p1S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdLSFp0TGw5bGRtVnVkSE5iWlhabGJuUmRJSHg4SUNoMmJTNWZaWFpsYm5SelcyVjJaVzUwWFNBOUlGdGRLU2t1Y0hWemFDaG1iaWs3WEc0Z0lDQWdJQ0F2THlCdmNIUnBiV2w2WlNCb2IyOXJPbVYyWlc1MElHTnZjM1FnWW5rZ2RYTnBibWNnWVNCaWIyOXNaV0Z1SUdac1lXY2diV0Z5YTJWa0lHRjBJSEpsWjJsemRISmhkR2x2Ymx4dUlDQWdJQ0FnTHk4Z2FXNXpkR1ZoWkNCdlppQmhJR2hoYzJnZ2JHOXZhM1Z3WEc0Z0lDQWdJQ0JwWmlBb2FHOXZhMUpGTG5SbGMzUW9aWFpsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJSFp0TGw5b1lYTkliMjlyUlhabGJuUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkbTFjYmlBZ2ZUdGNibHh1SUNCV2RXVXVjSEp2ZEc5MGVYQmxMaVJ2Ym1ObElEMGdablZ1WTNScGIyNGdLR1YyWlc1MExDQm1iaWtnZTF4dUlDQWdJSFpoY2lCMmJTQTlJSFJvYVhNN1hHNGdJQ0FnWm5WdVkzUnBiMjRnYjI0Z0tDa2dlMXh1SUNBZ0lDQWdkbTB1Skc5bVppaGxkbVZ1ZEN3Z2IyNHBPMXh1SUNBZ0lDQWdabTR1WVhCd2JIa29kbTBzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZlZ4dUlDQWdJRzl1TG1adUlEMGdabTQ3WEc0Z0lDQWdkbTB1Skc5dUtHVjJaVzUwTENCdmJpazdYRzRnSUNBZ2NtVjBkWEp1SUhadFhHNGdJSDA3WEc1Y2JpQWdWblZsTG5CeWIzUnZkSGx3WlM0a2IyWm1JRDBnWm5WdVkzUnBiMjRnS0dWMlpXNTBMQ0JtYmlrZ2UxeHVJQ0FnSUhaaGNpQjBhR2x6SkRFZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnZG1GeUlIWnRJRDBnZEdocGN6dGNiaUFnSUNBdkx5QmhiR3hjYmlBZ0lDQnBaaUFvSVdGeVozVnRaVzUwY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUhadExsOWxkbVZ1ZEhNZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIWnRYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHRnljbUY1SUc5bUlHVjJaVzUwYzF4dUlDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1YyWlc1MEtTa2dlMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0JsZG1WdWRDNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5UXhMaVJ2Wm1Zb1pYWmxiblJiYVYwc0lHWnVLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQjJiVnh1SUNBZ0lIMWNiaUFnSUNBdkx5QnpjR1ZqYVdacFl5QmxkbVZ1ZEZ4dUlDQWdJSFpoY2lCalluTWdQU0IyYlM1ZlpYWmxiblJ6VzJWMlpXNTBYVHRjYmlBZ0lDQnBaaUFvSVdOaWN5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIWnRYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDZ2habTRwSUh0Y2JpQWdJQ0FnSUhadExsOWxkbVZ1ZEhOYlpYWmxiblJkSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjJiVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9abTRwSUh0Y2JpQWdJQ0FnSUM4dklITndaV05wWm1saklHaGhibVJzWlhKY2JpQWdJQ0FnSUhaaGNpQmpZanRjYmlBZ0lDQWdJSFpoY2lCcEpERWdQU0JqWW5NdWJHVnVaM1JvTzF4dUlDQWdJQ0FnZDJocGJHVWdLR2trTVMwdEtTQjdYRzRnSUNBZ0lDQWdJR05pSUQwZ1kySnpXMmtrTVYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqWWlBOVBUMGdabTRnZkh3Z1kySXVabTRnUFQwOUlHWnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kySnpMbk53YkdsalpTaHBKREVzSURFcE8xeHVJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFp0WEc0Z0lIMDdYRzVjYmlBZ1ZuVmxMbkJ5YjNSdmRIbHdaUzRrWlcxcGRDQTlJR1oxYm1OMGFXOXVJQ2hsZG1WdWRDa2dlMXh1SUNBZ0lIWmhjaUIyYlNBOUlIUm9hWE03WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lIWmhjaUJzYjNkbGNrTmhjMlZGZG1WdWRDQTlJR1YyWlc1MExuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDQWdJQ0JwWmlBb2JHOTNaWEpEWVhObFJYWmxiblFnSVQwOUlHVjJaVzUwSUNZbUlIWnRMbDlsZG1WdWRITmJiRzkzWlhKRFlYTmxSWFpsYm5SZEtTQjdYRzRnSUNBZ0lDQWdJSFJwY0NoY2JpQWdJQ0FnSUNBZ0lDQmNJa1YyWlc1MElGeGNYQ0pjSWlBcklHeHZkMlZ5UTJGelpVVjJaVzUwSUNzZ1hDSmNYRndpSUdseklHVnRhWFIwWldRZ2FXNGdZMjl0Y0c5dVpXNTBJRndpSUN0Y2JpQWdJQ0FnSUNBZ0lDQW9abTl5YldGMFEyOXRjRzl1Wlc1MFRtRnRaU2gyYlNrcElDc2dYQ0lnWW5WMElIUm9aU0JvWVc1a2JHVnlJR2x6SUhKbFoybHpkR1Z5WldRZ1ptOXlJRnhjWENKY0lpQXJJR1YyWlc1MElDc2dYQ0pjWEZ3aUxpQmNJaUFyWEc0Z0lDQWdJQ0FnSUNBZ1hDSk9iM1JsSUhSb1lYUWdTRlJOVENCaGRIUnlhV0oxZEdWeklHRnlaU0JqWVhObExXbHVjMlZ1YzJsMGFYWmxJR0Z1WkNCNWIzVWdZMkZ1Ym05MElIVnpaU0JjSWlBclhHNGdJQ0FnSUNBZ0lDQWdYQ0oyTFc5dUlIUnZJR3hwYzNSbGJpQjBieUJqWVcxbGJFTmhjMlVnWlhabGJuUnpJSGRvWlc0Z2RYTnBibWNnYVc0dFJFOU5JSFJsYlhCc1lYUmxjeTRnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJRndpV1c5MUlITm9iM1ZzWkNCd2NtOWlZV0pzZVNCMWMyVWdYRnhjSWx3aUlDc2dLR2g1Y0dobGJtRjBaU2hsZG1WdWRDa3BJQ3NnWENKY1hGd2lJR2x1YzNSbFlXUWdiMllnWEZ4Y0lsd2lJQ3NnWlhabGJuUWdLeUJjSWx4Y1hDSXVYQ0pjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUdOaWN5QTlJSFp0TGw5bGRtVnVkSE5iWlhabGJuUmRPMXh1SUNBZ0lHbG1JQ2hqWW5NcElIdGNiaUFnSUNBZ0lHTmljeUE5SUdOaWN5NXNaVzVuZEdnZ1BpQXhJRDhnZEc5QmNuSmhlU2hqWW5NcElEb2dZMkp6TzF4dUlDQWdJQ0FnZG1GeUlHRnlaM01nUFNCMGIwRnljbUY1S0dGeVozVnRaVzUwY3l3Z01TazdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR05pY3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQmpZbk5iYVYwdVlYQndiSGtvZG0wc0lHRnlaM01wTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxSWEp5YjNJb1pTd2dkbTBzSUNoY0ltVjJaVzUwSUdoaGJtUnNaWElnWm05eUlGeGNYQ0pjSWlBcklHVjJaVzUwSUNzZ1hDSmNYRndpWENJcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZG0xY2JpQWdmVHRjYm4xY2JseHVMeW9nSUNvdlhHNWNibHh1WEc0dktpcGNiaUFxSUZKMWJuUnBiV1VnYUdWc2NHVnlJR1p2Y2lCeVpYTnZiSFpwYm1jZ2NtRjNJR05vYVd4a2NtVnVJRlpPYjJSbGN5QnBiblJ2SUdFZ2MyeHZkQ0J2WW1wbFkzUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlISmxjMjlzZG1WVGJHOTBjeUFvWEc0Z0lHTm9hV3hrY21WdUxGeHVJQ0JqYjI1MFpYaDBYRzRwSUh0Y2JpQWdkbUZ5SUhOc2IzUnpJRDBnZTMwN1hHNGdJR2xtSUNnaFkyaHBiR1J5Wlc0cElIdGNiaUFnSUNCeVpYUjFjbTRnYzJ4dmRITmNiaUFnZlZ4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR05vYVd4a2NtVnVMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCamFHbHNaQ0E5SUdOb2FXeGtjbVZ1VzJsZE8xeHVJQ0FnSUhaaGNpQmtZWFJoSUQwZ1kyaHBiR1F1WkdGMFlUdGNiaUFnSUNBdkx5QnlaVzF2ZG1VZ2MyeHZkQ0JoZEhSeWFXSjFkR1VnYVdZZ2RHaGxJRzV2WkdVZ2FYTWdjbVZ6YjJ4MlpXUWdZWE1nWVNCV2RXVWdjMnh2ZENCdWIyUmxYRzRnSUNBZ2FXWWdLR1JoZEdFZ0ppWWdaR0YwWVM1aGRIUnljeUFtSmlCa1lYUmhMbUYwZEhKekxuTnNiM1FwSUh0Y2JpQWdJQ0FnSUdSbGJHVjBaU0JrWVhSaExtRjBkSEp6TG5Oc2IzUTdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHNWhiV1ZrSUhOc2IzUnpJSE5vYjNWc1pDQnZibXg1SUdKbElISmxjM0JsWTNSbFpDQnBaaUIwYUdVZ2RtNXZaR1VnZDJGeklISmxibVJsY21Wa0lHbHVJSFJvWlZ4dUlDQWdJQzh2SUhOaGJXVWdZMjl1ZEdWNGRDNWNiaUFnSUNCcFppQW9LR05vYVd4a0xtTnZiblJsZUhRZ1BUMDlJR052Ym5SbGVIUWdmSHdnWTJocGJHUXVabTVEYjI1MFpYaDBJRDA5UFNCamIyNTBaWGgwS1NBbUpseHVJQ0FnSUNBZ1pHRjBZU0FtSmlCa1lYUmhMbk5zYjNRZ0lUMGdiblZzYkZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHNWhiV1VnUFNCa1lYUmhMbk5zYjNRN1hHNGdJQ0FnSUNCMllYSWdjMnh2ZENBOUlDaHpiRzkwYzF0dVlXMWxYU0I4ZkNBb2MyeHZkSE5iYm1GdFpWMGdQU0JiWFNrcE8xeHVJQ0FnSUNBZ2FXWWdLR05vYVd4a0xuUmhaeUE5UFQwZ0ozUmxiWEJzWVhSbEp5a2dlMXh1SUNBZ0lDQWdJQ0J6Ykc5MExuQjFjMmd1WVhCd2JIa29jMnh2ZEN3Z1kyaHBiR1F1WTJocGJHUnlaVzRnZkh3Z1cxMHBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjMnh2ZEM1d2RYTm9LR05vYVd4a0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnS0hOc2IzUnpMbVJsWm1GMWJIUWdmSHdnS0hOc2IzUnpMbVJsWm1GMWJIUWdQU0JiWFNrcExuQjFjMmdvWTJocGJHUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQXZMeUJwWjI1dmNtVWdjMnh2ZEhNZ2RHaGhkQ0JqYjI1MFlXbHVjeUJ2Ym14NUlIZG9hWFJsYzNCaFkyVmNiaUFnWm05eUlDaDJZWElnYm1GdFpTUXhJR2x1SUhOc2IzUnpLU0I3WEc0Z0lDQWdhV1lnS0hOc2IzUnpXMjVoYldVa01WMHVaWFpsY25rb2FYTlhhR2wwWlhOd1lXTmxLU2tnZTF4dUlDQWdJQ0FnWkdWc1pYUmxJSE5zYjNSelcyNWhiV1VrTVYwN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ6Ykc5MGMxeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMxZG9hWFJsYzNCaFkyVWdLRzV2WkdVcElIdGNiaUFnY21WMGRYSnVJQ2h1YjJSbExtbHpRMjl0YldWdWRDQW1KaUFoYm05a1pTNWhjM2x1WTBaaFkzUnZjbmtwSUh4OElHNXZaR1V1ZEdWNGRDQTlQVDBnSnlBblhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGMyOXNkbVZUWTI5d1pXUlRiRzkwY3lBb1hHNGdJR1p1Y3l3Z0x5OGdjMlZsSUdac2IzY3ZkbTV2WkdWY2JpQWdjbVZ6WEc0cElIdGNiaUFnY21WeklEMGdjbVZ6SUh4OElIdDlPMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHWnVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0dadWMxdHBYU2twSUh0Y2JpQWdJQ0FnSUhKbGMyOXNkbVZUWTI5d1pXUlRiRzkwY3lobWJuTmJhVjBzSUhKbGN5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGMxdG1ibk5iYVYwdWEyVjVYU0E5SUdadWMxdHBYUzVtYmp0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsYzF4dWZWeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlHRmpkR2wyWlVsdWMzUmhibU5sSUQwZ2JuVnNiRHRjYm5aaGNpQnBjMVZ3WkdGMGFXNW5RMmhwYkdSRGIyMXdiMjVsYm5RZ1BTQm1ZV3h6WlR0Y2JseHVablZ1WTNScGIyNGdhVzVwZEV4cFptVmplV05zWlNBb2RtMHBJSHRjYmlBZ2RtRnlJRzl3ZEdsdmJuTWdQU0IyYlM0a2IzQjBhVzl1Y3p0Y2JseHVJQ0F2THlCc2IyTmhkR1VnWm1seWMzUWdibTl1TFdGaWMzUnlZV04wSUhCaGNtVnVkRnh1SUNCMllYSWdjR0Z5Wlc1MElEMGdiM0IwYVc5dWN5NXdZWEpsYm5RN1hHNGdJR2xtSUNod1lYSmxiblFnSmlZZ0lXOXdkR2x2Ym5NdVlXSnpkSEpoWTNRcElIdGNiaUFnSUNCM2FHbHNaU0FvY0dGeVpXNTBMaVJ2Y0hScGIyNXpMbUZpYzNSeVlXTjBJQ1ltSUhCaGNtVnVkQzRrY0dGeVpXNTBLU0I3WEc0Z0lDQWdJQ0J3WVhKbGJuUWdQU0J3WVhKbGJuUXVKSEJoY21WdWREdGNiaUFnSUNCOVhHNGdJQ0FnY0dGeVpXNTBMaVJqYUdsc1pISmxiaTV3ZFhOb0tIWnRLVHRjYmlBZ2ZWeHVYRzRnSUhadExpUndZWEpsYm5RZ1BTQndZWEpsYm5RN1hHNGdJSFp0TGlSeWIyOTBJRDBnY0dGeVpXNTBJRDhnY0dGeVpXNTBMaVJ5YjI5MElEb2dkbTA3WEc1Y2JpQWdkbTB1SkdOb2FXeGtjbVZ1SUQwZ1cxMDdYRzRnSUhadExpUnlaV1p6SUQwZ2UzMDdYRzVjYmlBZ2RtMHVYM2RoZEdOb1pYSWdQU0J1ZFd4c08xeHVJQ0IyYlM1ZmFXNWhZM1JwZG1VZ1BTQnVkV3hzTzF4dUlDQjJiUzVmWkdseVpXTjBTVzVoWTNScGRtVWdQU0JtWVd4elpUdGNiaUFnZG0wdVgybHpUVzkxYm5SbFpDQTlJR1poYkhObE8xeHVJQ0IyYlM1ZmFYTkVaWE4wY205NVpXUWdQU0JtWVd4elpUdGNiaUFnZG0wdVgybHpRbVZwYm1kRVpYTjBjbTk1WldRZ1BTQm1ZV3h6WlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYkdsbVpXTjVZMnhsVFdsNGFXNGdLRloxWlNrZ2UxeHVJQ0JXZFdVdWNISnZkRzkwZVhCbExsOTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9kbTV2WkdVc0lHaDVaSEpoZEdsdVp5a2dlMXh1SUNBZ0lIWmhjaUIyYlNBOUlIUm9hWE03WEc0Z0lDQWdhV1lnS0hadExsOXBjMDF2ZFc1MFpXUXBJSHRjYmlBZ0lDQWdJR05oYkd4SWIyOXJLSFp0TENBblltVm1iM0psVlhCa1lYUmxKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJ3Y21WMlJXd2dQU0IyYlM0a1pXdzdYRzRnSUNBZ2RtRnlJSEJ5WlhaV2JtOWtaU0E5SUhadExsOTJibTlrWlR0Y2JpQWdJQ0IyWVhJZ2NISmxka0ZqZEdsMlpVbHVjM1JoYm1ObElEMGdZV04wYVhabFNXNXpkR0Z1WTJVN1hHNGdJQ0FnWVdOMGFYWmxTVzV6ZEdGdVkyVWdQU0IyYlR0Y2JpQWdJQ0IyYlM1ZmRtNXZaR1VnUFNCMmJtOWtaVHRjYmlBZ0lDQXZMeUJXZFdVdWNISnZkRzkwZVhCbExsOWZjR0YwWTJoZlh5QnBjeUJwYm1wbFkzUmxaQ0JwYmlCbGJuUnllU0J3YjJsdWRITmNiaUFnSUNBdkx5QmlZWE5sWkNCdmJpQjBhR1VnY21WdVpHVnlhVzVuSUdKaFkydGxibVFnZFhObFpDNWNiaUFnSUNCcFppQW9JWEJ5WlhaV2JtOWtaU2tnZTF4dUlDQWdJQ0FnTHk4Z2FXNXBkR2xoYkNCeVpXNWtaWEpjYmlBZ0lDQWdJSFp0TGlSbGJDQTlJSFp0TGw5ZmNHRjBZMmhmWHloY2JpQWdJQ0FnSUNBZ2RtMHVKR1ZzTENCMmJtOWtaU3dnYUhsa2NtRjBhVzVuTENCbVlXeHpaU0F2S2lCeVpXMXZkbVZQYm14NUlDb3ZMRnh1SUNBZ0lDQWdJQ0IyYlM0a2IzQjBhVzl1Y3k1ZmNHRnlaVzUwUld4dExGeHVJQ0FnSUNBZ0lDQjJiUzRrYjNCMGFXOXVjeTVmY21WbVJXeHRYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdMeThnYm04Z2JtVmxaQ0JtYjNJZ2RHaGxJSEpsWmlCdWIyUmxjeUJoWm5SbGNpQnBibWwwYVdGc0lIQmhkR05vWEc0Z0lDQWdJQ0F2THlCMGFHbHpJSEJ5WlhabGJuUnpJR3RsWlhCcGJtY2dZU0JrWlhSaFkyaGxaQ0JFVDAwZ2RISmxaU0JwYmlCdFpXMXZjbmtnS0NNMU9EVXhLVnh1SUNBZ0lDQWdkbTB1Skc5d2RHbHZibk11WDNCaGNtVnVkRVZzYlNBOUlIWnRMaVJ2Y0hScGIyNXpMbDl5WldaRmJHMGdQU0J1ZFd4c08xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0F2THlCMWNHUmhkR1Z6WEc0Z0lDQWdJQ0IyYlM0a1pXd2dQU0IyYlM1ZlgzQmhkR05vWDE4b2NISmxkbFp1YjJSbExDQjJibTlrWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR0ZqZEdsMlpVbHVjM1JoYm1ObElEMGdjSEpsZGtGamRHbDJaVWx1YzNSaGJtTmxPMXh1SUNBZ0lDOHZJSFZ3WkdGMFpTQmZYM1oxWlY5ZklISmxabVZ5Wlc1alpWeHVJQ0FnSUdsbUlDaHdjbVYyUld3cElIdGNiaUFnSUNBZ0lIQnlaWFpGYkM1ZlgzWjFaVjlmSUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFp0TGlSbGJDa2dlMXh1SUNBZ0lDQWdkbTB1SkdWc0xsOWZkblZsWDE4Z1BTQjJiVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdhV1lnY0dGeVpXNTBJR2x6SUdGdUlFaFBReXdnZFhCa1lYUmxJR2wwY3lBa1pXd2dZWE1nZDJWc2JGeHVJQ0FnSUdsbUlDaDJiUzRrZG01dlpHVWdKaVlnZG0wdUpIQmhjbVZ1ZENBbUppQjJiUzRrZG01dlpHVWdQVDA5SUhadExpUndZWEpsYm5RdVgzWnViMlJsS1NCN1hHNGdJQ0FnSUNCMmJTNGtjR0Z5Wlc1MExpUmxiQ0E5SUhadExpUmxiRHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdkWEJrWVhSbFpDQm9iMjlySUdseklHTmhiR3hsWkNCaWVTQjBhR1VnYzJOb1pXUjFiR1Z5SUhSdklHVnVjM1Z5WlNCMGFHRjBJR05vYVd4a2NtVnVJR0Z5WlZ4dUlDQWdJQzh2SUhWd1pHRjBaV1FnYVc0Z1lTQndZWEpsYm5RbmN5QjFjR1JoZEdWa0lHaHZiMnN1WEc0Z0lIMDdYRzVjYmlBZ1ZuVmxMbkJ5YjNSdmRIbHdaUzRrWm05eVkyVlZjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUhadElEMGdkR2hwY3p0Y2JpQWdJQ0JwWmlBb2RtMHVYM2RoZEdOb1pYSXBJSHRjYmlBZ0lDQWdJSFp0TGw5M1lYUmphR1Z5TG5Wd1pHRjBaU2dwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCV2RXVXVjSEp2ZEc5MGVYQmxMaVJrWlhOMGNtOTVJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhaaGNpQjJiU0E5SUhSb2FYTTdYRzRnSUNBZ2FXWWdLSFp0TGw5cGMwSmxhVzVuUkdWemRISnZlV1ZrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzRnSUNBZ1kyRnNiRWh2YjJzb2RtMHNJQ2RpWldadmNtVkVaWE4wY205NUp5azdYRzRnSUNBZ2RtMHVYMmx6UW1WcGJtZEVaWE4wY205NVpXUWdQU0IwY25WbE8xeHVJQ0FnSUM4dklISmxiVzkyWlNCelpXeG1JR1p5YjIwZ2NHRnlaVzUwWEc0Z0lDQWdkbUZ5SUhCaGNtVnVkQ0E5SUhadExpUndZWEpsYm5RN1hHNGdJQ0FnYVdZZ0tIQmhjbVZ1ZENBbUppQWhjR0Z5Wlc1MExsOXBjMEpsYVc1blJHVnpkSEp2ZVdWa0lDWW1JQ0YyYlM0a2IzQjBhVzl1Y3k1aFluTjBjbUZqZENrZ2UxeHVJQ0FnSUNBZ2NtVnRiM1psS0hCaGNtVnVkQzRrWTJocGJHUnlaVzRzSUhadEtUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2RHVmhjbVJ2ZDI0Z2QyRjBZMmhsY25OY2JpQWdJQ0JwWmlBb2RtMHVYM2RoZEdOb1pYSXBJSHRjYmlBZ0lDQWdJSFp0TGw5M1lYUmphR1Z5TG5SbFlYSmtiM2R1S0NrN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCcElEMGdkbTB1WDNkaGRHTm9aWEp6TG14bGJtZDBhRHRjYmlBZ0lDQjNhR2xzWlNBb2FTMHRLU0I3WEc0Z0lDQWdJQ0IyYlM1ZmQyRjBZMmhsY25OYmFWMHVkR1ZoY21SdmQyNG9LVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdjbVZ0YjNabElISmxabVZ5Wlc1alpTQm1jbTl0SUdSaGRHRWdiMkpjYmlBZ0lDQXZMeUJtY205NlpXNGdiMkpxWldOMElHMWhlU0J1YjNRZ2FHRjJaU0J2WW5ObGNuWmxjaTVjYmlBZ0lDQnBaaUFvZG0wdVgyUmhkR0V1WDE5dllsOWZLU0I3WEc0Z0lDQWdJQ0IyYlM1ZlpHRjBZUzVmWDI5aVgxOHVkbTFEYjNWdWRDMHRPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QmpZV3hzSUhSb1pTQnNZWE4wSUdodmIyc3VMaTVjYmlBZ0lDQjJiUzVmYVhORVpYTjBjbTk1WldRZ1BTQjBjblZsTzF4dUlDQWdJQzh2SUdsdWRtOXJaU0JrWlhOMGNtOTVJR2h2YjJ0eklHOXVJR04xY25KbGJuUWdjbVZ1WkdWeVpXUWdkSEpsWlZ4dUlDQWdJSFp0TGw5ZmNHRjBZMmhmWHloMmJTNWZkbTV2WkdVc0lHNTFiR3dwTzF4dUlDQWdJQzh2SUdacGNtVWdaR1Z6ZEhKdmVXVmtJR2h2YjJ0Y2JpQWdJQ0JqWVd4c1NHOXZheWgyYlN3Z0oyUmxjM1J5YjNsbFpDY3BPMXh1SUNBZ0lDOHZJSFIxY200Z2IyWm1JR0ZzYkNCcGJuTjBZVzVqWlNCc2FYTjBaVzVsY25NdVhHNGdJQ0FnZG0wdUpHOW1aaWdwTzF4dUlDQWdJQzh2SUhKbGJXOTJaU0JmWDNaMVpWOWZJSEpsWm1WeVpXNWpaVnh1SUNBZ0lHbG1JQ2gyYlM0a1pXd3BJSHRjYmlBZ0lDQWdJSFp0TGlSbGJDNWZYM1oxWlY5ZklEMGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnY21Wc1pXRnpaU0JqYVhKamRXeGhjaUJ5WldabGNtVnVZMlVnS0NNMk56VTVLVnh1SUNBZ0lHbG1JQ2gyYlM0a2RtNXZaR1VwSUh0Y2JpQWdJQ0FnSUhadExpUjJibTlrWlM1d1lYSmxiblFnUFNCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYlc5MWJuUkRiMjF3YjI1bGJuUWdLRnh1SUNCMmJTeGNiaUFnWld3c1hHNGdJR2g1WkhKaGRHbHVaMXh1S1NCN1hHNGdJSFp0TGlSbGJDQTlJR1ZzTzF4dUlDQnBaaUFvSVhadExpUnZjSFJwYjI1ekxuSmxibVJsY2lrZ2UxeHVJQ0FnSUhadExpUnZjSFJwYjI1ekxuSmxibVJsY2lBOUlHTnlaV0YwWlVWdGNIUjVWazV2WkdVN1hHNGdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0FnSUNBZ2FXWWdLQ2gyYlM0a2IzQjBhVzl1Y3k1MFpXMXdiR0YwWlNBbUppQjJiUzRrYjNCMGFXOXVjeTUwWlcxd2JHRjBaUzVqYUdGeVFYUW9NQ2tnSVQwOUlDY2pKeWtnZkh4Y2JpQWdJQ0FnSUNBZ2RtMHVKRzl3ZEdsdmJuTXVaV3dnZkh3Z1pXd3BJSHRjYmlBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FuV1c5MUlHRnlaU0IxYzJsdVp5QjBhR1VnY25WdWRHbHRaUzF2Ym14NUlHSjFhV3hrSUc5bUlGWjFaU0IzYUdWeVpTQjBhR1VnZEdWdGNHeGhkR1VnSnlBclhHNGdJQ0FnSUNBZ0lDQWdKMk52YlhCcGJHVnlJR2x6SUc1dmRDQmhkbUZwYkdGaWJHVXVJRVZwZEdobGNpQndjbVV0WTI5dGNHbHNaU0IwYUdVZ2RHVnRjR3hoZEdWeklHbHVkRzhnSnlBclhHNGdJQ0FnSUNBZ0lDQWdKM0psYm1SbGNpQm1kVzVqZEdsdmJuTXNJRzl5SUhWelpTQjBhR1VnWTI5dGNHbHNaWEl0YVc1amJIVmtaV1FnWW5WcGJHUXVKeXhjYmlBZ0lDQWdJQ0FnSUNCMmJWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUNBZ0lDQW5SbUZwYkdWa0lIUnZJRzF2ZFc1MElHTnZiWEJ2Ym1WdWREb2dkR1Z0Y0d4aGRHVWdiM0lnY21WdVpHVnlJR1oxYm1OMGFXOXVJRzV2ZENCa1pXWnBibVZrTGljc1hHNGdJQ0FnSUNBZ0lDQWdkbTFjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnWTJGc2JFaHZiMnNvZG0wc0lDZGlaV1p2Y21WTmIzVnVkQ2NwTzF4dVhHNGdJSFpoY2lCMWNHUmhkR1ZEYjIxd2IyNWxiblE3WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQmpiMjVtYVdjdWNHVnlabTl5YldGdVkyVWdKaVlnYldGeWF5a2dlMXh1SUNBZ0lIVndaR0YwWlVOdmJYQnZibVZ1ZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCdVlXMWxJRDBnZG0wdVgyNWhiV1U3WEc0Z0lDQWdJQ0IyWVhJZ2FXUWdQU0IyYlM1ZmRXbGtPMXh1SUNBZ0lDQWdkbUZ5SUhOMFlYSjBWR0ZuSUQwZ1hDSjJkV1V0Y0dWeVppMXpkR0Z5ZERwY0lpQXJJR2xrTzF4dUlDQWdJQ0FnZG1GeUlHVnVaRlJoWnlBOUlGd2lkblZsTFhCbGNtWXRaVzVrT2x3aUlDc2dhV1E3WEc1Y2JpQWdJQ0FnSUcxaGNtc29jM1JoY25SVVlXY3BPMXh1SUNBZ0lDQWdkbUZ5SUhadWIyUmxJRDBnZG0wdVgzSmxibVJsY2lncE8xeHVJQ0FnSUNBZ2JXRnlheWhsYm1SVVlXY3BPMXh1SUNBZ0lDQWdiV1ZoYzNWeVpTZ29YQ0oyZFdVZ1hDSWdLeUJ1WVcxbElDc2dYQ0lnY21WdVpHVnlYQ0lwTENCemRHRnlkRlJoWnl3Z1pXNWtWR0ZuS1R0Y2JseHVJQ0FnSUNBZ2JXRnlheWh6ZEdGeWRGUmhaeWs3WEc0Z0lDQWdJQ0IyYlM1ZmRYQmtZWFJsS0hadWIyUmxMQ0JvZVdSeVlYUnBibWNwTzF4dUlDQWdJQ0FnYldGeWF5aGxibVJVWVdjcE8xeHVJQ0FnSUNBZ2JXVmhjM1Z5WlNnb1hDSjJkV1VnWENJZ0t5QnVZVzFsSUNzZ1hDSWdjR0YwWTJoY0lpa3NJSE4wWVhKMFZHRm5MQ0JsYm1SVVlXY3BPMXh1SUNBZ0lIMDdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkWEJrWVhSbFEyOXRjRzl1Wlc1MElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnZG0wdVgzVndaR0YwWlNoMmJTNWZjbVZ1WkdWeUtDa3NJR2g1WkhKaGRHbHVaeWs3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUM4dklIZGxJSE5sZENCMGFHbHpJSFJ2SUhadExsOTNZWFJqYUdWeUlHbHVjMmxrWlNCMGFHVWdkMkYwWTJobGNpZHpJR052Ym5OMGNuVmpkRzl5WEc0Z0lDOHZJSE5wYm1ObElIUm9aU0IzWVhSamFHVnlKM01nYVc1cGRHbGhiQ0J3WVhSamFDQnRZWGtnWTJGc2JDQWtabTl5WTJWVmNHUmhkR1VnS0dVdVp5NGdhVzV6YVdSbElHTm9hV3hrWEc0Z0lDOHZJR052YlhCdmJtVnVkQ2R6SUcxdmRXNTBaV1FnYUc5dmF5a3NJSGRvYVdOb0lISmxiR2xsY3lCdmJpQjJiUzVmZDJGMFkyaGxjaUJpWldsdVp5QmhiSEpsWVdSNUlHUmxabWx1WldSY2JpQWdibVYzSUZkaGRHTm9aWElvZG0wc0lIVndaR0YwWlVOdmJYQnZibVZ1ZEN3Z2JtOXZjQ3dnYm5Wc2JDd2dkSEoxWlNBdktpQnBjMUpsYm1SbGNsZGhkR05vWlhJZ0tpOHBPMXh1SUNCb2VXUnlZWFJwYm1jZ1BTQm1ZV3h6WlR0Y2JseHVJQ0F2THlCdFlXNTFZV3hzZVNCdGIzVnVkR1ZrSUdsdWMzUmhibU5sTENCallXeHNJRzF2ZFc1MFpXUWdiMjRnYzJWc1pseHVJQ0F2THlCdGIzVnVkR1ZrSUdseklHTmhiR3hsWkNCbWIzSWdjbVZ1WkdWeUxXTnlaV0YwWldRZ1kyaHBiR1FnWTI5dGNHOXVaVzUwY3lCcGJpQnBkSE1nYVc1elpYSjBaV1FnYUc5dmExeHVJQ0JwWmlBb2RtMHVKSFp1YjJSbElEMDlJRzUxYkd3cElIdGNiaUFnSUNCMmJTNWZhWE5OYjNWdWRHVmtJRDBnZEhKMVpUdGNiaUFnSUNCallXeHNTRzl2YXloMmJTd2dKMjF2ZFc1MFpXUW5LVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkbTFjYm4xY2JseHVablZ1WTNScGIyNGdkWEJrWVhSbFEyaHBiR1JEYjIxd2IyNWxiblFnS0Z4dUlDQjJiU3hjYmlBZ2NISnZjSE5FWVhSaExGeHVJQ0JzYVhOMFpXNWxjbk1zWEc0Z0lIQmhjbVZ1ZEZadWIyUmxMRnh1SUNCeVpXNWtaWEpEYUdsc1pISmxibHh1S1NCN1hHNGdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ2FYTlZjR1JoZEdsdVowTm9hV3hrUTI5dGNHOXVaVzUwSUQwZ2RISjFaVHRjYmlBZ2ZWeHVYRzRnSUM4dklHUmxkR1Z5YldsdVpTQjNhR1YwYUdWeUlHTnZiWEJ2Ym1WdWRDQm9ZWE1nYzJ4dmRDQmphR2xzWkhKbGJseHVJQ0F2THlCM1pTQnVaV1ZrSUhSdklHUnZJSFJvYVhNZ1ltVm1iM0psSUc5MlpYSjNjbWwwYVc1bklDUnZjSFJwYjI1ekxsOXlaVzVrWlhKRGFHbHNaSEpsYmx4dUlDQjJZWElnYUdGelEyaHBiR1J5Wlc0Z1BTQWhJU2hjYmlBZ0lDQnlaVzVrWlhKRGFHbHNaSEpsYmlCOGZDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHaGhjeUJ1WlhjZ2MzUmhkR2xqSUhOc2IzUnpYRzRnSUNBZ2RtMHVKRzl3ZEdsdmJuTXVYM0psYm1SbGNrTm9hV3hrY21WdUlIeDhJQ0F2THlCb1lYTWdiMnhrSUhOMFlYUnBZeUJ6Ykc5MGMxeHVJQ0FnSUhCaGNtVnVkRlp1YjJSbExtUmhkR0V1YzJOdmNHVmtVMnh2ZEhNZ2ZId2dMeThnYUdGeklHNWxkeUJ6WTI5d1pXUWdjMnh2ZEhOY2JpQWdJQ0IyYlM0a2MyTnZjR1ZrVTJ4dmRITWdJVDA5SUdWdGNIUjVUMkpxWldOMElDOHZJR2hoY3lCdmJHUWdjMk52Y0dWa0lITnNiM1J6WEc0Z0lDazdYRzVjYmlBZ2RtMHVKRzl3ZEdsdmJuTXVYM0JoY21WdWRGWnViMlJsSUQwZ2NHRnlaVzUwVm01dlpHVTdYRzRnSUhadExpUjJibTlrWlNBOUlIQmhjbVZ1ZEZadWIyUmxPeUF2THlCMWNHUmhkR1VnZG0wbmN5QndiR0ZqWldodmJHUmxjaUJ1YjJSbElIZHBkR2h2ZFhRZ2NtVXRjbVZ1WkdWeVhHNWNiaUFnYVdZZ0tIWnRMbDkyYm05a1pTa2dleUF2THlCMWNHUmhkR1VnWTJocGJHUWdkSEpsWlNkeklIQmhjbVZ1ZEZ4dUlDQWdJSFp0TGw5MmJtOWtaUzV3WVhKbGJuUWdQU0J3WVhKbGJuUldibTlrWlR0Y2JpQWdmVnh1SUNCMmJTNGtiM0IwYVc5dWN5NWZjbVZ1WkdWeVEyaHBiR1J5Wlc0Z1BTQnlaVzVrWlhKRGFHbHNaSEpsYmp0Y2JseHVJQ0F2THlCMWNHUmhkR1VnSkdGMGRISnpJR0Z1WkNBa2JHbHpkR1Z1WlhKeklHaGhjMmhjYmlBZ0x5OGdkR2hsYzJVZ1lYSmxJR0ZzYzI4Z2NtVmhZM1JwZG1VZ2MyOGdkR2hsZVNCdFlYa2dkSEpwWjJkbGNpQmphR2xzWkNCMWNHUmhkR1VnYVdZZ2RHaGxJR05vYVd4a1hHNGdJQzh2SUhWelpXUWdkR2hsYlNCa2RYSnBibWNnY21WdVpHVnlYRzRnSUhadExpUmhkSFJ5Y3lBOUlDaHdZWEpsYm5SV2JtOWtaUzVrWVhSaElDWW1JSEJoY21WdWRGWnViMlJsTG1SaGRHRXVZWFIwY25NcElIeDhJR1Z0Y0hSNVQySnFaV04wTzF4dUlDQjJiUzRrYkdsemRHVnVaWEp6SUQwZ2JHbHpkR1Z1WlhKeklIeDhJR1Z0Y0hSNVQySnFaV04wTzF4dVhHNGdJQzh2SUhWd1pHRjBaU0J3Y205d2MxeHVJQ0JwWmlBb2NISnZjSE5FWVhSaElDWW1JSFp0TGlSdmNIUnBiMjV6TG5CeWIzQnpLU0I3WEc0Z0lDQWdiMkp6WlhKMlpYSlRkR0YwWlM1emFHOTFiR1JEYjI1MlpYSjBJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RtRnlJSEJ5YjNCeklEMGdkbTB1WDNCeWIzQnpPMXh1SUNBZ0lIWmhjaUJ3Y205d1MyVjVjeUE5SUhadExpUnZjSFJwYjI1ekxsOXdjbTl3UzJWNWN5QjhmQ0JiWFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhCeWIzQkxaWGx6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnYTJWNUlEMGdjSEp2Y0V0bGVYTmJhVjA3WEc0Z0lDQWdJQ0J3Y205d2MxdHJaWGxkSUQwZ2RtRnNhV1JoZEdWUWNtOXdLR3RsZVN3Z2RtMHVKRzl3ZEdsdmJuTXVjSEp2Y0hNc0lIQnliM0J6UkdGMFlTd2dkbTBwTzF4dUlDQWdJSDFjYmlBZ0lDQnZZbk5sY25abGNsTjBZWFJsTG5Ob2IzVnNaRU52Ym5abGNuUWdQU0IwY25WbE8xeHVJQ0FnSUM4dklHdGxaWEFnWVNCamIzQjVJRzltSUhKaGR5QndjbTl3YzBSaGRHRmNiaUFnSUNCMmJTNGtiM0IwYVc5dWN5NXdjbTl3YzBSaGRHRWdQU0J3Y205d2MwUmhkR0U3WEc0Z0lIMWNibHh1SUNBdkx5QjFjR1JoZEdVZ2JHbHpkR1Z1WlhKelhHNGdJR2xtSUNoc2FYTjBaVzVsY25NcElIdGNiaUFnSUNCMllYSWdiMnhrVEdsemRHVnVaWEp6SUQwZ2RtMHVKRzl3ZEdsdmJuTXVYM0JoY21WdWRFeHBjM1JsYm1WeWN6dGNiaUFnSUNCMmJTNGtiM0IwYVc5dWN5NWZjR0Z5Wlc1MFRHbHpkR1Z1WlhKeklEMGdiR2x6ZEdWdVpYSnpPMXh1SUNBZ0lIVndaR0YwWlVOdmJYQnZibVZ1ZEV4cGMzUmxibVZ5Y3loMmJTd2diR2x6ZEdWdVpYSnpMQ0J2YkdSTWFYTjBaVzVsY25NcE8xeHVJQ0I5WEc0Z0lDOHZJSEpsYzI5c2RtVWdjMnh2ZEhNZ0t5Qm1iM0pqWlNCMWNHUmhkR1VnYVdZZ2FHRnpJR05vYVd4a2NtVnVYRzRnSUdsbUlDaG9ZWE5EYUdsc1pISmxiaWtnZTF4dUlDQWdJSFp0TGlSemJHOTBjeUE5SUhKbGMyOXNkbVZUYkc5MGN5aHlaVzVrWlhKRGFHbHNaSEpsYml3Z2NHRnlaVzUwVm01dlpHVXVZMjl1ZEdWNGRDazdYRzRnSUNBZ2RtMHVKR1p2Y21ObFZYQmtZWFJsS0NrN1hHNGdJSDFjYmx4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUdselZYQmtZWFJwYm1kRGFHbHNaRU52YlhCdmJtVnVkQ0E5SUdaaGJITmxPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdselNXNUpibUZqZEdsMlpWUnlaV1VnS0hadEtTQjdYRzRnSUhkb2FXeGxJQ2gyYlNBbUppQW9kbTBnUFNCMmJTNGtjR0Z5Wlc1MEtTa2dlMXh1SUNBZ0lHbG1JQ2gyYlM1ZmFXNWhZM1JwZG1VcElIc2djbVYwZFhKdUlIUnlkV1VnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJtWVd4elpWeHVmVnh1WEc1bWRXNWpkR2x2YmlCaFkzUnBkbUYwWlVOb2FXeGtRMjl0Y0c5dVpXNTBJQ2gyYlN3Z1pHbHlaV04wS1NCN1hHNGdJR2xtSUNoa2FYSmxZM1FwSUh0Y2JpQWdJQ0IyYlM1ZlpHbHlaV04wU1c1aFkzUnBkbVVnUFNCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvYVhOSmJrbHVZV04wYVhabFZISmxaU2gyYlNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDaDJiUzVmWkdseVpXTjBTVzVoWTNScGRtVXBJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1SUNCcFppQW9kbTB1WDJsdVlXTjBhWFpsSUh4OElIWnRMbDlwYm1GamRHbDJaU0E5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSFp0TGw5cGJtRmpkR2wyWlNBOUlHWmhiSE5sTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZG0wdUpHTm9hV3hrY21WdUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JoWTNScGRtRjBaVU5vYVd4a1EyOXRjRzl1Wlc1MEtIWnRMaVJqYUdsc1pISmxibHRwWFNrN1hHNGdJQ0FnZlZ4dUlDQWdJR05oYkd4SWIyOXJLSFp0TENBbllXTjBhWFpoZEdWa0p5azdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWkdWaFkzUnBkbUYwWlVOb2FXeGtRMjl0Y0c5dVpXNTBJQ2gyYlN3Z1pHbHlaV04wS1NCN1hHNGdJR2xtSUNoa2FYSmxZM1FwSUh0Y2JpQWdJQ0IyYlM1ZlpHbHlaV04wU1c1aFkzUnBkbVVnUFNCMGNuVmxPMXh1SUNBZ0lHbG1JQ2hwYzBsdVNXNWhZM1JwZG1WVWNtVmxLSFp0S1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1SUNCOVhHNGdJR2xtSUNnaGRtMHVYMmx1WVdOMGFYWmxLU0I3WEc0Z0lDQWdkbTB1WDJsdVlXTjBhWFpsSUQwZ2RISjFaVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFp0TGlSamFHbHNaSEpsYmk1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdaR1ZoWTNScGRtRjBaVU5vYVd4a1EyOXRjRzl1Wlc1MEtIWnRMaVJqYUdsc1pISmxibHRwWFNrN1hHNGdJQ0FnZlZ4dUlDQWdJR05oYkd4SWIyOXJLSFp0TENBblpHVmhZM1JwZG1GMFpXUW5LVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCallXeHNTRzl2YXlBb2RtMHNJR2h2YjJzcElIdGNiaUFnZG1GeUlHaGhibVJzWlhKeklEMGdkbTB1Skc5d2RHbHZibk5iYUc5dmExMDdYRzRnSUdsbUlDaG9ZVzVrYkdWeWN5a2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCcUlEMGdhR0Z1Wkd4bGNuTXViR1Z1WjNSb095QnBJRHdnYWpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQm9ZVzVrYkdWeWMxdHBYUzVqWVd4c0tIWnRLVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ2FHRnVaR3hsUlhKeWIzSW9aU3dnZG0wc0lDaG9iMjlySUNzZ1hDSWdhRzl2YTF3aUtTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHbG1JQ2gyYlM1ZmFHRnpTRzl2YTBWMlpXNTBLU0I3WEc0Z0lDQWdkbTB1SkdWdGFYUW9KMmh2YjJzNkp5QXJJR2h2YjJzcE8xeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVjYm5aaGNpQk5RVmhmVlZCRVFWUkZYME5QVlU1VUlEMGdNVEF3TzF4dVhHNTJZWElnY1hWbGRXVWdQU0JiWFR0Y2JuWmhjaUJoWTNScGRtRjBaV1JEYUdsc1pISmxiaUE5SUZ0ZE8xeHVkbUZ5SUdoaGN5QTlJSHQ5TzF4dWRtRnlJR05wY21OMWJHRnlJRDBnZTMwN1hHNTJZWElnZDJGcGRHbHVaeUE5SUdaaGJITmxPMXh1ZG1GeUlHWnNkWE5vYVc1bklEMGdabUZzYzJVN1hHNTJZWElnYVc1a1pYZ2dQU0F3TzF4dVhHNHZLaXBjYmlBcUlGSmxjMlYwSUhSb1pTQnpZMmhsWkhWc1pYSW5jeUJ6ZEdGMFpTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NtVnpaWFJUWTJobFpIVnNaWEpUZEdGMFpTQW9LU0I3WEc0Z0lHbHVaR1Y0SUQwZ2NYVmxkV1V1YkdWdVozUm9JRDBnWVdOMGFYWmhkR1ZrUTJocGJHUnlaVzR1YkdWdVozUm9JRDBnTUR0Y2JpQWdhR0Z6SUQwZ2UzMDdYRzRnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdZMmx5WTNWc1lYSWdQU0I3ZlR0Y2JpQWdmVnh1SUNCM1lXbDBhVzVuSUQwZ1pteDFjMmhwYm1jZ1BTQm1ZV3h6WlR0Y2JuMWNibHh1THlvcVhHNGdLaUJHYkhWemFDQmliM1JvSUhGMVpYVmxjeUJoYm1RZ2NuVnVJSFJvWlNCM1lYUmphR1Z5Y3k1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWm14MWMyaFRZMmhsWkhWc1pYSlJkV1YxWlNBb0tTQjdYRzRnSUdac2RYTm9hVzVuSUQwZ2RISjFaVHRjYmlBZ2RtRnlJSGRoZEdOb1pYSXNJR2xrTzF4dVhHNGdJQzh2SUZOdmNuUWdjWFZsZFdVZ1ltVm1iM0psSUdac2RYTm9MbHh1SUNBdkx5QlVhR2x6SUdWdWMzVnlaWE1nZEdoaGREcGNiaUFnTHk4Z01TNGdRMjl0Y0c5dVpXNTBjeUJoY21VZ2RYQmtZWFJsWkNCbWNtOXRJSEJoY21WdWRDQjBieUJqYUdsc1pDNGdLR0psWTJGMWMyVWdjR0Z5Wlc1MElHbHpJR0ZzZDJGNWMxeHVJQ0F2THlBZ0lDQmpjbVZoZEdWa0lHSmxabTl5WlNCMGFHVWdZMmhwYkdRcFhHNGdJQzh2SURJdUlFRWdZMjl0Y0c5dVpXNTBKM01nZFhObGNpQjNZWFJqYUdWeWN5QmhjbVVnY25WdUlHSmxabTl5WlNCcGRITWdjbVZ1WkdWeUlIZGhkR05vWlhJZ0tHSmxZMkYxYzJWY2JpQWdMeThnSUNBZ2RYTmxjaUIzWVhSamFHVnljeUJoY21VZ1kzSmxZWFJsWkNCaVpXWnZjbVVnZEdobElISmxibVJsY2lCM1lYUmphR1Z5S1Z4dUlDQXZMeUF6TGlCSlppQmhJR052YlhCdmJtVnVkQ0JwY3lCa1pYTjBjbTk1WldRZ1pIVnlhVzVuSUdFZ2NHRnlaVzUwSUdOdmJYQnZibVZ1ZENkeklIZGhkR05vWlhJZ2NuVnVMRnh1SUNBdkx5QWdJQ0JwZEhNZ2QyRjBZMmhsY25NZ1kyRnVJR0psSUhOcmFYQndaV1F1WEc0Z0lIRjFaWFZsTG5OdmNuUW9ablZ1WTNScGIyNGdLR0VzSUdJcElIc2djbVYwZFhKdUlHRXVhV1FnTFNCaUxtbGtPeUI5S1R0Y2JseHVJQ0F2THlCa2J5QnViM1FnWTJGamFHVWdiR1Z1WjNSb0lHSmxZMkYxYzJVZ2JXOXlaU0IzWVhSamFHVnljeUJ0YVdkb2RDQmlaU0J3ZFhOb1pXUmNiaUFnTHk4Z1lYTWdkMlVnY25WdUlHVjRhWE4wYVc1bklIZGhkR05vWlhKelhHNGdJR1p2Y2lBb2FXNWtaWGdnUFNBd095QnBibVJsZUNBOElIRjFaWFZsTG14bGJtZDBhRHNnYVc1a1pYZ3JLeWtnZTF4dUlDQWdJSGRoZEdOb1pYSWdQU0J4ZFdWMVpWdHBibVJsZUYwN1hHNGdJQ0FnYVdRZ1BTQjNZWFJqYUdWeUxtbGtPMXh1SUNBZ0lHaGhjMXRwWkYwZ1BTQnVkV3hzTzF4dUlDQWdJSGRoZEdOb1pYSXVjblZ1S0NrN1hHNGdJQ0FnTHk4Z2FXNGdaR1YySUdKMWFXeGtMQ0JqYUdWamF5QmhibVFnYzNSdmNDQmphWEpqZFd4aGNpQjFjR1JoZEdWekxseHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltSUdoaGMxdHBaRjBnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnWTJseVkzVnNZWEpiYVdSZElEMGdLR05wY21OMWJHRnlXMmxrWFNCOGZDQXdLU0FySURFN1hHNGdJQ0FnSUNCcFppQW9ZMmx5WTNWc1lYSmJhV1JkSUQ0Z1RVRllYMVZRUkVGVVJWOURUMVZPVkNrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lDZFpiM1VnYldGNUlHaGhkbVVnWVc0Z2FXNW1hVzVwZEdVZ2RYQmtZWFJsSUd4dmIzQWdKeUFySUNoY2JpQWdJQ0FnSUNBZ0lDQWdJSGRoZEdOb1pYSXVkWE5sY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUNoY0ltbHVJSGRoZEdOb1pYSWdkMmwwYUNCbGVIQnlaWE56YVc5dUlGeGNYQ0pjSWlBcklDaDNZWFJqYUdWeUxtVjRjSEpsYzNOcGIyNHBJQ3NnWENKY1hGd2lYQ0lwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRG9nWENKcGJpQmhJR052YlhCdmJtVnVkQ0J5Wlc1a1pYSWdablZ1WTNScGIyNHVYQ0pjYmlBZ0lDQWdJQ0FnSUNBcExGeHVJQ0FnSUNBZ0lDQWdJSGRoZEdOb1pYSXVkbTFjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2THlCclpXVndJR052Y0dsbGN5QnZaaUJ3YjNOMElIRjFaWFZsY3lCaVpXWnZjbVVnY21WelpYUjBhVzVuSUhOMFlYUmxYRzRnSUhaaGNpQmhZM1JwZG1GMFpXUlJkV1YxWlNBOUlHRmpkR2wyWVhSbFpFTm9hV3hrY21WdUxuTnNhV05sS0NrN1hHNGdJSFpoY2lCMWNHUmhkR1ZrVVhWbGRXVWdQU0J4ZFdWMVpTNXpiR2xqWlNncE8xeHVYRzRnSUhKbGMyVjBVMk5vWldSMWJHVnlVM1JoZEdVb0tUdGNibHh1SUNBdkx5QmpZV3hzSUdOdmJYQnZibVZ1ZENCMWNHUmhkR1ZrSUdGdVpDQmhZM1JwZG1GMFpXUWdhRzl2YTNOY2JpQWdZMkZzYkVGamRHbDJZWFJsWkVodmIydHpLR0ZqZEdsMllYUmxaRkYxWlhWbEtUdGNiaUFnWTJGc2JGVndaR0YwWldSSWIyOXJjeWgxY0dSaGRHVmtVWFZsZFdVcE8xeHVYRzRnSUM4dklHUmxkblJ2YjJ3Z2FHOXZhMXh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2FXWWdLR1JsZG5SdmIyeHpJQ1ltSUdOdmJtWnBaeTVrWlhaMGIyOXNjeWtnZTF4dUlDQWdJR1JsZG5SdmIyeHpMbVZ0YVhRb0oyWnNkWE5vSnlrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdZMkZzYkZWd1pHRjBaV1JJYjI5cmN5QW9jWFZsZFdVcElIdGNiaUFnZG1GeUlHa2dQU0J4ZFdWMVpTNXNaVzVuZEdnN1hHNGdJSGRvYVd4bElDaHBMUzBwSUh0Y2JpQWdJQ0IyWVhJZ2QyRjBZMmhsY2lBOUlIRjFaWFZsVzJsZE8xeHVJQ0FnSUhaaGNpQjJiU0E5SUhkaGRHTm9aWEl1ZG0wN1hHNGdJQ0FnYVdZZ0tIWnRMbDkzWVhSamFHVnlJRDA5UFNCM1lYUmphR1Z5SUNZbUlIWnRMbDlwYzAxdmRXNTBaV1FwSUh0Y2JpQWdJQ0FnSUdOaGJHeEliMjlyS0hadExDQW5kWEJrWVhSbFpDY3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRkYxWlhWbElHRWdhMlZ3ZEMxaGJHbDJaU0JqYjIxd2IyNWxiblFnZEdoaGRDQjNZWE1nWVdOMGFYWmhkR1ZrSUdSMWNtbHVaeUJ3WVhSamFDNWNiaUFxSUZSb1pTQnhkV1YxWlNCM2FXeHNJR0psSUhCeWIyTmxjM05sWkNCaFpuUmxjaUIwYUdVZ1pXNTBhWEpsSUhSeVpXVWdhR0Z6SUdKbFpXNGdjR0YwWTJobFpDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NYVmxkV1ZCWTNScGRtRjBaV1JEYjIxd2IyNWxiblFnS0hadEtTQjdYRzRnSUM4dklITmxkSFJwYm1jZ1gybHVZV04wYVhabElIUnZJR1poYkhObElHaGxjbVVnYzI4Z2RHaGhkQ0JoSUhKbGJtUmxjaUJtZFc1amRHbHZiaUJqWVc1Y2JpQWdMeThnY21Wc2VTQnZiaUJqYUdWamEybHVaeUIzYUdWMGFHVnlJR2wwSjNNZ2FXNGdZVzRnYVc1aFkzUnBkbVVnZEhKbFpTQW9aUzVuTGlCeWIzVjBaWEl0ZG1sbGR5bGNiaUFnZG0wdVgybHVZV04wYVhabElEMGdabUZzYzJVN1hHNGdJR0ZqZEdsMllYUmxaRU5vYVd4a2NtVnVMbkIxYzJnb2RtMHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpZV3hzUVdOMGFYWmhkR1ZrU0c5dmEzTWdLSEYxWlhWbEtTQjdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2NYVmxkV1V1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCeGRXVjFaVnRwWFM1ZmFXNWhZM1JwZG1VZ1BTQjBjblZsTzF4dUlDQWdJR0ZqZEdsMllYUmxRMmhwYkdSRGIyMXdiMjVsYm5Rb2NYVmxkV1ZiYVYwc0lIUnlkV1VnTHlvZ2RISjFaU0FxTHlrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQlFkWE5vSUdFZ2QyRjBZMmhsY2lCcGJuUnZJSFJvWlNCM1lYUmphR1Z5SUhGMVpYVmxMbHh1SUNvZ1NtOWljeUIzYVhSb0lHUjFjR3hwWTJGMFpTQkpSSE1nZDJsc2JDQmlaU0J6YTJsd2NHVmtJSFZ1YkdWemN5QnBkQ2R6WEc0Z0tpQndkWE5vWldRZ2QyaGxiaUIwYUdVZ2NYVmxkV1VnYVhNZ1ltVnBibWNnWm14MWMyaGxaQzVjYmlBcUwxeHVablZ1WTNScGIyNGdjWFZsZFdWWFlYUmphR1Z5SUNoM1lYUmphR1Z5S1NCN1hHNGdJSFpoY2lCcFpDQTlJSGRoZEdOb1pYSXVhV1E3WEc0Z0lHbG1JQ2hvWVhOYmFXUmRJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQm9ZWE5iYVdSZElEMGdkSEoxWlR0Y2JpQWdJQ0JwWmlBb0lXWnNkWE5vYVc1bktTQjdYRzRnSUNBZ0lDQnhkV1YxWlM1d2RYTm9LSGRoZEdOb1pYSXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QnBaaUJoYkhKbFlXUjVJR1pzZFhOb2FXNW5MQ0J6Y0d4cFkyVWdkR2hsSUhkaGRHTm9aWElnWW1GelpXUWdiMjRnYVhSeklHbGtYRzRnSUNBZ0lDQXZMeUJwWmlCaGJISmxZV1I1SUhCaGMzUWdhWFJ6SUdsa0xDQnBkQ0IzYVd4c0lHSmxJSEoxYmlCdVpYaDBJR2x0YldWa2FXRjBaV3g1TGx4dUlDQWdJQ0FnZG1GeUlHa2dQU0J4ZFdWMVpTNXNaVzVuZEdnZ0xTQXhPMXh1SUNBZ0lDQWdkMmhwYkdVZ0tHa2dQaUJwYm1SbGVDQW1KaUJ4ZFdWMVpWdHBYUzVwWkNBK0lIZGhkR05vWlhJdWFXUXBJSHRjYmlBZ0lDQWdJQ0FnYVMwdE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NYVmxkV1V1YzNCc2FXTmxLR2tnS3lBeExDQXdMQ0IzWVhSamFHVnlLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdjWFZsZFdVZ2RHaGxJR1pzZFhOb1hHNGdJQ0FnYVdZZ0tDRjNZV2wwYVc1bktTQjdYRzRnSUNBZ0lDQjNZV2wwYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUc1bGVIUlVhV05yS0dac2RYTm9VMk5vWldSMWJHVnlVWFZsZFdVcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVkbUZ5SUhWcFpDUXlJRDBnTUR0Y2JseHVMeW9xWEc0Z0tpQkJJSGRoZEdOb1pYSWdjR0Z5YzJWeklHRnVJR1Y0Y0hKbGMzTnBiMjRzSUdOdmJHeGxZM1J6SUdSbGNHVnVaR1Z1WTJsbGN5eGNiaUFxSUdGdVpDQm1hWEpsY3lCallXeHNZbUZqYXlCM2FHVnVJSFJvWlNCbGVIQnlaWE56YVc5dUlIWmhiSFZsSUdOb1lXNW5aWE11WEc0Z0tpQlVhR2x6SUdseklIVnpaV1FnWm05eUlHSnZkR2dnZEdobElDUjNZWFJqYUNncElHRndhU0JoYm1RZ1pHbHlaV04wYVhabGN5NWNiaUFxTDF4dWRtRnlJRmRoZEdOb1pYSWdQU0JtZFc1amRHbHZiaUJYWVhSamFHVnlJQ2hjYmlBZ2RtMHNYRzRnSUdWNGNFOXlSbTRzWEc0Z0lHTmlMRnh1SUNCdmNIUnBiMjV6TEZ4dUlDQnBjMUpsYm1SbGNsZGhkR05vWlhKY2Jpa2dlMXh1SUNCMGFHbHpMblp0SUQwZ2RtMDdYRzRnSUdsbUlDaHBjMUpsYm1SbGNsZGhkR05vWlhJcElIdGNiaUFnSUNCMmJTNWZkMkYwWTJobGNpQTlJSFJvYVhNN1hHNGdJSDFjYmlBZ2RtMHVYM2RoZEdOb1pYSnpMbkIxYzJnb2RHaHBjeWs3WEc0Z0lDOHZJRzl3ZEdsdmJuTmNiaUFnYVdZZ0tHOXdkR2x2Ym5NcElIdGNiaUFnSUNCMGFHbHpMbVJsWlhBZ1BTQWhJVzl3ZEdsdmJuTXVaR1ZsY0R0Y2JpQWdJQ0IwYUdsekxuVnpaWElnUFNBaElXOXdkR2x2Ym5NdWRYTmxjanRjYmlBZ0lDQjBhR2x6TG14aGVua2dQU0FoSVc5d2RHbHZibk11YkdGNmVUdGNiaUFnSUNCMGFHbHpMbk41Ym1NZ1BTQWhJVzl3ZEdsdmJuTXVjM2x1WXp0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMGFHbHpMbVJsWlhBZ1BTQjBhR2x6TG5WelpYSWdQU0IwYUdsekxteGhlbmtnUFNCMGFHbHpMbk41Ym1NZ1BTQm1ZV3h6WlR0Y2JpQWdmVnh1SUNCMGFHbHpMbU5pSUQwZ1kySTdYRzRnSUhSb2FYTXVhV1FnUFNBckszVnBaQ1F5T3lBdkx5QjFhV1FnWm05eUlHSmhkR05vYVc1blhHNGdJSFJvYVhNdVlXTjBhWFpsSUQwZ2RISjFaVHRjYmlBZ2RHaHBjeTVrYVhKMGVTQTlJSFJvYVhNdWJHRjZlVHNnTHk4Z1ptOXlJR3hoZW5rZ2QyRjBZMmhsY25OY2JpQWdkR2hwY3k1a1pYQnpJRDBnVzEwN1hHNGdJSFJvYVhNdWJtVjNSR1Z3Y3lBOUlGdGRPMXh1SUNCMGFHbHpMbVJsY0Vsa2N5QTlJRzVsZHlCZlUyVjBLQ2s3WEc0Z0lIUm9hWE11Ym1WM1JHVndTV1J6SUQwZ2JtVjNJRjlUWlhRb0tUdGNiaUFnZEdocGN5NWxlSEJ5WlhOemFXOXVJRDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SjF4dUlDQWdJRDhnWlhod1QzSkdiaTUwYjFOMGNtbHVaeWdwWEc0Z0lDQWdPaUFuSnp0Y2JpQWdMeThnY0dGeWMyVWdaWGh3Y21WemMybHZiaUJtYjNJZ1oyVjBkR1Z5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdaWGh3VDNKR2JpQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhSb2FYTXVaMlYwZEdWeUlEMGdaWGh3VDNKR2JqdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjBhR2x6TG1kbGRIUmxjaUE5SUhCaGNuTmxVR0YwYUNobGVIQlBja1p1S1R0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11WjJWMGRHVnlLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtZGxkSFJsY2lBOUlHWjFibU4wYVc5dUlDZ3BJSHQ5TzF4dUlDQWdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQjNZWEp1S0Z4dUlDQWdJQ0FnSUNCY0lrWmhhV3hsWkNCM1lYUmphR2x1WnlCd1lYUm9PaUJjWEZ3aVhDSWdLeUJsZUhCUGNrWnVJQ3NnWENKY1hGd2lJRndpSUN0Y2JpQWdJQ0FnSUNBZ0oxZGhkR05vWlhJZ2IyNXNlU0JoWTJObGNIUnpJSE5wYlhCc1pTQmtiM1F0WkdWc2FXMXBkR1ZrSUhCaGRHaHpMaUFuSUN0Y2JpQWdJQ0FnSUNBZ0owWnZjaUJtZFd4c0lHTnZiblJ5YjJ3c0lIVnpaU0JoSUdaMWJtTjBhVzl1SUdsdWMzUmxZV1F1Snl4Y2JpQWdJQ0FnSUNBZ2RtMWNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIUm9hWE11ZG1Gc2RXVWdQU0IwYUdsekxteGhlbmxjYmlBZ0lDQS9JSFZ1WkdWbWFXNWxaRnh1SUNBZ0lEb2dkR2hwY3k1blpYUW9LVHRjYm4wN1hHNWNiaThxS2x4dUlDb2dSWFpoYkhWaGRHVWdkR2hsSUdkbGRIUmxjaXdnWVc1a0lISmxMV052Ykd4bFkzUWdaR1Z3Wlc1a1pXNWphV1Z6TGx4dUlDb3ZYRzVYWVhSamFHVnlMbkJ5YjNSdmRIbHdaUzVuWlhRZ1BTQm1kVzVqZEdsdmJpQm5aWFFnS0NrZ2UxeHVJQ0J3ZFhOb1ZHRnlaMlYwS0hSb2FYTXBPMXh1SUNCMllYSWdkbUZzZFdVN1hHNGdJSFpoY2lCMmJTQTlJSFJvYVhNdWRtMDdYRzRnSUhSeWVTQjdYRzRnSUNBZ2RtRnNkV1VnUFNCMGFHbHpMbWRsZEhSbGNpNWpZV3hzS0hadExDQjJiU2s3WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NTFjMlZ5S1NCN1hHNGdJQ0FnSUNCb1lXNWtiR1ZGY25KdmNpaGxMQ0IyYlN3Z0tGd2laMlYwZEdWeUlHWnZjaUIzWVhSamFHVnlJRnhjWENKY0lpQXJJQ2gwYUdsekxtVjRjSEpsYzNOcGIyNHBJQ3NnWENKY1hGd2lYQ0lwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2h5YjNjZ1pWeHVJQ0FnSUgxY2JpQWdmU0JtYVc1aGJHeDVJSHRjYmlBZ0lDQXZMeUJjSW5SdmRXTm9YQ0lnWlhabGNua2djSEp2Y0dWeWRIa2djMjhnZEdobGVTQmhjbVVnWVd4c0lIUnlZV05yWldRZ1lYTmNiaUFnSUNBdkx5QmtaWEJsYm1SbGJtTnBaWE1nWm05eUlHUmxaWEFnZDJGMFkyaHBibWRjYmlBZ0lDQnBaaUFvZEdocGN5NWtaV1Z3S1NCN1hHNGdJQ0FnSUNCMGNtRjJaWEp6WlNoMllXeDFaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lIQnZjRlJoY21kbGRDZ3BPMXh1SUNBZ0lIUm9hWE11WTJ4bFlXNTFjRVJsY0hNb0tUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2RtRnNkV1ZjYm4wN1hHNWNiaThxS2x4dUlDb2dRV1JrSUdFZ1pHVndaVzVrWlc1amVTQjBieUIwYUdseklHUnBjbVZqZEdsMlpTNWNiaUFxTDF4dVYyRjBZMmhsY2k1d2NtOTBiM1I1Y0dVdVlXUmtSR1Z3SUQwZ1puVnVZM1JwYjI0Z1lXUmtSR1Z3SUNoa1pYQXBJSHRjYmlBZ2RtRnlJR2xrSUQwZ1pHVndMbWxrTzF4dUlDQnBaaUFvSVhSb2FYTXVibVYzUkdWd1NXUnpMbWhoY3locFpDa3BJSHRjYmlBZ0lDQjBhR2x6TG01bGQwUmxjRWxrY3k1aFpHUW9hV1FwTzF4dUlDQWdJSFJvYVhNdWJtVjNSR1Z3Y3k1d2RYTm9LR1JsY0NrN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG1SbGNFbGtjeTVvWVhNb2FXUXBLU0I3WEc0Z0lDQWdJQ0JrWlhBdVlXUmtVM1ZpS0hSb2FYTXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJEYkdWaGJpQjFjQ0JtYjNJZ1pHVndaVzVrWlc1amVTQmpiMnhzWldOMGFXOXVMbHh1SUNvdlhHNVhZWFJqYUdWeUxuQnliM1J2ZEhsd1pTNWpiR1ZoYm5Wd1JHVndjeUE5SUdaMWJtTjBhVzl1SUdOc1pXRnVkWEJFWlhCeklDZ3BJSHRjYmlBZ0lDQjJZWElnZEdocGN5UXhJRDBnZEdocGN6dGNibHh1SUNCMllYSWdhU0E5SUhSb2FYTXVaR1Z3Y3k1c1pXNW5kR2c3WEc0Z0lIZG9hV3hsSUNocExTMHBJSHRjYmlBZ0lDQjJZWElnWkdWd0lEMGdkR2hwY3lReExtUmxjSE5iYVYwN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6SkRFdWJtVjNSR1Z3U1dSekxtaGhjeWhrWlhBdWFXUXBLU0I3WEc0Z0lDQWdJQ0JrWlhBdWNtVnRiM1psVTNWaUtIUm9hWE1rTVNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhaaGNpQjBiWEFnUFNCMGFHbHpMbVJsY0Vsa2N6dGNiaUFnZEdocGN5NWtaWEJKWkhNZ1BTQjBhR2x6TG01bGQwUmxjRWxrY3p0Y2JpQWdkR2hwY3k1dVpYZEVaWEJKWkhNZ1BTQjBiWEE3WEc0Z0lIUm9hWE11Ym1WM1JHVndTV1J6TG1Oc1pXRnlLQ2s3WEc0Z0lIUnRjQ0E5SUhSb2FYTXVaR1Z3Y3p0Y2JpQWdkR2hwY3k1a1pYQnpJRDBnZEdocGN5NXVaWGRFWlhCek8xeHVJQ0IwYUdsekxtNWxkMFJsY0hNZ1BTQjBiWEE3WEc0Z0lIUm9hWE11Ym1WM1JHVndjeTVzWlc1bmRHZ2dQU0F3TzF4dWZUdGNibHh1THlvcVhHNGdLaUJUZFdKelkzSnBZbVZ5SUdsdWRHVnlabUZqWlM1Y2JpQXFJRmRwYkd3Z1ltVWdZMkZzYkdWa0lIZG9aVzRnWVNCa1pYQmxibVJsYm1ONUlHTm9ZVzVuWlhNdVhHNGdLaTljYmxkaGRHTm9aWEl1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1SUhWd1pHRjBaU0FvS1NCN1hHNGdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JsYkhObElDb3ZYRzRnSUdsbUlDaDBhR2x6TG14aGVua3BJSHRjYmlBZ0lDQjBhR2x6TG1ScGNuUjVJRDBnZEhKMVpUdGNiaUFnZlNCbGJITmxJR2xtSUNoMGFHbHpMbk41Ym1NcElIdGNiaUFnSUNCMGFHbHpMbkoxYmlncE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIRjFaWFZsVjJGMFkyaGxjaWgwYUdsektUdGNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJUWTJobFpIVnNaWElnYW05aUlHbHVkR1Z5Wm1GalpTNWNiaUFxSUZkcGJHd2dZbVVnWTJGc2JHVmtJR0o1SUhSb1pTQnpZMmhsWkhWc1pYSXVYRzRnS2k5Y2JsZGhkR05vWlhJdWNISnZkRzkwZVhCbExuSjFiaUE5SUdaMWJtTjBhVzl1SUhKMWJpQW9LU0I3WEc0Z0lHbG1JQ2gwYUdsekxtRmpkR2wyWlNrZ2UxeHVJQ0FnSUhaaGNpQjJZV3gxWlNBOUlIUm9hWE11WjJWMEtDazdYRzRnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdkbUZzZFdVZ0lUMDlJSFJvYVhNdWRtRnNkV1VnZkh4Y2JpQWdJQ0FnSUM4dklFUmxaWEFnZDJGMFkyaGxjbk1nWVc1a0lIZGhkR05vWlhKeklHOXVJRTlpYW1WamRDOUJjbkpoZVhNZ2MyaHZkV3hrSUdacGNtVWdaWFpsYmx4dUlDQWdJQ0FnTHk4Z2QyaGxiaUIwYUdVZ2RtRnNkV1VnYVhNZ2RHaGxJSE5oYldVc0lHSmxZMkYxYzJVZ2RHaGxJSFpoYkhWbElHMWhlVnh1SUNBZ0lDQWdMeThnYUdGMlpTQnRkWFJoZEdWa0xseHVJQ0FnSUNBZ2FYTlBZbXBsWTNRb2RtRnNkV1VwSUh4OFhHNGdJQ0FnSUNCMGFHbHpMbVJsWlhCY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUM4dklITmxkQ0J1WlhjZ2RtRnNkV1ZjYmlBZ0lDQWdJSFpoY2lCdmJHUldZV3gxWlNBOUlIUm9hWE11ZG1Gc2RXVTdYRzRnSUNBZ0lDQjBhR2x6TG5aaGJIVmxJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NTFjMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVqWWk1allXeHNLSFJvYVhNdWRtMHNJSFpoYkhWbExDQnZiR1JXWVd4MVpTazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWRmNuSnZjaWhsTENCMGFHbHpMblp0TENBb1hDSmpZV3hzWW1GamF5Qm1iM0lnZDJGMFkyaGxjaUJjWEZ3aVhDSWdLeUFvZEdocGN5NWxlSEJ5WlhOemFXOXVLU0FySUZ3aVhGeGNJbHdpS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTJJdVkyRnNiQ2gwYUdsekxuWnRMQ0IyWVd4MVpTd2diMnhrVm1Gc2RXVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJGZG1Gc2RXRjBaU0IwYUdVZ2RtRnNkV1VnYjJZZ2RHaGxJSGRoZEdOb1pYSXVYRzRnS2lCVWFHbHpJRzl1YkhrZ1oyVjBjeUJqWVd4c1pXUWdabTl5SUd4aGVua2dkMkYwWTJobGNuTXVYRzRnS2k5Y2JsZGhkR05vWlhJdWNISnZkRzkwZVhCbExtVjJZV3gxWVhSbElEMGdablZ1WTNScGIyNGdaWFpoYkhWaGRHVWdLQ2tnZTF4dUlDQjBhR2x6TG5aaGJIVmxJRDBnZEdocGN5NW5aWFFvS1R0Y2JpQWdkR2hwY3k1a2FYSjBlU0E5SUdaaGJITmxPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQkVaWEJsYm1RZ2IyNGdZV3hzSUdSbGNITWdZMjlzYkdWamRHVmtJR0o1SUhSb2FYTWdkMkYwWTJobGNpNWNiaUFxTDF4dVYyRjBZMmhsY2k1d2NtOTBiM1I1Y0dVdVpHVndaVzVrSUQwZ1puVnVZM1JwYjI0Z1pHVndaVzVrSUNncElIdGNiaUFnSUNCMllYSWdkR2hwY3lReElEMGdkR2hwY3p0Y2JseHVJQ0IyWVhJZ2FTQTlJSFJvYVhNdVpHVndjeTVzWlc1bmRHZzdYRzRnSUhkb2FXeGxJQ2hwTFMwcElIdGNiaUFnSUNCMGFHbHpKREV1WkdWd2MxdHBYUzVrWlhCbGJtUW9LVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCU1pXMXZkbVVnYzJWc1ppQm1jbTl0SUdGc2JDQmtaWEJsYm1SbGJtTnBaWE1uSUhOMVluTmpjbWxpWlhJZ2JHbHpkQzVjYmlBcUwxeHVWMkYwWTJobGNpNXdjbTkwYjNSNWNHVXVkR1ZoY21SdmQyNGdQU0JtZFc1amRHbHZiaUIwWldGeVpHOTNiaUFvS1NCN1hHNGdJQ0FnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEc1Y2JpQWdhV1lnS0hSb2FYTXVZV04wYVhabEtTQjdYRzRnSUNBZ0x5OGdjbVZ0YjNabElITmxiR1lnWm5KdmJTQjJiU2R6SUhkaGRHTm9aWElnYkdsemRGeHVJQ0FnSUM4dklIUm9hWE1nYVhNZ1lTQnpiMjFsZDJoaGRDQmxlSEJsYm5OcGRtVWdiM0JsY21GMGFXOXVJSE52SUhkbElITnJhWEFnYVhSY2JpQWdJQ0F2THlCcFppQjBhR1VnZG0wZ2FYTWdZbVZwYm1jZ1pHVnpkSEp2ZVdWa0xseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1MmJTNWZhWE5DWldsdVowUmxjM1J5YjNsbFpDa2dlMXh1SUNBZ0lDQWdjbVZ0YjNabEtIUm9hWE11ZG0wdVgzZGhkR05vWlhKekxDQjBhR2x6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUdrZ1BTQjBhR2x6TG1SbGNITXViR1Z1WjNSb08xeHVJQ0FnSUhkb2FXeGxJQ2hwTFMwcElIdGNiaUFnSUNBZ0lIUm9hWE1rTVM1a1pYQnpXMmxkTG5KbGJXOTJaVk4xWWloMGFHbHpKREVwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG1GamRHbDJaU0E5SUdaaGJITmxPMXh1SUNCOVhHNTlPMXh1WEc0dktpQWdLaTljYmx4dWRtRnlJSE5vWVhKbFpGQnliM0JsY25SNVJHVm1hVzVwZEdsdmJpQTlJSHRjYmlBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNCblpYUTZJRzV2YjNBc1hHNGdJSE5sZERvZ2JtOXZjRnh1ZlR0Y2JseHVablZ1WTNScGIyNGdjSEp2ZUhrZ0tIUmhjbWRsZEN3Z2MyOTFjbU5sUzJWNUxDQnJaWGtwSUh0Y2JpQWdjMmhoY21Wa1VISnZjR1Z5ZEhsRVpXWnBibWwwYVc5dUxtZGxkQ0E5SUdaMWJtTjBhVzl1SUhCeWIzaDVSMlYwZEdWeUlDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXR6YjNWeVkyVkxaWGxkVzJ0bGVWMWNiaUFnZlR0Y2JpQWdjMmhoY21Wa1VISnZjR1Z5ZEhsRVpXWnBibWwwYVc5dUxuTmxkQ0E5SUdaMWJtTjBhVzl1SUhCeWIzaDVVMlYwZEdWeUlDaDJZV3dwSUh0Y2JpQWdJQ0IwYUdselczTnZkWEpqWlV0bGVWMWJhMlY1WFNBOUlIWmhiRHRjYmlBZ2ZUdGNiaUFnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUmhjbWRsZEN3Z2EyVjVMQ0J6YUdGeVpXUlFjbTl3WlhKMGVVUmxabWx1YVhScGIyNHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBibWwwVTNSaGRHVWdLSFp0S1NCN1hHNGdJSFp0TGw5M1lYUmphR1Z5Y3lBOUlGdGRPMXh1SUNCMllYSWdiM0IwY3lBOUlIWnRMaVJ2Y0hScGIyNXpPMXh1SUNCcFppQW9iM0IwY3k1d2NtOXdjeWtnZXlCcGJtbDBVSEp2Y0hNb2RtMHNJRzl3ZEhNdWNISnZjSE1wT3lCOVhHNGdJR2xtSUNodmNIUnpMbTFsZEdodlpITXBJSHNnYVc1cGRFMWxkR2h2WkhNb2RtMHNJRzl3ZEhNdWJXVjBhRzlrY3lrN0lIMWNiaUFnYVdZZ0tHOXdkSE11WkdGMFlTa2dlMXh1SUNBZ0lHbHVhWFJFWVhSaEtIWnRLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J2WW5ObGNuWmxLSFp0TGw5a1lYUmhJRDBnZTMwc0lIUnlkV1VnTHlvZ1lYTlNiMjkwUkdGMFlTQXFMeWs3WEc0Z0lIMWNiaUFnYVdZZ0tHOXdkSE11WTI5dGNIVjBaV1FwSUhzZ2FXNXBkRU52YlhCMWRHVmtLSFp0TENCdmNIUnpMbU52YlhCMWRHVmtLVHNnZlZ4dUlDQnBaaUFvYjNCMGN5NTNZWFJqYUNBbUppQnZjSFJ6TG5kaGRHTm9JQ0U5UFNCdVlYUnBkbVZYWVhSamFDa2dlMXh1SUNBZ0lHbHVhWFJYWVhSamFDaDJiU3dnYjNCMGN5NTNZWFJqYUNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdhVzVwZEZCeWIzQnpJQ2gyYlN3Z2NISnZjSE5QY0hScGIyNXpLU0I3WEc0Z0lIWmhjaUJ3Y205d2MwUmhkR0VnUFNCMmJTNGtiM0IwYVc5dWN5NXdjbTl3YzBSaGRHRWdmSHdnZTMwN1hHNGdJSFpoY2lCd2NtOXdjeUE5SUhadExsOXdjbTl3Y3lBOUlIdDlPMXh1SUNBdkx5QmpZV05vWlNCd2NtOXdJR3RsZVhNZ2MyOGdkR2hoZENCbWRYUjFjbVVnY0hKdmNITWdkWEJrWVhSbGN5QmpZVzRnYVhSbGNtRjBaU0IxYzJsdVp5QkJjbkpoZVZ4dUlDQXZMeUJwYm5OMFpXRmtJRzltSUdSNWJtRnRhV01nYjJKcVpXTjBJR3RsZVNCbGJuVnRaWEpoZEdsdmJpNWNiaUFnZG1GeUlHdGxlWE1nUFNCMmJTNGtiM0IwYVc5dWN5NWZjSEp2Y0V0bGVYTWdQU0JiWFR0Y2JpQWdkbUZ5SUdselVtOXZkQ0E5SUNGMmJTNGtjR0Z5Wlc1ME8xeHVJQ0F2THlCeWIyOTBJR2x1YzNSaGJtTmxJSEJ5YjNCeklITm9iM1ZzWkNCaVpTQmpiMjUyWlhKMFpXUmNiaUFnYjJKelpYSjJaWEpUZEdGMFpTNXphRzkxYkdSRGIyNTJaWEowSUQwZ2FYTlNiMjkwTzF4dUlDQjJZWElnYkc5dmNDQTlJR1oxYm1OMGFXOXVJQ2dnYTJWNUlDa2dlMXh1SUNBZ0lHdGxlWE11Y0hWemFDaHJaWGtwTzF4dUlDQWdJSFpoY2lCMllXeDFaU0E5SUhaaGJHbGtZWFJsVUhKdmNDaHJaWGtzSUhCeWIzQnpUM0IwYVc5dWN5d2djSEp2Y0hORVlYUmhMQ0IyYlNrN1hHNGdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdWc2MyVWdLaTljYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2RtRnlJR2g1Y0dobGJtRjBaV1JMWlhrZ1BTQm9lWEJvWlc1aGRHVW9hMlY1S1R0Y2JpQWdJQ0FnSUdsbUlDaHBjMUpsYzJWeWRtVmtRWFIwY21saWRYUmxLR2g1Y0dobGJtRjBaV1JMWlhrcElIeDhYRzRnSUNBZ0lDQWdJQ0FnWTI5dVptbG5MbWx6VW1WelpYSjJaV1JCZEhSeUtHaDVjR2hsYm1GMFpXUkxaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNBZ0tGd2lYRnhjSWx3aUlDc2dhSGx3YUdWdVlYUmxaRXRsZVNBcklGd2lYRnhjSWlCcGN5QmhJSEpsYzJWeWRtVmtJR0YwZEhKcFluVjBaU0JoYm1RZ1kyRnVibTkwSUdKbElIVnpaV1FnWVhNZ1kyOXRjRzl1Wlc1MElIQnliM0F1WENJcExGeHVJQ0FnSUNBZ0lDQWdJSFp0WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCa1pXWnBibVZTWldGamRHbDJaU2h3Y205d2N5d2dhMlY1TENCMllXeDFaU3dnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZG0wdUpIQmhjbVZ1ZENBbUppQWhhWE5WY0dSaGRHbHVaME5vYVd4a1EyOXRjRzl1Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aVFYWnZhV1FnYlhWMFlYUnBibWNnWVNCd2NtOXdJR1JwY21WamRHeDVJSE5wYm1ObElIUm9aU0IyWVd4MVpTQjNhV3hzSUdKbElGd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2liM1psY25keWFYUjBaVzRnZDJobGJtVjJaWElnZEdobElIQmhjbVZ1ZENCamIyMXdiMjVsYm5RZ2NtVXRjbVZ1WkdWeWN5NGdYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0pKYm5OMFpXRmtMQ0IxYzJVZ1lTQmtZWFJoSUc5eUlHTnZiWEIxZEdWa0lIQnliM0JsY25SNUlHSmhjMlZrSUc5dUlIUm9aU0J3Y205d0ozTWdYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0oyWVd4MVpTNGdVSEp2Y0NCaVpXbHVaeUJ0ZFhSaGRHVmtPaUJjWEZ3aVhDSWdLeUJyWlhrZ0t5QmNJbHhjWENKY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhadFhHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1JsWm1sdVpWSmxZV04wYVhabEtIQnliM0J6TENCclpYa3NJSFpoYkhWbEtUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2MzUmhkR2xqSUhCeWIzQnpJR0Z5WlNCaGJISmxZV1I1SUhCeWIzaHBaV1FnYjI0Z2RHaGxJR052YlhCdmJtVnVkQ2R6SUhCeWIzUnZkSGx3WlZ4dUlDQWdJQzh2SUdSMWNtbHVaeUJXZFdVdVpYaDBaVzVrS0NrdUlGZGxJRzl1YkhrZ2JtVmxaQ0IwYnlCd2NtOTRlU0J3Y205d2N5QmtaV1pwYm1Wa0lHRjBYRzRnSUNBZ0x5OGdhVzV6ZEdGdWRHbGhkR2x2YmlCb1pYSmxMbHh1SUNBZ0lHbG1JQ2doS0d0bGVTQnBiaUIyYlNrcElIdGNiaUFnSUNBZ0lIQnliM2g1S0hadExDQmNJbDl3Y205d2Mxd2lMQ0JyWlhrcE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2NISnZjSE5QY0hScGIyNXpLU0JzYjI5d0tDQnJaWGtnS1R0Y2JpQWdiMkp6WlhKMlpYSlRkR0YwWlM1emFHOTFiR1JEYjI1MlpYSjBJRDBnZEhKMVpUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRVJoZEdFZ0tIWnRLU0I3WEc0Z0lIWmhjaUJrWVhSaElEMGdkbTB1Skc5d2RHbHZibk11WkdGMFlUdGNiaUFnWkdGMFlTQTlJSFp0TGw5a1lYUmhJRDBnZEhsd1pXOW1JR1JoZEdFZ1BUMDlJQ2RtZFc1amRHbHZiaWRjYmlBZ0lDQS9JR2RsZEVSaGRHRW9aR0YwWVN3Z2RtMHBYRzRnSUNBZ09pQmtZWFJoSUh4OElIdDlPMXh1SUNCcFppQW9JV2x6VUd4aGFXNVBZbXBsWTNRb1pHRjBZU2twSUh0Y2JpQWdJQ0JrWVhSaElEMGdlMzA3WEc0Z0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCM1lYSnVLRnh1SUNBZ0lDQWdKMlJoZEdFZ1puVnVZM1JwYjI1eklITm9iM1ZzWkNCeVpYUjFjbTRnWVc0Z2IySnFaV04wT2x4Y2JpY2dLMXh1SUNBZ0lDQWdKMmgwZEhCek9pOHZkblZsYW5NdWIzSm5MM1l5TDJkMWFXUmxMMk52YlhCdmJtVnVkSE11YUhSdGJDTmtZWFJoTFUxMWMzUXRRbVV0WVMxR2RXNWpkR2x2Ymljc1hHNGdJQ0FnSUNCMmJWeHVJQ0FnSUNrN1hHNGdJSDFjYmlBZ0x5OGdjSEp2ZUhrZ1pHRjBZU0J2YmlCcGJuTjBZVzVqWlZ4dUlDQjJZWElnYTJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0dSaGRHRXBPMXh1SUNCMllYSWdjSEp2Y0hNZ1BTQjJiUzRrYjNCMGFXOXVjeTV3Y205d2N6dGNiaUFnZG1GeUlHMWxkR2h2WkhNZ1BTQjJiUzRrYjNCMGFXOXVjeTV0WlhSb2IyUnpPMXh1SUNCMllYSWdhU0E5SUd0bGVYTXViR1Z1WjNSb08xeHVJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnZG1GeUlHdGxlU0E5SUd0bGVYTmJhVjA3WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lHbG1JQ2h0WlhSb2IyUnpJQ1ltSUdoaGMwOTNiaWh0WlhSb2IyUnpMQ0JyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJSGRoY200b1hHNGdJQ0FnSUNBZ0lDQWdLRndpVFdWMGFHOWtJRnhjWENKY0lpQXJJR3RsZVNBcklGd2lYRnhjSWlCb1lYTWdZV3h5WldGa2VTQmlaV1Z1SUdSbFptbHVaV1FnWVhNZ1lTQmtZWFJoSUhCeWIzQmxjblI1TGx3aUtTeGNiaUFnSUNBZ0lDQWdJQ0IyYlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2NISnZjSE1nSmlZZ2FHRnpUM2R1S0hCeWIzQnpMQ0JyWlhrcEtTQjdYRzRnSUNBZ0lDQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltSUhkaGNtNG9YRzRnSUNBZ0lDQWdJRndpVkdobElHUmhkR0VnY0hKdmNHVnlkSGtnWEZ4Y0lsd2lJQ3NnYTJWNUlDc2dYQ0pjWEZ3aUlHbHpJR0ZzY21WaFpIa2daR1ZqYkdGeVpXUWdZWE1nWVNCd2NtOXdMaUJjSWlBclhHNGdJQ0FnSUNBZ0lGd2lWWE5sSUhCeWIzQWdaR1ZtWVhWc2RDQjJZV3gxWlNCcGJuTjBaV0ZrTGx3aUxGeHVJQ0FnSUNBZ0lDQjJiVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0ZwYzFKbGMyVnlkbVZrS0d0bGVTa3BJSHRjYmlBZ0lDQWdJSEJ5YjNoNUtIWnRMQ0JjSWw5a1lYUmhYQ0lzSUd0bGVTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lDOHZJRzlpYzJWeWRtVWdaR0YwWVZ4dUlDQnZZbk5sY25abEtHUmhkR0VzSUhSeWRXVWdMeW9nWVhOU2IyOTBSR0YwWVNBcUx5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRVJoZEdFZ0tHUmhkR0VzSUhadEtTQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUdSaGRHRXVZMkZzYkNoMmJTd2dkbTBwWEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQm9ZVzVrYkdWRmNuSnZjaWhsTENCMmJTd2dYQ0prWVhSaEtDbGNJaWs3WEc0Z0lDQWdjbVYwZFhKdUlIdDlYRzRnSUgxY2JuMWNibHh1ZG1GeUlHTnZiWEIxZEdWa1YyRjBZMmhsY2s5d2RHbHZibk1nUFNCN0lHeGhlbms2SUhSeWRXVWdmVHRjYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRU52YlhCMWRHVmtJQ2gyYlN3Z1kyOXRjSFYwWldRcElIdGNiaUFnTHk4Z0pHWnNiM2N0WkdsellXSnNaUzFzYVc1bFhHNGdJSFpoY2lCM1lYUmphR1Z5Y3lBOUlIWnRMbDlqYjIxd2RYUmxaRmRoZEdOb1pYSnpJRDBnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1R0Y2JpQWdMeThnWTI5dGNIVjBaV1FnY0hKdmNHVnlkR2xsY3lCaGNtVWdhblZ6ZENCblpYUjBaWEp6SUdSMWNtbHVaeUJUVTFKY2JpQWdkbUZ5SUdselUxTlNJRDBnYVhOVFpYSjJaWEpTWlc1a1pYSnBibWNvS1R0Y2JseHVJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdZMjl0Y0hWMFpXUXBJSHRjYmlBZ0lDQjJZWElnZFhObGNrUmxaaUE5SUdOdmJYQjFkR1ZrVzJ0bGVWMDdYRzRnSUNBZ2RtRnlJR2RsZEhSbGNpQTlJSFI1Y0dWdlppQjFjMlZ5UkdWbUlEMDlQU0FuWm5WdVkzUnBiMjRuSUQ4Z2RYTmxja1JsWmlBNklIVnpaWEpFWldZdVoyVjBPMXh1SUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUNZbUlHZGxkSFJsY2lBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FvWENKSFpYUjBaWElnYVhNZ2JXbHpjMmx1WnlCbWIzSWdZMjl0Y0hWMFpXUWdjSEp2Y0dWeWRIa2dYRnhjSWx3aUlDc2dhMlY1SUNzZ1hDSmNYRndpTGx3aUtTeGNiaUFnSUNBZ0lDQWdkbTFjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NGcGMxTlRVaWtnZTF4dUlDQWdJQ0FnTHk4Z1kzSmxZWFJsSUdsdWRHVnlibUZzSUhkaGRHTm9aWElnWm05eUlIUm9aU0JqYjIxd2RYUmxaQ0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdJSGRoZEdOb1pYSnpXMnRsZVYwZ1BTQnVaWGNnVjJGMFkyaGxjaWhjYmlBZ0lDQWdJQ0FnZG0wc1hHNGdJQ0FnSUNBZ0lHZGxkSFJsY2lCOGZDQnViMjl3TEZ4dUlDQWdJQ0FnSUNCdWIyOXdMRnh1SUNBZ0lDQWdJQ0JqYjIxd2RYUmxaRmRoZEdOb1pYSlBjSFJwYjI1elhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHTnZiWEJ2Ym1WdWRDMWtaV1pwYm1Wa0lHTnZiWEIxZEdWa0lIQnliM0JsY25ScFpYTWdZWEpsSUdGc2NtVmhaSGtnWkdWbWFXNWxaQ0J2YmlCMGFHVmNiaUFnSUNBdkx5QmpiMjF3YjI1bGJuUWdjSEp2ZEc5MGVYQmxMaUJYWlNCdmJteDVJRzVsWldRZ2RHOGdaR1ZtYVc1bElHTnZiWEIxZEdWa0lIQnliM0JsY25ScFpYTWdaR1ZtYVc1bFpGeHVJQ0FnSUM4dklHRjBJR2x1YzNSaGJuUnBZWFJwYjI0Z2FHVnlaUzVjYmlBZ0lDQnBaaUFvSVNoclpYa2dhVzRnZG0wcEtTQjdYRzRnSUNBZ0lDQmtaV1pwYm1WRGIyMXdkWFJsWkNoMmJTd2dhMlY1TENCMWMyVnlSR1ZtS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lHbG1JQ2hyWlhrZ2FXNGdkbTB1SkdSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnZDJGeWJpZ29YQ0pVYUdVZ1kyOXRjSFYwWldRZ2NISnZjR1Z5ZEhrZ1hGeGNJbHdpSUNzZ2EyVjVJQ3NnWENKY1hGd2lJR2x6SUdGc2NtVmhaSGtnWkdWbWFXNWxaQ0JwYmlCa1lYUmhMbHdpS1N3Z2RtMHBPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gyYlM0a2IzQjBhVzl1Y3k1d2NtOXdjeUFtSmlCclpYa2dhVzRnZG0wdUpHOXdkR2x2Ym5NdWNISnZjSE1wSUh0Y2JpQWdJQ0FnSUNBZ2QyRnliaWdvWENKVWFHVWdZMjl0Y0hWMFpXUWdjSEp2Y0dWeWRIa2dYRnhjSWx3aUlDc2dhMlY1SUNzZ1hDSmNYRndpSUdseklHRnNjbVZoWkhrZ1pHVm1hVzVsWkNCaGN5QmhJSEJ5YjNBdVhDSXBMQ0IyYlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUmxabWx1WlVOdmJYQjFkR1ZrSUNoY2JpQWdkR0Z5WjJWMExGeHVJQ0JyWlhrc1hHNGdJSFZ6WlhKRVpXWmNiaWtnZTF4dUlDQjJZWElnYzJodmRXeGtRMkZqYUdVZ1BTQWhhWE5UWlhKMlpYSlNaVzVrWlhKcGJtY29LVHRjYmlBZ2FXWWdLSFI1Y0dWdlppQjFjMlZ5UkdWbUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnYzJoaGNtVmtVSEp2Y0dWeWRIbEVaV1pwYm1sMGFXOXVMbWRsZENBOUlITm9iM1ZzWkVOaFkyaGxYRzRnSUNBZ0lDQS9JR055WldGMFpVTnZiWEIxZEdWa1IyVjBkR1Z5S0d0bGVTbGNiaUFnSUNBZ0lEb2dkWE5sY2tSbFpqdGNiaUFnSUNCemFHRnlaV1JRY205d1pYSjBlVVJsWm1sdWFYUnBiMjR1YzJWMElEMGdibTl2Y0R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCemFHRnlaV1JRY205d1pYSjBlVVJsWm1sdWFYUnBiMjR1WjJWMElEMGdkWE5sY2tSbFppNW5aWFJjYmlBZ0lDQWdJRDhnYzJodmRXeGtRMkZqYUdVZ0ppWWdkWE5sY2tSbFppNWpZV05vWlNBaFBUMGdabUZzYzJWY2JpQWdJQ0FnSUNBZ1B5QmpjbVZoZEdWRGIyMXdkWFJsWkVkbGRIUmxjaWhyWlhrcFhHNGdJQ0FnSUNBZ0lEb2dkWE5sY2tSbFppNW5aWFJjYmlBZ0lDQWdJRG9nYm05dmNEdGNiaUFnSUNCemFHRnlaV1JRY205d1pYSjBlVVJsWm1sdWFYUnBiMjR1YzJWMElEMGdkWE5sY2tSbFppNXpaWFJjYmlBZ0lDQWdJRDhnZFhObGNrUmxaaTV6WlhSY2JpQWdJQ0FnSURvZ2JtOXZjRHRjYmlBZ2ZWeHVJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QW1KbHh1SUNBZ0lDQWdjMmhoY21Wa1VISnZjR1Z5ZEhsRVpXWnBibWwwYVc5dUxuTmxkQ0E5UFQwZ2JtOXZjQ2tnZTF4dUlDQWdJSE5vWVhKbFpGQnliM0JsY25SNVJHVm1hVzVwZEdsdmJpNXpaWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBb1hDSkRiMjF3ZFhSbFpDQndjbTl3WlhKMGVTQmNYRndpWENJZ0t5QnJaWGtnS3lCY0lseGNYQ0lnZDJGeklHRnpjMmxuYm1Wa0lIUnZJR0oxZENCcGRDQm9ZWE1nYm04Z2MyVjBkR1Z5TGx3aUtTeGNiaUFnSUNBZ0lDQWdkR2hwYzF4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5TzF4dUlDQjlYRzRnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBZWEpuWlhRc0lHdGxlU3dnYzJoaGNtVmtVSEp2Y0dWeWRIbEVaV1pwYm1sMGFXOXVLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZM0psWVhSbFEyOXRjSFYwWldSSFpYUjBaWElnS0d0bGVTa2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnWTI5dGNIVjBaV1JIWlhSMFpYSWdLQ2tnZTF4dUlDQWdJSFpoY2lCM1lYUmphR1Z5SUQwZ2RHaHBjeTVmWTI5dGNIVjBaV1JYWVhSamFHVnljeUFtSmlCMGFHbHpMbDlqYjIxd2RYUmxaRmRoZEdOb1pYSnpXMnRsZVYwN1hHNGdJQ0FnYVdZZ0tIZGhkR05vWlhJcElIdGNiaUFnSUNBZ0lHbG1JQ2gzWVhSamFHVnlMbVJwY25SNUtTQjdYRzRnSUNBZ0lDQWdJSGRoZEdOb1pYSXVaWFpoYkhWaGRHVW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoRVpYQXVkR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQWdJSGRoZEdOb1pYSXVaR1Z3Wlc1a0tDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2QyRjBZMmhsY2k1MllXeDFaVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMFRXVjBhRzlrY3lBb2RtMHNJRzFsZEdodlpITXBJSHRjYmlBZ2RtRnlJSEJ5YjNCeklEMGdkbTB1Skc5d2RHbHZibk11Y0hKdmNITTdYRzRnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ0WlhSb2IyUnpLU0I3WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lHbG1JQ2h0WlhSb2IyUnpXMnRsZVYwZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lGd2lUV1YwYUc5a0lGeGNYQ0pjSWlBcklHdGxlU0FySUZ3aVhGeGNJaUJvWVhNZ1lXNGdkVzVrWldacGJtVmtJSFpoYkhWbElHbHVJSFJvWlNCamIyMXdiMjVsYm5RZ1pHVm1hVzVwZEdsdmJpNGdYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lGd2lSR2xrSUhsdmRTQnlaV1psY21WdVkyVWdkR2hsSUdaMWJtTjBhVzl1SUdOdmNuSmxZM1JzZVQ5Y0lpeGNiaUFnSUNBZ0lDQWdJQ0IyYlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLSEJ5YjNCeklDWW1JR2hoYzA5M2JpaHdjbTl3Y3l3Z2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FnSUNoY0lrMWxkR2h2WkNCY1hGd2lYQ0lnS3lCclpYa2dLeUJjSWx4Y1hDSWdhR0Z6SUdGc2NtVmhaSGtnWW1WbGJpQmtaV1pwYm1Wa0lHRnpJR0VnY0hKdmNDNWNJaWtzWEc0Z0lDQWdJQ0FnSUNBZ2RtMWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNnb2EyVjVJR2x1SUhadEtTQW1KaUJwYzFKbGMyVnlkbVZrS0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0JjSWsxbGRHaHZaQ0JjWEZ3aVhDSWdLeUJyWlhrZ0t5QmNJbHhjWENJZ1kyOXVabXhwWTNSeklIZHBkR2dnWVc0Z1pYaHBjM1JwYm1jZ1ZuVmxJR2x1YzNSaGJtTmxJRzFsZEdodlpDNGdYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lGd2lRWFp2YVdRZ1pHVm1hVzVwYm1jZ1kyOXRjRzl1Wlc1MElHMWxkR2h2WkhNZ2RHaGhkQ0J6ZEdGeWRDQjNhWFJvSUY4Z2IzSWdKQzVjSWx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0IyYlZ0clpYbGRJRDBnYldWMGFHOWtjMXRyWlhsZElEMDlJRzUxYkd3Z1B5QnViMjl3SURvZ1ltbHVaQ2h0WlhSb2IyUnpXMnRsZVYwc0lIWnRLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGJtbDBWMkYwWTJnZ0tIWnRMQ0IzWVhSamFDa2dlMXh1SUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnZDJGMFkyZ3BJSHRjYmlBZ0lDQjJZWElnYUdGdVpHeGxjaUE5SUhkaGRHTm9XMnRsZVYwN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYUdGdVpHeGxjaWtwSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2FHRnVaR3hsY2k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JqY21WaGRHVlhZWFJqYUdWeUtIWnRMQ0JyWlhrc0lHaGhibVJzWlhKYmFWMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCamNtVmhkR1ZYWVhSamFHVnlLSFp0TENCclpYa3NJR2hoYm1Sc1pYSXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJqY21WaGRHVlhZWFJqYUdWeUlDaGNiaUFnZG0wc1hHNGdJR3RsZVU5eVJtNHNYRzRnSUdoaGJtUnNaWElzWEc0Z0lHOXdkR2x2Ym5OY2Jpa2dlMXh1SUNCcFppQW9hWE5RYkdGcGJrOWlhbVZqZENob1lXNWtiR1Z5S1NrZ2UxeHVJQ0FnSUc5d2RHbHZibk1nUFNCb1lXNWtiR1Z5TzF4dUlDQWdJR2hoYm1Sc1pYSWdQU0JvWVc1a2JHVnlMbWhoYm1Sc1pYSTdYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJvWVc1a2JHVnlJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUdoaGJtUnNaWElnUFNCMmJWdG9ZVzVrYkdWeVhUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2RtMHVKSGRoZEdOb0tHdGxlVTl5Um00c0lHaGhibVJzWlhJc0lHOXdkR2x2Ym5NcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhOMFlYUmxUV2w0YVc0Z0tGWjFaU2tnZTF4dUlDQXZMeUJtYkc5M0lITnZiV1ZvYjNjZ2FHRnpJSEJ5YjJKc1pXMXpJSGRwZEdnZ1pHbHlaV04wYkhrZ1pHVmpiR0Z5WldRZ1pHVm1hVzVwZEdsdmJpQnZZbXBsWTNSY2JpQWdMeThnZDJobGJpQjFjMmx1WnlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa3NJSE52SUhkbElHaGhkbVVnZEc4Z2NISnZZMlZrZFhKaGJHeDVJR0oxYVd4a0lIVndYRzRnSUM4dklIUm9aU0J2WW1wbFkzUWdhR1Z5WlM1Y2JpQWdkbUZ5SUdSaGRHRkVaV1lnUFNCN2ZUdGNiaUFnWkdGMFlVUmxaaTVuWlhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUIwYUdsekxsOWtZWFJoSUgwN1hHNGdJSFpoY2lCd2NtOXdjMFJsWmlBOUlIdDlPMXh1SUNCd2NtOXdjMFJsWmk1blpYUWdQU0JtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlCMGFHbHpMbDl3Y205d2N5QjlPMXh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJR1JoZEdGRVpXWXVjMlYwSUQwZ1puVnVZM1JwYjI0Z0tHNWxkMFJoZEdFcElIdGNiaUFnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNkQmRtOXBaQ0J5WlhCc1lXTnBibWNnYVc1emRHRnVZMlVnY205dmRDQWtaR0YwWVM0Z0p5QXJYRzRnSUNBZ0lDQWdJQ2RWYzJVZ2JtVnpkR1ZrSUdSaGRHRWdjSEp2Y0dWeWRHbGxjeUJwYm5OMFpXRmtMaWNzWEc0Z0lDQWdJQ0FnSUhSb2FYTmNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZUdGNiaUFnSUNCd2NtOXdjMFJsWmk1elpYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCM1lYSnVLRndpSkhCeWIzQnpJR2x6SUhKbFlXUnZibXg1TGx3aUxDQjBhR2x6S1R0Y2JpQWdJQ0I5TzF4dUlDQjlYRzRnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaFdkV1V1Y0hKdmRHOTBlWEJsTENBbkpHUmhkR0VuTENCa1lYUmhSR1ZtS1R0Y2JpQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0ZaMVpTNXdjbTkwYjNSNWNHVXNJQ2NrY0hKdmNITW5MQ0J3Y205d2MwUmxaaWs3WEc1Y2JpQWdWblZsTG5CeWIzUnZkSGx3WlM0a2MyVjBJRDBnYzJWME8xeHVJQ0JXZFdVdWNISnZkRzkwZVhCbExpUmtaV3hsZEdVZ1BTQmtaV3c3WEc1Y2JpQWdWblZsTG5CeWIzUnZkSGx3WlM0a2QyRjBZMmdnUFNCbWRXNWpkR2x2YmlBb1hHNGdJQ0FnWlhod1QzSkdiaXhjYmlBZ0lDQmpZaXhjYmlBZ0lDQnZjSFJwYjI1elhHNGdJQ2tnZTF4dUlDQWdJSFpoY2lCMmJTQTlJSFJvYVhNN1hHNGdJQ0FnYVdZZ0tHbHpVR3hoYVc1UFltcGxZM1FvWTJJcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1kzSmxZWFJsVjJGMFkyaGxjaWgyYlN3Z1pYaHdUM0pHYml3Z1kySXNJRzl3ZEdsdmJuTXBYRzRnSUNBZ2ZWeHVJQ0FnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1SUNBZ0lHOXdkR2x2Ym5NdWRYTmxjaUE5SUhSeWRXVTdYRzRnSUNBZ2RtRnlJSGRoZEdOb1pYSWdQU0J1WlhjZ1YyRjBZMmhsY2loMmJTd2daWGh3VDNKR2Jpd2dZMklzSUc5d2RHbHZibk1wTzF4dUlDQWdJR2xtSUNodmNIUnBiMjV6TG1sdGJXVmthV0YwWlNrZ2UxeHVJQ0FnSUNBZ1kySXVZMkZzYkNoMmJTd2dkMkYwWTJobGNpNTJZV3gxWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQjFibmRoZEdOb1JtNGdLQ2tnZTF4dUlDQWdJQ0FnZDJGMFkyaGxjaTUwWldGeVpHOTNiaWdwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibjFjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFJRY205MmFXUmxJQ2gyYlNrZ2UxeHVJQ0IyWVhJZ2NISnZkbWxrWlNBOUlIWnRMaVJ2Y0hScGIyNXpMbkJ5YjNacFpHVTdYRzRnSUdsbUlDaHdjbTkyYVdSbEtTQjdYRzRnSUNBZ2RtMHVYM0J5YjNacFpHVmtJRDBnZEhsd1pXOW1JSEJ5YjNacFpHVWdQVDA5SUNkbWRXNWpkR2x2YmlkY2JpQWdJQ0FnSUQ4Z2NISnZkbWxrWlM1allXeHNLSFp0S1Z4dUlDQWdJQ0FnT2lCd2NtOTJhV1JsTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFJKYm1wbFkzUnBiMjV6SUNoMmJTa2dlMXh1SUNCMllYSWdjbVZ6ZFd4MElEMGdjbVZ6YjJ4MlpVbHVhbVZqZENoMmJTNGtiM0IwYVc5dWN5NXBibXBsWTNRc0lIWnRLVHRjYmlBZ2FXWWdLSEpsYzNWc2RDa2dlMXh1SUNBZ0lHOWljMlZ5ZG1WeVUzUmhkR1V1YzJodmRXeGtRMjl1ZG1WeWRDQTlJR1poYkhObE8xeHVJQ0FnSUU5aWFtVmpkQzVyWlhsektISmxjM1ZzZENrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2EyVjVLU0I3WEc0Z0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnWld4elpTQXFMMXh1SUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdaR1ZtYVc1bFVtVmhZM1JwZG1Vb2RtMHNJR3RsZVN3Z2NtVnpkV3gwVzJ0bGVWMHNJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0pCZG05cFpDQnRkWFJoZEdsdVp5QmhiaUJwYm1wbFkzUmxaQ0IyWVd4MVpTQmthWEpsWTNSc2VTQnphVzVqWlNCMGFHVWdZMmhoYm1kbGN5QjNhV3hzSUdKbElGd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2liM1psY25keWFYUjBaVzRnZDJobGJtVjJaWElnZEdobElIQnliM1pwWkdWa0lHTnZiWEJ2Ym1WdWRDQnlaUzF5Wlc1a1pYSnpMaUJjSWlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW1sdWFtVmpkR2x2YmlCaVpXbHVaeUJ0ZFhSaGRHVmtPaUJjWEZ3aVhDSWdLeUJyWlhrZ0t5QmNJbHhjWENKY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhadFhHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCa1pXWnBibVZTWldGamRHbDJaU2gyYlN3Z2EyVjVMQ0J5WlhOMWJIUmJhMlY1WFNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnYjJKelpYSjJaWEpUZEdGMFpTNXphRzkxYkdSRGIyNTJaWEowSUQwZ2RISjFaVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpYTnZiSFpsU1c1cVpXTjBJQ2hwYm1wbFkzUXNJSFp0S1NCN1hHNGdJR2xtSUNocGJtcGxZM1FwSUh0Y2JpQWdJQ0F2THlCcGJtcGxZM1FnYVhNZ09tRnVlU0JpWldOaGRYTmxJR1pzYjNjZ2FYTWdibTkwSUhOdFlYSjBJR1Z1YjNWbmFDQjBieUJtYVdkMWNtVWdiM1YwSUdOaFkyaGxaRnh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4dUlDQWdJSFpoY2lCclpYbHpJRDBnYUdGelUzbHRZbTlzWEc0Z0lDQWdJQ0EvSUZKbFpteGxZM1F1YjNkdVMyVjVjeWhwYm1wbFkzUXBMbVpwYkhSbGNpaG1kVzVqZEdsdmJpQW9hMlY1S1NCN1hHNGdJQ0FnSUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLR2x1YW1WamRDd2dhMlY1S1M1bGJuVnRaWEpoWW14bFhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ09pQlBZbXBsWTNRdWEyVjVjeWhwYm1wbFkzUXBPMXh1WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JyWlhsekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2EyVjVJRDBnYTJWNWMxdHBYVHRjYmlBZ0lDQWdJSFpoY2lCd2NtOTJhV1JsUzJWNUlEMGdhVzVxWldOMFcydGxlVjB1Wm5KdmJUdGNiaUFnSUNBZ0lIWmhjaUJ6YjNWeVkyVWdQU0IyYlR0Y2JpQWdJQ0FnSUhkb2FXeGxJQ2h6YjNWeVkyVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITnZkWEpqWlM1ZmNISnZkbWxrWldRZ0ppWWdjSEp2ZG1sa1pVdGxlU0JwYmlCemIzVnlZMlV1WDNCeWIzWnBaR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MFcydGxlVjBnUFNCemIzVnlZMlV1WDNCeWIzWnBaR1ZrVzNCeWIzWnBaR1ZMWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjMjkxY21ObElEMGdjMjkxY21ObExpUndZWEpsYm5RN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9JWE52ZFhKalpTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0oyUmxabUYxYkhRbklHbHVJR2x1YW1WamRGdHJaWGxkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUhCeWIzWnBaR1ZFWldaaGRXeDBJRDBnYVc1cVpXTjBXMnRsZVYwdVpHVm1ZWFZzZER0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSYmEyVjVYU0E5SUhSNWNHVnZaaUJ3Y205MmFXUmxSR1ZtWVhWc2RDQTlQVDBnSjJaMWJtTjBhVzl1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdQeUJ3Y205MmFXUmxSR1ZtWVhWc2RDNWpZV3hzS0hadEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCd2NtOTJhV1JsUkdWbVlYVnNkRHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnZDJGeWJpZ29YQ0pKYm1wbFkzUnBiMjRnWEZ4Y0lsd2lJQ3NnYTJWNUlDc2dYQ0pjWEZ3aUlHNXZkQ0JtYjNWdVpGd2lLU3dnZG0wcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUmNiaUFnZlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1THlvcVhHNGdLaUJTZFc1MGFXMWxJR2hsYkhCbGNpQm1iM0lnY21WdVpHVnlhVzVuSUhZdFptOXlJR3hwYzNSekxseHVJQ292WEc1bWRXNWpkR2x2YmlCeVpXNWtaWEpNYVhOMElDaGNiaUFnZG1Gc0xGeHVJQ0J5Wlc1a1pYSmNiaWtnZTF4dUlDQjJZWElnY21WMExDQnBMQ0JzTENCclpYbHpMQ0JyWlhrN1hHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkNrZ2ZId2dkSGx3Wlc5bUlIWmhiQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCeVpYUWdQU0J1WlhjZ1FYSnlZWGtvZG1Gc0xteGxibWQwYUNrN1hHNGdJQ0FnWm05eUlDaHBJRDBnTUN3Z2JDQTlJSFpoYkM1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lISmxkRnRwWFNBOUlISmxibVJsY2loMllXeGJhVjBzSUdrcE8xeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdkbUZzSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lISmxkQ0E5SUc1bGR5QkJjbkpoZVNoMllXd3BPMXh1SUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCMllXdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2NtVjBXMmxkSUQwZ2NtVnVaR1Z5S0drZ0t5QXhMQ0JwS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCcFppQW9hWE5QWW1wbFkzUW9kbUZzS1NrZ2UxeHVJQ0FnSUd0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3loMllXd3BPMXh1SUNBZ0lISmxkQ0E5SUc1bGR5QkJjbkpoZVNoclpYbHpMbXhsYm1kMGFDazdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ01Dd2diQ0E5SUd0bGVYTXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JyWlhrZ1BTQnJaWGx6VzJsZE8xeHVJQ0FnSUNBZ2NtVjBXMmxkSUQwZ2NtVnVaR1Z5S0haaGJGdHJaWGxkTENCclpYa3NJR2twTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JwWmlBb2FYTkVaV1lvY21WMEtTa2dlMXh1SUNBZ0lDaHlaWFFwTGw5cGMxWk1hWE4wSUQwZ2RISjFaVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVYwWEc1OVhHNWNiaThxSUNBcUwxeHVYRzR2S2lwY2JpQXFJRkoxYm5ScGJXVWdhR1ZzY0dWeUlHWnZjaUJ5Wlc1a1pYSnBibWNnUEhOc2IzUStYRzRnS2k5Y2JtWjFibU4wYVc5dUlISmxibVJsY2xOc2IzUWdLRnh1SUNCdVlXMWxMRnh1SUNCbVlXeHNZbUZqYXl4Y2JpQWdjSEp2Y0hNc1hHNGdJR0pwYm1SUFltcGxZM1JjYmlrZ2UxeHVJQ0IyWVhJZ2MyTnZjR1ZrVTJ4dmRFWnVJRDBnZEdocGN5NGtjMk52Y0dWa1UyeHZkSE5iYm1GdFpWMDdYRzRnSUhaaGNpQnViMlJsY3p0Y2JpQWdhV1lnS0hOamIzQmxaRk5zYjNSR2Jpa2dleUF2THlCelkyOXdaV1FnYzJ4dmRGeHVJQ0FnSUhCeWIzQnpJRDBnY0hKdmNITWdmSHdnZTMwN1hHNGdJQ0FnYVdZZ0tHSnBibVJQWW1wbFkzUXBJSHRjYmlBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklDWW1JQ0ZwYzA5aWFtVmpkQ2hpYVc1a1QySnFaV04wS1NrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lDZHpiRzkwSUhZdFltbHVaQ0IzYVhSb2IzVjBJR0Z5WjNWdFpXNTBJR1Y0Y0dWamRITWdZVzRnVDJKcVpXTjBKeXhjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J3Y205d2N5QTlJR1Y0ZEdWdVpDaGxlSFJsYm1Rb2UzMHNJR0pwYm1SUFltcGxZM1FwTENCd2NtOXdjeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHNXZaR1Z6SUQwZ2MyTnZjR1ZrVTJ4dmRFWnVLSEJ5YjNCektTQjhmQ0JtWVd4c1ltRmphenRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVhJZ2MyeHZkRTV2WkdWeklEMGdkR2hwY3k0a2MyeHZkSE5iYm1GdFpWMDdYRzRnSUNBZ0x5OGdkMkZ5YmlCa2RYQnNhV05oZEdVZ2MyeHZkQ0IxYzJGblpWeHVJQ0FnSUdsbUlDaHpiRzkwVG05a1pYTXBJSHRjYmlBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklDWW1JSE5zYjNST2IyUmxjeTVmY21WdVpHVnlaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ0FnSUNCY0lrUjFjR3hwWTJGMFpTQndjbVZ6Wlc1alpTQnZaaUJ6Ykc5MElGeGNYQ0pjSWlBcklHNWhiV1VnS3lCY0lseGNYQ0lnWm05MWJtUWdhVzRnZEdobElITmhiV1VnY21WdVpHVnlJSFJ5WldVZ1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUZ3aUxTQjBhR2x6SUhkcGJHd2diR2xyWld4NUlHTmhkWE5sSUhKbGJtUmxjaUJsY25KdmNuTXVYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYzJ4dmRFNXZaR1Z6TGw5eVpXNWtaWEpsWkNBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNBZ0lHNXZaR1Z6SUQwZ2MyeHZkRTV2WkdWeklIeDhJR1poYkd4aVlXTnJPMXh1SUNCOVhHNWNiaUFnZG1GeUlIUmhjbWRsZENBOUlIQnliM0J6SUNZbUlIQnliM0J6TG5Oc2IzUTdYRzRnSUdsbUlDaDBZWEpuWlhRcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NGtZM0psWVhSbFJXeGxiV1Z1ZENnbmRHVnRjR3hoZEdVbkxDQjdJSE5zYjNRNklIUmhjbWRsZENCOUxDQnViMlJsY3lsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnYm05a1pYTmNiaUFnZlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1THlvcVhHNGdLaUJTZFc1MGFXMWxJR2hsYkhCbGNpQm1iM0lnY21WemIyeDJhVzVuSUdacGJIUmxjbk5jYmlBcUwxeHVablZ1WTNScGIyNGdjbVZ6YjJ4MlpVWnBiSFJsY2lBb2FXUXBJSHRjYmlBZ2NtVjBkWEp1SUhKbGMyOXNkbVZCYzNObGRDaDBhR2x6TGlSdmNIUnBiMjV6TENBblptbHNkR1Z5Y3ljc0lHbGtMQ0IwY25WbEtTQjhmQ0JwWkdWdWRHbDBlVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVMeW9xWEc0Z0tpQlNkVzUwYVcxbElHaGxiSEJsY2lCbWIzSWdZMmhsWTJ0cGJtY2dhMlY1UTI5a1pYTWdabkp2YlNCamIyNW1hV2N1WEc0Z0tpQmxlSEJ2YzJWa0lHRnpJRloxWlM1d2NtOTBiM1I1Y0dVdVgydGNiaUFxSUhCaGMzTnBibWNnYVc0Z1pYWmxiblJMWlhsT1lXMWxJR0Z6SUd4aGMzUWdZWEpuZFcxbGJuUWdjMlZ3WVhKaGRHVnNlU0JtYjNJZ1ltRmphM2RoY21SeklHTnZiWEJoZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqYUdWamEwdGxlVU52WkdWeklDaGNiaUFnWlhabGJuUkxaWGxEYjJSbExGeHVJQ0JyWlhrc1hHNGdJR0oxYVd4MFNXNUJiR2xoY3l4Y2JpQWdaWFpsYm5STFpYbE9ZVzFsWEc0cElIdGNiaUFnZG1GeUlHdGxlVU52WkdWeklEMGdZMjl1Wm1sbkxtdGxlVU52WkdWelcydGxlVjBnZkh3Z1luVnBiSFJKYmtGc2FXRnpPMXh1SUNCcFppQW9hMlY1UTI5a1pYTXBJSHRjYmlBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaHJaWGxEYjJSbGN5a3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnJaWGxEYjJSbGN5NXBibVJsZUU5bUtHVjJaVzUwUzJWNVEyOWtaU2tnUFQwOUlDMHhYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJyWlhsRGIyUmxjeUFoUFQwZ1pYWmxiblJMWlhsRGIyUmxYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdhV1lnS0dWMlpXNTBTMlY1VG1GdFpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCb2VYQm9aVzVoZEdVb1pYWmxiblJMWlhsT1lXMWxLU0FoUFQwZ2EyVjVYRzRnSUgxY2JuMWNibHh1THlvZ0lDb3ZYRzVjYmk4cUtseHVJQ29nVW5WdWRHbHRaU0JvWld4d1pYSWdabTl5SUcxbGNtZHBibWNnZGkxaWFXNWtQVndpYjJKcVpXTjBYQ0lnYVc1MGJ5QmhJRlpPYjJSbEozTWdaR0YwWVM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWW1sdVpFOWlhbVZqZEZCeWIzQnpJQ2hjYmlBZ1pHRjBZU3hjYmlBZ2RHRm5MRnh1SUNCMllXeDFaU3hjYmlBZ1lYTlFjbTl3TEZ4dUlDQnBjMU41Ym1OY2Jpa2dlMXh1SUNCcFppQW9kbUZzZFdVcElIdGNiaUFnSUNCcFppQW9JV2x6VDJKcVpXTjBLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FuZGkxaWFXNWtJSGRwZEdodmRYUWdZWEpuZFcxbGJuUWdaWGh3WldOMGN5QmhiaUJQWW1wbFkzUWdiM0lnUVhKeVlYa2dkbUZzZFdVbkxGeHVJQ0FnSUNBZ0lDQjBhR2x6WEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQjBiMDlpYW1WamRDaDJZV3gxWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMllYSWdhR0Z6YUR0Y2JpQWdJQ0FnSUhaaGNpQnNiMjl3SUQwZ1puVnVZM1JwYjI0Z0tDQnJaWGtnS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNCclpYa2dQVDA5SUNkamJHRnpjeWNnZkh4Y2JpQWdJQ0FnSUNBZ0lDQnJaWGtnUFQwOUlDZHpkSGxzWlNjZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0JwYzFKbGMyVnlkbVZrUVhSMGNtbGlkWFJsS0d0bGVTbGNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FHRnphQ0E5SUdSaGRHRTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlIUjVjR1VnUFNCa1lYUmhMbUYwZEhKeklDWW1JR1JoZEdFdVlYUjBjbk11ZEhsd1pUdGNiaUFnSUNBZ0lDQWdJQ0JvWVhOb0lEMGdZWE5RY205d0lIeDhJR052Ym1acFp5NXRkWE4wVlhObFVISnZjQ2gwWVdjc0lIUjVjR1VzSUd0bGVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z1pHRjBZUzVrYjIxUWNtOXdjeUI4ZkNBb1pHRjBZUzVrYjIxUWNtOXdjeUE5SUh0OUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCa1lYUmhMbUYwZEhKeklIeDhJQ2hrWVhSaExtRjBkSEp6SUQwZ2UzMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hLR3RsZVNCcGJpQm9ZWE5vS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2hoYzJoYmEyVjVYU0E5SUhaaGJIVmxXMnRsZVYwN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FYTlRlVzVqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2IyNGdQU0JrWVhSaExtOXVJSHg4SUNoa1lYUmhMbTl1SUQwZ2UzMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNWJLRndpZFhCa1lYUmxPbHdpSUNzZ2EyVjVLVjBnUFNCbWRXNWpkR2x2YmlBb0pHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxXMnRsZVYwZ1BTQWtaWFpsYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJSFpoYkhWbEtTQnNiMjl3S0NCclpYa2dLVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlHUmhkR0ZjYm4xY2JseHVMeW9nSUNvdlhHNWNiaThxS2x4dUlDb2dVblZ1ZEdsdFpTQm9aV3h3WlhJZ1ptOXlJSEpsYm1SbGNtbHVaeUJ6ZEdGMGFXTWdkSEpsWlhNdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbGJtUmxjbE4wWVhScFl5QW9YRzRnSUdsdVpHVjRMRnh1SUNCcGMwbHVSbTl5WEc0cElIdGNiaUFnZG1GeUlHTmhZMmhsWkNBOUlIUm9hWE11WDNOMFlYUnBZMVJ5WldWeklIeDhJQ2gwYUdsekxsOXpkR0YwYVdOVWNtVmxjeUE5SUZ0ZEtUdGNiaUFnZG1GeUlIUnlaV1VnUFNCallXTm9aV1JiYVc1a1pYaGRPMXh1SUNBdkx5QnBaaUJvWVhNZ1lXeHlaV0ZrZVMxeVpXNWtaWEpsWkNCemRHRjBhV01nZEhKbFpTQmhibVFnYm05MElHbHVjMmxrWlNCMkxXWnZjaXhjYmlBZ0x5OGdkMlVnWTJGdUlISmxkWE5sSUhSb1pTQnpZVzFsSUhSeVpXVWdZbmtnWkc5cGJtY2dZU0J6YUdGc2JHOTNJR05zYjI1bExseHVJQ0JwWmlBb2RISmxaU0FtSmlBaGFYTkpia1p2Y2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJCY25KaGVTNXBjMEZ5Y21GNUtIUnlaV1VwWEc0Z0lDQWdJQ0EvSUdOc2IyNWxWazV2WkdWektIUnlaV1VwWEc0Z0lDQWdJQ0E2SUdOc2IyNWxWazV2WkdVb2RISmxaU2xjYmlBZ2ZWeHVJQ0F2THlCdmRHaGxjbmRwYzJVc0lISmxibVJsY2lCaElHWnlaWE5vSUhSeVpXVXVYRzRnSUhSeVpXVWdQU0JqWVdOb1pXUmJhVzVrWlhoZElEMGdkR2hwY3k0a2IzQjBhVzl1Y3k1emRHRjBhV05TWlc1a1pYSkdibk5iYVc1a1pYaGRMbU5oYkd3b1hHNGdJQ0FnZEdocGN5NWZjbVZ1WkdWeVVISnZlSGtzWEc0Z0lDQWdiblZzYkN4Y2JpQWdJQ0IwYUdseklDOHZJR1p2Y2lCeVpXNWtaWElnWm01eklHZGxibVZ5WVhSbFpDQm1iM0lnWm5WdVkzUnBiMjVoYkNCamIyMXdiMjVsYm5RZ2RHVnRjR3hoZEdWelhHNGdJQ2s3WEc0Z0lHMWhjbXRUZEdGMGFXTW9kSEpsWlN3Z0tGd2lYMTl6ZEdGMGFXTmZYMXdpSUNzZ2FXNWtaWGdwTENCbVlXeHpaU2s3WEc0Z0lISmxkSFZ5YmlCMGNtVmxYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VuVnVkR2x0WlNCb1pXeHdaWElnWm05eUlIWXRiMjVqWlM1Y2JpQXFJRVZtWm1WamRHbDJaV3g1SUdsMElHMWxZVzV6SUcxaGNtdHBibWNnZEdobElHNXZaR1VnWVhNZ2MzUmhkR2xqSUhkcGRHZ2dZU0IxYm1seGRXVWdhMlY1TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ0WVhKclQyNWpaU0FvWEc0Z0lIUnlaV1VzWEc0Z0lHbHVaR1Y0TEZ4dUlDQnJaWGxjYmlrZ2UxeHVJQ0J0WVhKclUzUmhkR2xqS0hSeVpXVXNJQ2hjSWw5ZmIyNWpaVjlmWENJZ0t5QnBibVJsZUNBcklDaHJaWGtnUHlBb1hDSmZYQ0lnS3lCclpYa3BJRG9nWENKY0lpa3BMQ0IwY25WbEtUdGNiaUFnY21WMGRYSnVJSFJ5WldWY2JuMWNibHh1Wm5WdVkzUnBiMjRnYldGeWExTjBZWFJwWXlBb1hHNGdJSFJ5WldVc1hHNGdJR3RsZVN4Y2JpQWdhWE5QYm1ObFhHNHBJSHRjYmlBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2RISmxaU2twSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhSeVpXVXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBjbVZsVzJsZElDWW1JSFI1Y0dWdlppQjBjbVZsVzJsZElDRTlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNCdFlYSnJVM1JoZEdsalRtOWtaU2gwY21WbFcybGRMQ0FvYTJWNUlDc2dYQ0pmWENJZ0t5QnBLU3dnYVhOUGJtTmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdiV0Z5YTFOMFlYUnBZMDV2WkdVb2RISmxaU3dnYTJWNUxDQnBjMDl1WTJVcE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJRzFoY210VGRHRjBhV05PYjJSbElDaHViMlJsTENCclpYa3NJR2x6VDI1alpTa2dlMXh1SUNCdWIyUmxMbWx6VTNSaGRHbGpJRDBnZEhKMVpUdGNiaUFnYm05a1pTNXJaWGtnUFNCclpYazdYRzRnSUc1dlpHVXVhWE5QYm1ObElEMGdhWE5QYm1ObE8xeHVmVnh1WEc0dktpQWdLaTljYmx4dVpuVnVZM1JwYjI0Z1ltbHVaRTlpYW1WamRFeHBjM1JsYm1WeWN5QW9aR0YwWVN3Z2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0haaGJIVmxLU0I3WEc0Z0lDQWdhV1lnS0NGcGMxQnNZV2x1VDJKcVpXTjBLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FuZGkxdmJpQjNhWFJvYjNWMElHRnlaM1Z0Wlc1MElHVjRjR1ZqZEhNZ1lXNGdUMkpxWldOMElIWmhiSFZsSnl4Y2JpQWdJQ0FnSUNBZ2RHaHBjMXh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtRnlJRzl1SUQwZ1pHRjBZUzV2YmlBOUlHUmhkR0V1YjI0Z1B5QmxlSFJsYm1Rb2UzMHNJR1JoZEdFdWIyNHBJRG9nZTMwN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVjRhWE4wYVc1bklEMGdiMjViYTJWNVhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5MWNuTWdQU0IyWVd4MVpWdHJaWGxkTzF4dUlDQWdJQ0FnSUNCdmJsdHJaWGxkSUQwZ1pYaHBjM1JwYm1jZ1B5QmJYUzVqYjI1allYUW9aWGhwYzNScGJtY3NJRzkxY25NcElEb2diM1Z5Y3p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1JoZEdGY2JuMWNibHh1THlvZ0lDb3ZYRzVjYm1aMWJtTjBhVzl1SUdsdWMzUmhiR3hTWlc1a1pYSklaV3h3WlhKeklDaDBZWEpuWlhRcElIdGNiaUFnZEdGeVoyVjBMbDl2SUQwZ2JXRnlhMDl1WTJVN1hHNGdJSFJoY21kbGRDNWZiaUE5SUhSdlRuVnRZbVZ5TzF4dUlDQjBZWEpuWlhRdVgzTWdQU0IwYjFOMGNtbHVaenRjYmlBZ2RHRnlaMlYwTGw5c0lEMGdjbVZ1WkdWeVRHbHpkRHRjYmlBZ2RHRnlaMlYwTGw5MElEMGdjbVZ1WkdWeVUyeHZkRHRjYmlBZ2RHRnlaMlYwTGw5eElEMGdiRzl2YzJWRmNYVmhiRHRjYmlBZ2RHRnlaMlYwTGw5cElEMGdiRzl2YzJWSmJtUmxlRTltTzF4dUlDQjBZWEpuWlhRdVgyMGdQU0J5Wlc1a1pYSlRkR0YwYVdNN1hHNGdJSFJoY21kbGRDNWZaaUE5SUhKbGMyOXNkbVZHYVd4MFpYSTdYRzRnSUhSaGNtZGxkQzVmYXlBOUlHTm9aV05yUzJWNVEyOWtaWE03WEc0Z0lIUmhjbWRsZEM1ZllpQTlJR0pwYm1SUFltcGxZM1JRY205d2N6dGNiaUFnZEdGeVoyVjBMbDkySUQwZ1kzSmxZWFJsVkdWNGRGWk9iMlJsTzF4dUlDQjBZWEpuWlhRdVgyVWdQU0JqY21WaGRHVkZiWEIwZVZaT2IyUmxPMXh1SUNCMFlYSm5aWFF1WDNVZ1BTQnlaWE52YkhabFUyTnZjR1ZrVTJ4dmRITTdYRzRnSUhSaGNtZGxkQzVmWnlBOUlHSnBibVJQWW1wbFkzUk1hWE4wWlc1bGNuTTdYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQkdkVzVqZEdsdmJtRnNVbVZ1WkdWeVEyOXVkR1Y0ZENBb1hHNGdJR1JoZEdFc1hHNGdJSEJ5YjNCekxGeHVJQ0JqYUdsc1pISmxiaXhjYmlBZ2NHRnlaVzUwTEZ4dUlDQkRkRzl5WEc0cElIdGNiaUFnZG1GeUlHOXdkR2x2Ym5NZ1BTQkRkRzl5TG05d2RHbHZibk03WEc0Z0lIUm9hWE11WkdGMFlTQTlJR1JoZEdFN1hHNGdJSFJvYVhNdWNISnZjSE1nUFNCd2NtOXdjenRjYmlBZ2RHaHBjeTVqYUdsc1pISmxiaUE5SUdOb2FXeGtjbVZ1TzF4dUlDQjBhR2x6TG5CaGNtVnVkQ0E5SUhCaGNtVnVkRHRjYmlBZ2RHaHBjeTVzYVhOMFpXNWxjbk1nUFNCa1lYUmhMbTl1SUh4OElHVnRjSFI1VDJKcVpXTjBPMXh1SUNCMGFHbHpMbWx1YW1WamRHbHZibk1nUFNCeVpYTnZiSFpsU1c1cVpXTjBLRzl3ZEdsdmJuTXVhVzVxWldOMExDQndZWEpsYm5RcE8xeHVJQ0IwYUdsekxuTnNiM1J6SUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdjbVZ6YjJ4MlpWTnNiM1J6S0dOb2FXeGtjbVZ1TENCd1lYSmxiblFwT3lCOU8xeHVYRzRnSUM4dklHVnVjM1Z5WlNCMGFHVWdZM0psWVhSbFJXeGxiV1Z1ZENCbWRXNWpkR2x2YmlCcGJpQm1kVzVqZEdsdmJtRnNJR052YlhCdmJtVnVkSE5jYmlBZ0x5OGdaMlYwY3lCaElIVnVhWEYxWlNCamIyNTBaWGgwSUMwZ2RHaHBjeUJwY3lCdVpXTmxjM05oY25rZ1ptOXlJR052Y25KbFkzUWdibUZ0WldRZ2MyeHZkQ0JqYUdWamExeHVJQ0IyWVhJZ1kyOXVkR1Y0ZEZadElEMGdUMkpxWldOMExtTnlaV0YwWlNod1lYSmxiblFwTzF4dUlDQjJZWElnYVhORGIyMXdhV3hsWkNBOUlHbHpWSEoxWlNodmNIUnBiMjV6TGw5amIyMXdhV3hsWkNrN1hHNGdJSFpoY2lCdVpXVmtUbTl5YldGc2FYcGhkR2x2YmlBOUlDRnBjME52YlhCcGJHVmtPMXh1WEc0Z0lDOHZJSE4xY0hCdmNuUWdabTl5SUdOdmJYQnBiR1ZrSUdaMWJtTjBhVzl1WVd3Z2RHVnRjR3hoZEdWY2JpQWdhV1lnS0dselEyOXRjR2xzWldRcElIdGNiaUFnSUNBdkx5QmxlSEJ2YzJsdVp5QWtiM0IwYVc5dWN5Qm1iM0lnY21WdVpHVnlVM1JoZEdsaktDbGNiaUFnSUNCMGFHbHpMaVJ2Y0hScGIyNXpJRDBnYjNCMGFXOXVjenRjYmlBZ0lDQXZMeUJ3Y21VdGNtVnpiMngyWlNCemJHOTBjeUJtYjNJZ2NtVnVaR1Z5VTJ4dmRDZ3BYRzRnSUNBZ2RHaHBjeTRrYzJ4dmRITWdQU0IwYUdsekxuTnNiM1J6S0NrN1hHNGdJQ0FnZEdocGN5NGtjMk52Y0dWa1UyeHZkSE1nUFNCa1lYUmhMbk5qYjNCbFpGTnNiM1J6SUh4OElHVnRjSFI1VDJKcVpXTjBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHOXdkR2x2Ym5NdVgzTmpiM0JsU1dRcElIdGNiaUFnSUNCMGFHbHpMbDlqSUQwZ1puVnVZM1JwYjI0Z0tHRXNJR0lzSUdNc0lHUXBJSHRjYmlBZ0lDQWdJSFpoY2lCMmJtOWtaU0E5SUdOeVpXRjBaVVZzWlcxbGJuUW9ZMjl1ZEdWNGRGWnRMQ0JoTENCaUxDQmpMQ0JrTENCdVpXVmtUbTl5YldGc2FYcGhkR2x2YmlrN1hHNGdJQ0FnSUNCcFppQW9kbTV2WkdVcElIdGNiaUFnSUNBZ0lDQWdkbTV2WkdVdVptNVRZMjl3WlVsa0lEMGdiM0IwYVc5dWN5NWZjMk52Y0dWSlpEdGNiaUFnSUNBZ0lDQWdkbTV2WkdVdVptNURiMjUwWlhoMElEMGdjR0Z5Wlc1ME8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhadWIyUmxYRzRnSUNBZ2ZUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjBhR2x6TGw5aklEMGdablZ1WTNScGIyNGdLR0VzSUdJc0lHTXNJR1FwSUhzZ2NtVjBkWEp1SUdOeVpXRjBaVVZzWlcxbGJuUW9ZMjl1ZEdWNGRGWnRMQ0JoTENCaUxDQmpMQ0JrTENCdVpXVmtUbTl5YldGc2FYcGhkR2x2YmlrN0lIMDdYRzRnSUgxY2JuMWNibHh1YVc1emRHRnNiRkpsYm1SbGNraGxiSEJsY25Nb1JuVnVZM1JwYjI1aGJGSmxibVJsY2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsS1R0Y2JseHVablZ1WTNScGIyNGdZM0psWVhSbFJuVnVZM1JwYjI1aGJFTnZiWEJ2Ym1WdWRDQW9YRzRnSUVOMGIzSXNYRzRnSUhCeWIzQnpSR0YwWVN4Y2JpQWdaR0YwWVN4Y2JpQWdZMjl1ZEdWNGRGWnRMRnh1SUNCamFHbHNaSEpsYmx4dUtTQjdYRzRnSUhaaGNpQnZjSFJwYjI1eklEMGdRM1J2Y2k1dmNIUnBiMjV6TzF4dUlDQjJZWElnY0hKdmNITWdQU0I3ZlR0Y2JpQWdkbUZ5SUhCeWIzQlBjSFJwYjI1eklEMGdiM0IwYVc5dWN5NXdjbTl3Y3p0Y2JpQWdhV1lnS0dselJHVm1LSEJ5YjNCUGNIUnBiMjV6S1NrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ3Y205d1QzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ2NISnZjSE5iYTJWNVhTQTlJSFpoYkdsa1lYUmxVSEp2Y0NoclpYa3NJSEJ5YjNCUGNIUnBiMjV6TENCd2NtOXdjMFJoZEdFZ2ZId2daVzF3ZEhsUFltcGxZM1FwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JwWmlBb2FYTkVaV1lvWkdGMFlTNWhkSFJ5Y3lrcElIc2diV1Z5WjJWUWNtOXdjeWh3Y205d2N5d2daR0YwWVM1aGRIUnljeWs3SUgxY2JpQWdJQ0JwWmlBb2FYTkVaV1lvWkdGMFlTNXdjbTl3Y3lrcElIc2diV1Z5WjJWUWNtOXdjeWh3Y205d2N5d2daR0YwWVM1d2NtOXdjeWs3SUgxY2JpQWdmVnh1WEc0Z0lIWmhjaUJ5Wlc1a1pYSkRiMjUwWlhoMElEMGdibVYzSUVaMWJtTjBhVzl1WVd4U1pXNWtaWEpEYjI1MFpYaDBLRnh1SUNBZ0lHUmhkR0VzWEc0Z0lDQWdjSEp2Y0hNc1hHNGdJQ0FnWTJocGJHUnlaVzRzWEc0Z0lDQWdZMjl1ZEdWNGRGWnRMRnh1SUNBZ0lFTjBiM0pjYmlBZ0tUdGNibHh1SUNCMllYSWdkbTV2WkdVZ1BTQnZjSFJwYjI1ekxuSmxibVJsY2k1allXeHNLRzUxYkd3c0lISmxibVJsY2tOdmJuUmxlSFF1WDJNc0lISmxibVJsY2tOdmJuUmxlSFFwTzF4dVhHNGdJR2xtSUNoMmJtOWtaU0JwYm5OMFlXNWpaVzltSUZaT2IyUmxLU0I3WEc0Z0lDQWdkbTV2WkdVdVptNURiMjUwWlhoMElEMGdZMjl1ZEdWNGRGWnRPMXh1SUNBZ0lIWnViMlJsTG1adVQzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NN1hHNGdJQ0FnYVdZZ0tHUmhkR0V1YzJ4dmRDa2dlMXh1SUNBZ0lDQWdLSFp1YjJSbExtUmhkR0VnZkh3Z0tIWnViMlJsTG1SaGRHRWdQU0I3ZlNrcExuTnNiM1FnUFNCa1lYUmhMbk5zYjNRN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhadWIyUmxYRzU5WEc1Y2JtWjFibU4wYVc5dUlHMWxjbWRsVUhKdmNITWdLSFJ2TENCbWNtOXRLU0I3WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCbWNtOXRLU0I3WEc0Z0lDQWdkRzliWTJGdFpXeHBlbVVvYTJWNUtWMGdQU0JtY205dFcydGxlVjA3WEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JseHVYRzVjYmk4dklGSmxaMmx6ZEdWeUlIUm9aU0JqYjIxd2IyNWxiblFnYUc5dmF5QjBieUIzWldWNElHNWhkR2wyWlNCeVpXNWtaWElnWlc1bmFXNWxMbHh1THk4Z1ZHaGxJR2h2YjJzZ2QybHNiQ0JpWlNCMGNtbG5aMlZ5WldRZ1lua2dibUYwYVhabExDQnViM1FnYW1GMllYTmpjbWx3ZEM1Y2JseHVYRzR2THlCVmNHUmhkR1Z6SUhSb1pTQnpkR0YwWlNCdlppQjBhR1VnWTI5dGNHOXVaVzUwSUhSdklIZGxaWGdnYm1GMGFYWmxJSEpsYm1SbGNpQmxibWRwYm1VdVhHNWNiaThxSUNBcUwxeHVYRzR2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlNHRnVhM014TURFd01DOTNaV1Y0TFc1aGRHbDJaUzFrYVhKbFkzUnBkbVV2ZEhKbFpTOXRZWE4wWlhJdlkyOXRjRzl1Wlc1MFhHNWNiaTh2SUd4cGMzUmxibWx1WnlCdmJpQnVZWFJwZG1VZ1kyRnNiR0poWTJ0Y2JseHVMeW9nSUNvdlhHNWNiaThxSUNBcUwxeHVYRzR2THlCb2IyOXJjeUIwYnlCaVpTQnBiblp2YTJWa0lHOXVJR052YlhCdmJtVnVkQ0JXVG05a1pYTWdaSFZ5YVc1bklIQmhkR05vWEc1MllYSWdZMjl0Y0c5dVpXNTBWazV2WkdWSWIyOXJjeUE5SUh0Y2JpQWdhVzVwZERvZ1puVnVZM1JwYjI0Z2FXNXBkQ0FvWEc0Z0lDQWdkbTV2WkdVc1hHNGdJQ0FnYUhsa2NtRjBhVzVuTEZ4dUlDQWdJSEJoY21WdWRFVnNiU3hjYmlBZ0lDQnlaV1pGYkcxY2JpQWdLU0I3WEc0Z0lDQWdhV1lnS0NGMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaU0I4ZkNCMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaUzVmYVhORVpYTjBjbTk1WldRcElIdGNiaUFnSUNBZ0lIWmhjaUJqYUdsc1pDQTlJSFp1YjJSbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElEMGdZM0psWVhSbFEyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJWR2IzSldibTlrWlNoY2JpQWdJQ0FnSUNBZ2RtNXZaR1VzWEc0Z0lDQWdJQ0FnSUdGamRHbDJaVWx1YzNSaGJtTmxMRnh1SUNBZ0lDQWdJQ0J3WVhKbGJuUkZiRzBzWEc0Z0lDQWdJQ0FnSUhKbFprVnNiVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQWdJR05vYVd4a0xpUnRiM1Z1ZENob2VXUnlZWFJwYm1jZ1B5QjJibTlrWlM1bGJHMGdPaUIxYm1SbFptbHVaV1FzSUdoNVpISmhkR2x1WnlrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMmJtOWtaUzVrWVhSaExtdGxaWEJCYkdsMlpTa2dlMXh1SUNBZ0lDQWdMeThnYTJWd2RDMWhiR2wyWlNCamIyMXdiMjVsYm5SekxDQjBjbVZoZENCaGN5QmhJSEJoZEdOb1hHNGdJQ0FnSUNCMllYSWdiVzkxYm5SbFpFNXZaR1VnUFNCMmJtOWtaVHNnTHk4Z2QyOXlheUJoY205MWJtUWdabXh2ZDF4dUlDQWdJQ0FnWTI5dGNHOXVaVzUwVms1dlpHVkliMjlyY3k1d2NtVndZWFJqYUNodGIzVnVkR1ZrVG05a1pTd2diVzkxYm5SbFpFNXZaR1VwTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCd2NtVndZWFJqYURvZ1puVnVZM1JwYjI0Z2NISmxjR0YwWTJnZ0tHOXNaRlp1YjJSbExDQjJibTlrWlNrZ2UxeHVJQ0FnSUhaaGNpQnZjSFJwYjI1eklEMGdkbTV2WkdVdVkyOXRjRzl1Wlc1MFQzQjBhVzl1Y3p0Y2JpQWdJQ0IyWVhJZ1kyaHBiR1FnUFNCMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaU0E5SUc5c1pGWnViMlJsTG1OdmJYQnZibVZ1ZEVsdWMzUmhibU5sTzF4dUlDQWdJSFZ3WkdGMFpVTm9hV3hrUTI5dGNHOXVaVzUwS0Z4dUlDQWdJQ0FnWTJocGJHUXNYRzRnSUNBZ0lDQnZjSFJwYjI1ekxuQnliM0J6UkdGMFlTd2dMeThnZFhCa1lYUmxaQ0J3Y205d2MxeHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1c2FYTjBaVzVsY25Nc0lDOHZJSFZ3WkdGMFpXUWdiR2x6ZEdWdVpYSnpYRzRnSUNBZ0lDQjJibTlrWlN3Z0x5OGdibVYzSUhCaGNtVnVkQ0IyYm05a1pWeHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1amFHbHNaSEpsYmlBdkx5QnVaWGNnWTJocGJHUnlaVzVjYmlBZ0lDQXBPMXh1SUNCOUxGeHVYRzRnSUdsdWMyVnlkRG9nWm5WdVkzUnBiMjRnYVc1elpYSjBJQ2gyYm05a1pTa2dlMXh1SUNBZ0lIWmhjaUJqYjI1MFpYaDBJRDBnZG01dlpHVXVZMjl1ZEdWNGREdGNiaUFnSUNCMllYSWdZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVWdQU0IyYm05a1pTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpUdGNiaUFnSUNCcFppQW9JV052YlhCdmJtVnVkRWx1YzNSaGJtTmxMbDlwYzAxdmRXNTBaV1FwSUh0Y2JpQWdJQ0FnSUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTGw5cGMwMXZkVzUwWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnWTJGc2JFaHZiMnNvWTI5dGNHOXVaVzUwU1c1emRHRnVZMlVzSUNkdGIzVnVkR1ZrSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMmJtOWtaUzVrWVhSaExtdGxaWEJCYkdsMlpTa2dlMXh1SUNBZ0lDQWdhV1lnS0dOdmJuUmxlSFF1WDJselRXOTFiblJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIyZFdVdGNtOTFkR1Z5SXpFeU1USmNiaUFnSUNBZ0lDQWdMeThnUkhWeWFXNW5JSFZ3WkdGMFpYTXNJR0VnYTJWd2RDMWhiR2wyWlNCamIyMXdiMjVsYm5RbmN5QmphR2xzWkNCamIyMXdiMjVsYm5SeklHMWhlVnh1SUNBZ0lDQWdJQ0F2THlCamFHRnVaMlVzSUhOdklHUnBjbVZqZEd4NUlIZGhiR3RwYm1jZ2RHaGxJSFJ5WldVZ2FHVnlaU0J0WVhrZ1kyRnNiQ0JoWTNScGRtRjBaV1FnYUc5dmEzTmNiaUFnSUNBZ0lDQWdMeThnYjI0Z2FXNWpiM0p5WldOMElHTm9hV3hrY21WdUxpQkpibk4wWldGa0lIZGxJSEIxYzJnZ2RHaGxiU0JwYm5SdklHRWdjWFZsZFdVZ2QyaHBZMmdnZDJsc2JGeHVJQ0FnSUNBZ0lDQXZMeUJpWlNCd2NtOWpaWE56WldRZ1lXWjBaWElnZEdobElIZG9iMnhsSUhCaGRHTm9JSEJ5YjJObGMzTWdaVzVrWldRdVhHNGdJQ0FnSUNBZ0lIRjFaWFZsUVdOMGFYWmhkR1ZrUTI5dGNHOXVaVzUwS0dOdmJYQnZibVZ1ZEVsdWMzUmhibU5sS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdGamRHbDJZWFJsUTJocGJHUkRiMjF3YjI1bGJuUW9ZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVXNJSFJ5ZFdVZ0x5b2daR2x5WldOMElDb3ZLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnWkdWemRISnZlVG9nWm5WdVkzUnBiMjRnWkdWemRISnZlU0FvZG01dlpHVXBJSHRjYmlBZ0lDQjJZWElnWTI5dGNHOXVaVzUwU1c1emRHRnVZMlVnUFNCMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaVHRjYmlBZ0lDQnBaaUFvSVdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTGw5cGMwUmxjM1J5YjNsbFpDa2dlMXh1SUNBZ0lDQWdhV1lnS0NGMmJtOWtaUzVrWVhSaExtdGxaWEJCYkdsMlpTa2dlMXh1SUNBZ0lDQWdJQ0JqYjIxd2IyNWxiblJKYm5OMFlXNWpaUzRrWkdWemRISnZlU2dwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWkdWaFkzUnBkbUYwWlVOb2FXeGtRMjl0Y0c5dVpXNTBLR052YlhCdmJtVnVkRWx1YzNSaGJtTmxMQ0IwY25WbElDOHFJR1JwY21WamRDQXFMeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNTlPMXh1WEc1MllYSWdhRzl2YTNOVWIwMWxjbWRsSUQwZ1QySnFaV04wTG10bGVYTW9ZMjl0Y0c5dVpXNTBWazV2WkdWSWIyOXJjeWs3WEc1Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlVOdmJYQnZibVZ1ZENBb1hHNGdJRU4wYjNJc1hHNGdJR1JoZEdFc1hHNGdJR052Ym5SbGVIUXNYRzRnSUdOb2FXeGtjbVZ1TEZ4dUlDQjBZV2RjYmlrZ2UxeHVJQ0JwWmlBb2FYTlZibVJsWmloRGRHOXlLU2tnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc1Y2JpQWdkbUZ5SUdKaGMyVkRkRzl5SUQwZ1kyOXVkR1Y0ZEM0a2IzQjBhVzl1Y3k1ZlltRnpaVHRjYmx4dUlDQXZMeUJ3YkdGcGJpQnZjSFJwYjI1eklHOWlhbVZqZERvZ2RIVnliaUJwZENCcGJuUnZJR0VnWTI5dWMzUnlkV04wYjNKY2JpQWdhV1lnS0dselQySnFaV04wS0VOMGIzSXBLU0I3WEc0Z0lDQWdRM1J2Y2lBOUlHSmhjMlZEZEc5eUxtVjRkR1Z1WkNoRGRHOXlLVHRjYmlBZ2ZWeHVYRzRnSUM4dklHbG1JR0YwSUhSb2FYTWdjM1JoWjJVZ2FYUW5jeUJ1YjNRZ1lTQmpiMjV6ZEhKMVkzUnZjaUJ2Y2lCaGJpQmhjM2x1WXlCamIyMXdiMjVsYm5RZ1ptRmpkRzl5ZVN4Y2JpQWdMeThnY21WcVpXTjBMbHh1SUNCcFppQW9kSGx3Wlc5bUlFTjBiM0lnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2QyRnliaWdvWENKSmJuWmhiR2xrSUVOdmJYQnZibVZ1ZENCa1pXWnBibWwwYVc5dU9pQmNJaUFySUNoVGRISnBibWNvUTNSdmNpa3BLU3dnWTI5dWRHVjRkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzVjYmlBZ0x5OGdZWE41Ym1NZ1kyOXRjRzl1Wlc1MFhHNGdJSFpoY2lCaGMzbHVZMFpoWTNSdmNuazdYRzRnSUdsbUlDaHBjMVZ1WkdWbUtFTjBiM0l1WTJsa0tTa2dlMXh1SUNBZ0lHRnplVzVqUm1GamRHOXllU0E5SUVOMGIzSTdYRzRnSUNBZ1EzUnZjaUE5SUhKbGMyOXNkbVZCYzNsdVkwTnZiWEJ2Ym1WdWRDaGhjM2x1WTBaaFkzUnZjbmtzSUdKaGMyVkRkRzl5TENCamIyNTBaWGgwS1R0Y2JpQWdJQ0JwWmlBb1EzUnZjaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQXZMeUJ5WlhSMWNtNGdZU0J3YkdGalpXaHZiR1JsY2lCdWIyUmxJR1p2Y2lCaGMzbHVZeUJqYjIxd2IyNWxiblFzSUhkb2FXTm9JR2x6SUhKbGJtUmxjbVZrWEc0Z0lDQWdJQ0F2THlCaGN5QmhJR052YlcxbGJuUWdibTlrWlNCaWRYUWdjSEpsYzJWeWRtVnpJR0ZzYkNCMGFHVWdjbUYzSUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ2JtOWtaUzVjYmlBZ0lDQWdJQzh2SUhSb1pTQnBibVp2Y20xaGRHbHZiaUIzYVd4c0lHSmxJSFZ6WldRZ1ptOXlJR0Z6ZVc1aklITmxjblpsY2kxeVpXNWtaWEpwYm1jZ1lXNWtJR2g1WkhKaGRHbHZiaTVjYmlBZ0lDQWdJSEpsZEhWeWJpQmpjbVZoZEdWQmMzbHVZMUJzWVdObGFHOXNaR1Z5S0Z4dUlDQWdJQ0FnSUNCaGMzbHVZMFpoWTNSdmNua3NYRzRnSUNBZ0lDQWdJR1JoZEdFc1hHNGdJQ0FnSUNBZ0lHTnZiblJsZUhRc1hHNGdJQ0FnSUNBZ0lHTm9hV3hrY21WdUxGeHVJQ0FnSUNBZ0lDQjBZV2RjYmlBZ0lDQWdJQ2xjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JrWVhSaElEMGdaR0YwWVNCOGZDQjdmVHRjYmx4dUlDQXZMeUJ5WlhOdmJIWmxJR052Ym5OMGNuVmpkRzl5SUc5d2RHbHZibk1nYVc0Z1kyRnpaU0JuYkc5aVlXd2diV2w0YVc1eklHRnlaU0JoY0hCc2FXVmtJR0ZtZEdWeVhHNGdJQzh2SUdOdmJYQnZibVZ1ZENCamIyNXpkSEoxWTNSdmNpQmpjbVZoZEdsdmJseHVJQ0J5WlhOdmJIWmxRMjl1YzNSeWRXTjBiM0pQY0hScGIyNXpLRU4wYjNJcE8xeHVYRzRnSUM4dklIUnlZVzV6Wm05eWJTQmpiMjF3YjI1bGJuUWdkaTF0YjJSbGJDQmtZWFJoSUdsdWRHOGdjSEp2Y0hNZ0ppQmxkbVZ1ZEhOY2JpQWdhV1lnS0dselJHVm1LR1JoZEdFdWJXOWtaV3dwS1NCN1hHNGdJQ0FnZEhKaGJuTm1iM0p0VFc5a1pXd29RM1J2Y2k1dmNIUnBiMjV6TENCa1lYUmhLVHRjYmlBZ2ZWeHVYRzRnSUM4dklHVjRkSEpoWTNRZ2NISnZjSE5jYmlBZ2RtRnlJSEJ5YjNCelJHRjBZU0E5SUdWNGRISmhZM1JRY205d2MwWnliMjFXVG05a1pVUmhkR0VvWkdGMFlTd2dRM1J2Y2l3Z2RHRm5LVHRjYmx4dUlDQXZMeUJtZFc1amRHbHZibUZzSUdOdmJYQnZibVZ1ZEZ4dUlDQnBaaUFvYVhOVWNuVmxLRU4wYjNJdWIzQjBhVzl1Y3k1bWRXNWpkR2x2Ym1Gc0tTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZHZFc1amRHbHZibUZzUTI5dGNHOXVaVzUwS0VOMGIzSXNJSEJ5YjNCelJHRjBZU3dnWkdGMFlTd2dZMjl1ZEdWNGRDd2dZMmhwYkdSeVpXNHBYRzRnSUgxY2JseHVJQ0F2THlCbGVIUnlZV04wSUd4cGMzUmxibVZ5Y3l3Z2MybHVZMlVnZEdobGMyVWdibVZsWkhNZ2RHOGdZbVVnZEhKbFlYUmxaQ0JoYzF4dUlDQXZMeUJqYUdsc1pDQmpiMjF3YjI1bGJuUWdiR2x6ZEdWdVpYSnpJR2x1YzNSbFlXUWdiMllnUkU5TklHeHBjM1JsYm1WeWMxeHVJQ0IyWVhJZ2JHbHpkR1Z1WlhKeklEMGdaR0YwWVM1dmJqdGNiaUFnTHk4Z2NtVndiR0ZqWlNCM2FYUm9JR3hwYzNSbGJtVnljeUIzYVhSb0lDNXVZWFJwZG1VZ2JXOWthV1pwWlhKY2JpQWdMeThnYzI4Z2FYUWdaMlYwY3lCd2NtOWpaWE56WldRZ1pIVnlhVzVuSUhCaGNtVnVkQ0JqYjIxd2IyNWxiblFnY0dGMFkyZ3VYRzRnSUdSaGRHRXViMjRnUFNCa1lYUmhMbTVoZEdsMlpVOXVPMXh1WEc0Z0lHbG1JQ2hwYzFSeWRXVW9RM1J2Y2k1dmNIUnBiMjV6TG1GaWMzUnlZV04wS1NrZ2UxeHVJQ0FnSUM4dklHRmljM1J5WVdOMElHTnZiWEJ2Ym1WdWRITWdaRzhnYm05MElHdGxaWEFnWVc1NWRHaHBibWRjYmlBZ0lDQXZMeUJ2ZEdobGNpQjBhR0Z1SUhCeWIzQnpJQ1lnYkdsemRHVnVaWEp6SUNZZ2MyeHZkRnh1WEc0Z0lDQWdMeThnZDI5eWF5QmhjbTkxYm1RZ1pteHZkMXh1SUNBZ0lIWmhjaUJ6Ykc5MElEMGdaR0YwWVM1emJHOTBPMXh1SUNBZ0lHUmhkR0VnUFNCN2ZUdGNiaUFnSUNCcFppQW9jMnh2ZENrZ2UxeHVJQ0FnSUNBZ1pHRjBZUzV6Ykc5MElEMGdjMnh2ZER0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QnRaWEpuWlNCamIyMXdiMjVsYm5RZ2JXRnVZV2RsYldWdWRDQm9iMjlyY3lCdmJuUnZJSFJvWlNCd2JHRmpaV2h2YkdSbGNpQnViMlJsWEc0Z0lHMWxjbWRsU0c5dmEzTW9aR0YwWVNrN1hHNWNiaUFnTHk4Z2NtVjBkWEp1SUdFZ2NHeGhZMlZvYjJ4a1pYSWdkbTV2WkdWY2JpQWdkbUZ5SUc1aGJXVWdQU0JEZEc5eUxtOXdkR2x2Ym5NdWJtRnRaU0I4ZkNCMFlXYzdYRzRnSUhaaGNpQjJibTlrWlNBOUlHNWxkeUJXVG05a1pTaGNiaUFnSUNBb1hDSjJkV1V0WTI5dGNHOXVaVzUwTFZ3aUlDc2dLRU4wYjNJdVkybGtLU0FySUNodVlXMWxJRDhnS0Z3aUxWd2lJQ3NnYm1GdFpTa2dPaUFuSnlrcExGeHVJQ0FnSUdSaGRHRXNJSFZ1WkdWbWFXNWxaQ3dnZFc1a1pXWnBibVZrTENCMWJtUmxabWx1WldRc0lHTnZiblJsZUhRc1hHNGdJQ0FnZXlCRGRHOXlPaUJEZEc5eUxDQndjbTl3YzBSaGRHRTZJSEJ5YjNCelJHRjBZU3dnYkdsemRHVnVaWEp6T2lCc2FYTjBaVzVsY25Nc0lIUmhaem9nZEdGbkxDQmphR2xzWkhKbGJqb2dZMmhwYkdSeVpXNGdmU3hjYmlBZ0lDQmhjM2x1WTBaaFkzUnZjbmxjYmlBZ0tUdGNibHh1SUNBdkx5QlhaV1Y0SUhOd1pXTnBabWxqT2lCcGJuWnZhMlVnY21WamVXTnNaUzFzYVhOMElHOXdkR2x0YVhwbFpDQkFjbVZ1WkdWeUlHWjFibU4wYVc5dUlHWnZjbHh1SUNBdkx5QmxlSFJ5WVdOMGFXNW5JR05sYkd3dGMyeHZkQ0IwWlcxd2JHRjBaUzVjYmlBZ0x5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMGhoYm10ek1UQXhNREF2ZDJWbGVDMXVZWFJwZG1VdFpHbHlaV04wYVhabEwzUnlaV1V2YldGemRHVnlMMk52YlhCdmJtVnVkRnh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2NtVjBkWEp1SUhadWIyUmxYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlVOdmJYQnZibVZ1ZEVsdWMzUmhibU5sUm05eVZtNXZaR1VnS0Z4dUlDQjJibTlrWlN3Z0x5OGdkMlVnYTI1dmR5QnBkQ2R6SUUxdmRXNTBaV1JEYjIxd2IyNWxiblJXVG05a1pTQmlkWFFnWm14dmR5QmtiMlZ6YmlkMFhHNGdJSEJoY21WdWRDd2dMeThnWVdOMGFYWmxTVzV6ZEdGdVkyVWdhVzRnYkdsbVpXTjVZMnhsSUhOMFlYUmxYRzRnSUhCaGNtVnVkRVZzYlN4Y2JpQWdjbVZtUld4dFhHNHBJSHRjYmlBZ2RtRnlJRzl3ZEdsdmJuTWdQU0I3WEc0Z0lDQWdYMmx6UTI5dGNHOXVaVzUwT2lCMGNuVmxMRnh1SUNBZ0lIQmhjbVZ1ZERvZ2NHRnlaVzUwTEZ4dUlDQWdJRjl3WVhKbGJuUldibTlrWlRvZ2RtNXZaR1VzWEc0Z0lDQWdYM0JoY21WdWRFVnNiVG9nY0dGeVpXNTBSV3h0SUh4OElHNTFiR3dzWEc0Z0lDQWdYM0psWmtWc2JUb2djbVZtUld4dElIeDhJRzUxYkd4Y2JpQWdmVHRjYmlBZ0x5OGdZMmhsWTJzZ2FXNXNhVzVsTFhSbGJYQnNZWFJsSUhKbGJtUmxjaUJtZFc1amRHbHZibk5jYmlBZ2RtRnlJR2x1YkdsdVpWUmxiWEJzWVhSbElEMGdkbTV2WkdVdVpHRjBZUzVwYm14cGJtVlVaVzF3YkdGMFpUdGNiaUFnYVdZZ0tHbHpSR1ZtS0dsdWJHbHVaVlJsYlhCc1lYUmxLU2tnZTF4dUlDQWdJRzl3ZEdsdmJuTXVjbVZ1WkdWeUlEMGdhVzVzYVc1bFZHVnRjR3hoZEdVdWNtVnVaR1Z5TzF4dUlDQWdJRzl3ZEdsdmJuTXVjM1JoZEdsalVtVnVaR1Z5Um01eklEMGdhVzVzYVc1bFZHVnRjR3hoZEdVdWMzUmhkR2xqVW1WdVpHVnlSbTV6TzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ1WlhjZ2RtNXZaR1V1WTI5dGNHOXVaVzUwVDNCMGFXOXVjeTVEZEc5eUtHOXdkR2x2Ym5NcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUcxbGNtZGxTRzl2YTNNZ0tHUmhkR0VwSUh0Y2JpQWdhV1lnS0NGa1lYUmhMbWh2YjJzcElIdGNiaUFnSUNCa1lYUmhMbWh2YjJzZ1BTQjdmVHRjYmlBZ2ZWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdodmIydHpWRzlOWlhKblpTNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCclpYa2dQU0JvYjI5cmMxUnZUV1Z5WjJWYmFWMDdYRzRnSUNBZ2RtRnlJR1p5YjIxUVlYSmxiblFnUFNCa1lYUmhMbWh2YjJ0YmEyVjVYVHRjYmlBZ0lDQjJZWElnYjNWeWN5QTlJR052YlhCdmJtVnVkRlpPYjJSbFNHOXZhM05iYTJWNVhUdGNiaUFnSUNCa1lYUmhMbWh2YjJ0YmEyVjVYU0E5SUdaeWIyMVFZWEpsYm5RZ1B5QnRaWEpuWlVodmIyc2tNU2h2ZFhKekxDQm1jbTl0VUdGeVpXNTBLU0E2SUc5MWNuTTdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYldWeVoyVkliMjlySkRFZ0tHOXVaU3dnZEhkdktTQjdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvWVN3Z1lpd2dZeXdnWkNrZ2UxeHVJQ0FnSUc5dVpTaGhMQ0JpTENCakxDQmtLVHRjYmlBZ0lDQjBkMjhvWVN3Z1lpd2dZeXdnWkNrN1hHNGdJSDFjYm4xY2JseHVMeThnZEhKaGJuTm1iM0p0SUdOdmJYQnZibVZ1ZENCMkxXMXZaR1ZzSUdsdVptOGdLSFpoYkhWbElHRnVaQ0JqWVd4c1ltRmpheWtnYVc1MGIxeHVMeThnY0hKdmNDQmhibVFnWlhabGJuUWdhR0Z1Wkd4bGNpQnlaWE53WldOMGFYWmxiSGt1WEc1bWRXNWpkR2x2YmlCMGNtRnVjMlp2Y20xTmIyUmxiQ0FvYjNCMGFXOXVjeXdnWkdGMFlTa2dlMXh1SUNCMllYSWdjSEp2Y0NBOUlDaHZjSFJwYjI1ekxtMXZaR1ZzSUNZbUlHOXdkR2x2Ym5NdWJXOWtaV3d1Y0hKdmNDa2dmSHdnSjNaaGJIVmxKenRjYmlBZ2RtRnlJR1YyWlc1MElEMGdLRzl3ZEdsdmJuTXViVzlrWld3Z0ppWWdiM0IwYVc5dWN5NXRiMlJsYkM1bGRtVnVkQ2tnZkh3Z0oybHVjSFYwSnpzb1pHRjBZUzV3Y205d2N5QjhmQ0FvWkdGMFlTNXdjbTl3Y3lBOUlIdDlLU2xiY0hKdmNGMGdQU0JrWVhSaExtMXZaR1ZzTG5aaGJIVmxPMXh1SUNCMllYSWdiMjRnUFNCa1lYUmhMbTl1SUh4OElDaGtZWFJoTG05dUlEMGdlMzBwTzF4dUlDQnBaaUFvYVhORVpXWW9iMjViWlhabGJuUmRLU2tnZTF4dUlDQWdJRzl1VzJWMlpXNTBYU0E5SUZ0a1lYUmhMbTF2WkdWc0xtTmhiR3hpWVdOclhTNWpiMjVqWVhRb2IyNWJaWFpsYm5SZEtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnZibHRsZG1WdWRGMGdQU0JrWVhSaExtMXZaR1ZzTG1OaGJHeGlZV05yTzF4dUlDQjlYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNTJZWElnVTBsTlVFeEZYMDVQVWsxQlRFbGFSU0E5SURFN1hHNTJZWElnUVV4WFFWbFRYMDVQVWsxQlRFbGFSU0E5SURJN1hHNWNiaTh2SUhkeVlYQndaWElnWm5WdVkzUnBiMjRnWm05eUlIQnliM1pwWkdsdVp5QmhJRzF2Y21VZ1pteGxlR2xpYkdVZ2FXNTBaWEptWVdObFhHNHZMeUIzYVhSb2IzVjBJR2RsZEhScGJtY2dlV1ZzYkdWa0lHRjBJR0o1SUdac2IzZGNibVoxYm1OMGFXOXVJR055WldGMFpVVnNaVzFsYm5RZ0tGeHVJQ0JqYjI1MFpYaDBMRnh1SUNCMFlXY3NYRzRnSUdSaGRHRXNYRzRnSUdOb2FXeGtjbVZ1TEZ4dUlDQnViM0p0WVd4cGVtRjBhVzl1Vkhsd1pTeGNiaUFnWVd4M1lYbHpUbTl5YldGc2FYcGxYRzRwSUh0Y2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aR0YwWVNrZ2ZId2dhWE5RY21sdGFYUnBkbVVvWkdGMFlTa3BJSHRjYmlBZ0lDQnViM0p0WVd4cGVtRjBhVzl1Vkhsd1pTQTlJR05vYVd4a2NtVnVPMXh1SUNBZ0lHTm9hV3hrY21WdUlEMGdaR0YwWVR0Y2JpQWdJQ0JrWVhSaElEMGdkVzVrWldacGJtVmtPMXh1SUNCOVhHNGdJR2xtSUNocGMxUnlkV1VvWVd4M1lYbHpUbTl5YldGc2FYcGxLU2tnZTF4dUlDQWdJRzV2Y20xaGJHbDZZWFJwYjI1VWVYQmxJRDBnUVV4WFFWbFRYMDVQVWsxQlRFbGFSVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdYMk55WldGMFpVVnNaVzFsYm5Rb1kyOXVkR1Y0ZEN3Z2RHRm5MQ0JrWVhSaExDQmphR2xzWkhKbGJpd2dibTl5YldGc2FYcGhkR2x2YmxSNWNHVXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOWpjbVZoZEdWRmJHVnRaVzUwSUNoY2JpQWdZMjl1ZEdWNGRDeGNiaUFnZEdGbkxGeHVJQ0JrWVhSaExGeHVJQ0JqYUdsc1pISmxiaXhjYmlBZ2JtOXliV0ZzYVhwaGRHbHZibFI1Y0dWY2Jpa2dlMXh1SUNCcFppQW9hWE5FWldZb1pHRjBZU2tnSmlZZ2FYTkVaV1lvS0dSaGRHRXBMbDlmYjJKZlh5a3BJSHRjYmlBZ0lDQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltSUhkaGNtNG9YRzRnSUNBZ0lDQmNJa0YyYjJsa0lIVnphVzVuSUc5aWMyVnlkbVZrSUdSaGRHRWdiMkpxWldOMElHRnpJSFp1YjJSbElHUmhkR0U2SUZ3aUlDc2dLRXBUVDA0dWMzUnlhVzVuYVdaNUtHUmhkR0VwS1NBcklGd2lYRnh1WENJZ0sxeHVJQ0FnSUNBZ0owRnNkMkY1Y3lCamNtVmhkR1VnWm5KbGMyZ2dkbTV2WkdVZ1pHRjBZU0J2WW1wbFkzUnpJR2x1SUdWaFkyZ2djbVZ1WkdWeUlTY3NYRzRnSUNBZ0lDQmpiMjUwWlhoMFhHNGdJQ0FnS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFJXMXdkSGxXVG05a1pTZ3BYRzRnSUgxY2JpQWdMeThnYjJKcVpXTjBJSE41Ym5SaGVDQnBiaUIyTFdKcGJtUmNiaUFnYVdZZ0tHbHpSR1ZtS0dSaGRHRXBJQ1ltSUdselJHVm1LR1JoZEdFdWFYTXBLU0I3WEc0Z0lDQWdkR0ZuSUQwZ1pHRjBZUzVwY3p0Y2JpQWdmVnh1SUNCcFppQW9JWFJoWnlrZ2UxeHVJQ0FnSUM4dklHbHVJR05oYzJVZ2IyWWdZMjl0Y0c5dVpXNTBJRHBwY3lCelpYUWdkRzhnWm1Gc2Mza2dkbUZzZFdWY2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFJXMXdkSGxXVG05a1pTZ3BYRzRnSUgxY2JpQWdMeThnZDJGeWJpQmhaMkZwYm5OMElHNXZiaTF3Y21sdGFYUnBkbVVnYTJWNVhHNGdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklDWW1YRzRnSUNBZ2FYTkVaV1lvWkdGMFlTa2dKaVlnYVhORVpXWW9aR0YwWVM1clpYa3BJQ1ltSUNGcGMxQnlhVzFwZEdsMlpTaGtZWFJoTG10bGVTbGNiaUFnS1NCN1hHNGdJQ0FnZTF4dUlDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdKMEYyYjJsa0lIVnphVzVuSUc1dmJpMXdjbWx0YVhScGRtVWdkbUZzZFdVZ1lYTWdhMlY1TENBbklDdGNiaUFnSUNBZ0lDQWdKM1Z6WlNCemRISnBibWN2Ym5WdFltVnlJSFpoYkhWbElHbHVjM1JsWVdRdUp5eGNiaUFnSUNBZ0lDQWdZMjl1ZEdWNGRGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ0x5OGdjM1Z3Y0c5eWRDQnphVzVuYkdVZ1puVnVZM1JwYjI0Z1kyaHBiR1J5Wlc0Z1lYTWdaR1ZtWVhWc2RDQnpZMjl3WldRZ2MyeHZkRnh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoamFHbHNaSEpsYmlrZ0ppWmNiaUFnSUNCMGVYQmxiMllnWTJocGJHUnlaVzViTUYwZ1BUMDlJQ2RtZFc1amRHbHZiaWRjYmlBZ0tTQjdYRzRnSUNBZ1pHRjBZU0E5SUdSaGRHRWdmSHdnZTMwN1hHNGdJQ0FnWkdGMFlTNXpZMjl3WldSVGJHOTBjeUE5SUhzZ1pHVm1ZWFZzZERvZ1kyaHBiR1J5Wlc1Yk1GMGdmVHRjYmlBZ0lDQmphR2xzWkhKbGJpNXNaVzVuZEdnZ1BTQXdPMXh1SUNCOVhHNGdJR2xtSUNodWIzSnRZV3hwZW1GMGFXOXVWSGx3WlNBOVBUMGdRVXhYUVZsVFgwNVBVazFCVEVsYVJTa2dlMXh1SUNBZ0lHTm9hV3hrY21WdUlEMGdibTl5YldGc2FYcGxRMmhwYkdSeVpXNG9ZMmhwYkdSeVpXNHBPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHNXZjbTFoYkdsNllYUnBiMjVVZVhCbElEMDlQU0JUU1UxUVRFVmZUazlTVFVGTVNWcEZLU0I3WEc0Z0lDQWdZMmhwYkdSeVpXNGdQU0J6YVcxd2JHVk9iM0p0WVd4cGVtVkRhR2xzWkhKbGJpaGphR2xzWkhKbGJpazdYRzRnSUgxY2JpQWdkbUZ5SUhadWIyUmxMQ0J1Y3p0Y2JpQWdhV1lnS0hSNWNHVnZaaUIwWVdjZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdkbUZ5SUVOMGIzSTdYRzRnSUNBZ2JuTWdQU0FvWTI5dWRHVjRkQzRrZG01dlpHVWdKaVlnWTI5dWRHVjRkQzRrZG01dlpHVXVibk1wSUh4OElHTnZibVpwWnk1blpYUlVZV2RPWVcxbGMzQmhZMlVvZEdGbktUdGNiaUFnSUNCcFppQW9ZMjl1Wm1sbkxtbHpVbVZ6WlhKMlpXUlVZV2NvZEdGbktTa2dlMXh1SUNBZ0lDQWdMeThnY0d4aGRHWnZjbTBnWW5WcGJIUXRhVzRnWld4bGJXVnVkSE5jYmlBZ0lDQWdJSFp1YjJSbElEMGdibVYzSUZaT2IyUmxLRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXY3VjR0Z5YzJWUWJHRjBabTl5YlZSaFowNWhiV1VvZEdGbktTd2daR0YwWVN3Z1kyaHBiR1J5Wlc0c1hHNGdJQ0FnSUNBZ0lIVnVaR1ZtYVc1bFpDd2dkVzVrWldacGJtVmtMQ0JqYjI1MFpYaDBYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5FWldZb1EzUnZjaUE5SUhKbGMyOXNkbVZCYzNObGRDaGpiMjUwWlhoMExpUnZjSFJwYjI1ekxDQW5ZMjl0Y0c5dVpXNTBjeWNzSUhSaFp5a3BLU0I3WEc0Z0lDQWdJQ0F2THlCamIyMXdiMjVsYm5SY2JpQWdJQ0FnSUhadWIyUmxJRDBnWTNKbFlYUmxRMjl0Y0c5dVpXNTBLRU4wYjNJc0lHUmhkR0VzSUdOdmJuUmxlSFFzSUdOb2FXeGtjbVZ1TENCMFlXY3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QjFibXR1YjNkdUlHOXlJSFZ1YkdsemRHVmtJRzVoYldWemNHRmpaV1FnWld4bGJXVnVkSE5jYmlBZ0lDQWdJQzh2SUdOb1pXTnJJR0YwSUhKMWJuUnBiV1VnWW1WallYVnpaU0JwZENCdFlYa2daMlYwSUdGemMybG5ibVZrSUdFZ2JtRnRaWE53WVdObElIZG9aVzRnYVhSelhHNGdJQ0FnSUNBdkx5QndZWEpsYm5RZ2JtOXliV0ZzYVhwbGN5QmphR2xzWkhKbGJseHVJQ0FnSUNBZ2RtNXZaR1VnUFNCdVpYY2dWazV2WkdVb1hHNGdJQ0FnSUNBZ0lIUmhaeXdnWkdGMFlTd2dZMmhwYkdSeVpXNHNYRzRnSUNBZ0lDQWdJSFZ1WkdWbWFXNWxaQ3dnZFc1a1pXWnBibVZrTENCamIyNTBaWGgwWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2THlCa2FYSmxZM1FnWTI5dGNHOXVaVzUwSUc5d2RHbHZibk1nTHlCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUhadWIyUmxJRDBnWTNKbFlYUmxRMjl0Y0c5dVpXNTBLSFJoWnl3Z1pHRjBZU3dnWTI5dWRHVjRkQ3dnWTJocGJHUnlaVzRwTzF4dUlDQjlYRzRnSUdsbUlDaHBjMFJsWmloMmJtOWtaU2twSUh0Y2JpQWdJQ0JwWmlBb2JuTXBJSHNnWVhCd2JIbE9VeWgyYm05a1pTd2dibk1wT3lCOVhHNGdJQ0FnY21WMGRYSnVJSFp1YjJSbFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVVZ0Y0hSNVZrNXZaR1VvS1Z4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRndjR3g1VGxNZ0tIWnViMlJsTENCdWN5d2dabTl5WTJVcElIdGNiaUFnZG01dlpHVXVibk1nUFNCdWN6dGNiaUFnYVdZZ0tIWnViMlJsTG5SaFp5QTlQVDBnSjJadmNtVnBaMjVQWW1wbFkzUW5LU0I3WEc0Z0lDQWdMeThnZFhObElHUmxabUYxYkhRZ2JtRnRaWE53WVdObElHbHVjMmxrWlNCbWIzSmxhV2R1VDJKcVpXTjBYRzRnSUNBZ2JuTWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdabTl5WTJVZ1BTQjBjblZsTzF4dUlDQjlYRzRnSUdsbUlDaHBjMFJsWmloMmJtOWtaUzVqYUdsc1pISmxiaWtwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diQ0E5SUhadWIyUmxMbU5vYVd4a2NtVnVMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHTm9hV3hrSUQwZ2RtNXZaR1V1WTJocGJHUnlaVzViYVYwN1hHNGdJQ0FnSUNCcFppQW9hWE5FWldZb1kyaHBiR1F1ZEdGbktTQW1KaUFvYVhOVmJtUmxaaWhqYUdsc1pDNXVjeWtnZkh3Z2FYTlVjblZsS0dadmNtTmxLU2twSUh0Y2JpQWdJQ0FnSUNBZ1lYQndiSGxPVXloamFHbHNaQ3dnYm5Nc0lHWnZjbU5sS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFJTWlc1a1pYSWdLSFp0S1NCN1hHNGdJSFp0TGw5MmJtOWtaU0E5SUc1MWJHdzdJQzh2SUhSb1pTQnliMjkwSUc5bUlIUm9aU0JqYUdsc1pDQjBjbVZsWEc0Z0lIWnRMbDl6ZEdGMGFXTlVjbVZsY3lBOUlHNTFiR3c3SUM4dklIWXRiMjVqWlNCallXTm9aV1FnZEhKbFpYTmNiaUFnZG1GeUlHOXdkR2x2Ym5NZ1BTQjJiUzRrYjNCMGFXOXVjenRjYmlBZ2RtRnlJSEJoY21WdWRGWnViMlJsSUQwZ2RtMHVKSFp1YjJSbElEMGdiM0IwYVc5dWN5NWZjR0Z5Wlc1MFZtNXZaR1U3SUM4dklIUm9aU0J3YkdGalpXaHZiR1JsY2lCdWIyUmxJR2x1SUhCaGNtVnVkQ0IwY21WbFhHNGdJSFpoY2lCeVpXNWtaWEpEYjI1MFpYaDBJRDBnY0dGeVpXNTBWbTV2WkdVZ0ppWWdjR0Z5Wlc1MFZtNXZaR1V1WTI5dWRHVjRkRHRjYmlBZ2RtMHVKSE5zYjNSeklEMGdjbVZ6YjJ4MlpWTnNiM1J6S0c5d2RHbHZibk11WDNKbGJtUmxja05vYVd4a2NtVnVMQ0J5Wlc1a1pYSkRiMjUwWlhoMEtUdGNiaUFnZG0wdUpITmpiM0JsWkZOc2IzUnpJRDBnWlcxd2RIbFBZbXBsWTNRN1hHNGdJQzh2SUdKcGJtUWdkR2hsSUdOeVpXRjBaVVZzWlcxbGJuUWdabTRnZEc4Z2RHaHBjeUJwYm5OMFlXNWpaVnh1SUNBdkx5QnpieUIwYUdGMElIZGxJR2RsZENCd2NtOXdaWElnY21WdVpHVnlJR052Ym5SbGVIUWdhVzV6YVdSbElHbDBMbHh1SUNBdkx5QmhjbWR6SUc5eVpHVnlPaUIwWVdjc0lHUmhkR0VzSUdOb2FXeGtjbVZ1TENCdWIzSnRZV3hwZW1GMGFXOXVWSGx3WlN3Z1lXeDNZWGx6VG05eWJXRnNhWHBsWEc0Z0lDOHZJR2x1ZEdWeWJtRnNJSFpsY25OcGIyNGdhWE1nZFhObFpDQmllU0J5Wlc1a1pYSWdablZ1WTNScGIyNXpJR052YlhCcGJHVmtJR1p5YjIwZ2RHVnRjR3hoZEdWelhHNGdJSFp0TGw5aklEMGdablZ1WTNScGIyNGdLR0VzSUdJc0lHTXNJR1FwSUhzZ2NtVjBkWEp1SUdOeVpXRjBaVVZzWlcxbGJuUW9kbTBzSUdFc0lHSXNJR01zSUdRc0lHWmhiSE5sS1RzZ2ZUdGNiaUFnTHk4Z2JtOXliV0ZzYVhwaGRHbHZiaUJwY3lCaGJIZGhlWE1nWVhCd2JHbGxaQ0JtYjNJZ2RHaGxJSEIxWW14cFl5QjJaWEp6YVc5dUxDQjFjMlZrSUdsdVhHNGdJQzh2SUhWelpYSXRkM0pwZEhSbGJpQnlaVzVrWlhJZ1puVnVZM1JwYjI1ekxseHVJQ0IyYlM0a1kzSmxZWFJsUld4bGJXVnVkQ0E5SUdaMWJtTjBhVzl1SUNoaExDQmlMQ0JqTENCa0tTQjdJSEpsZEhWeWJpQmpjbVZoZEdWRmJHVnRaVzUwS0hadExDQmhMQ0JpTENCakxDQmtMQ0IwY25WbEtUc2dmVHRjYmx4dUlDQXZMeUFrWVhSMGNuTWdKaUFrYkdsemRHVnVaWEp6SUdGeVpTQmxlSEJ2YzJWa0lHWnZjaUJsWVhOcFpYSWdTRTlESUdOeVpXRjBhVzl1TGx4dUlDQXZMeUIwYUdWNUlHNWxaV1FnZEc4Z1ltVWdjbVZoWTNScGRtVWdjMjhnZEdoaGRDQklUME56SUhWemFXNW5JSFJvWlcwZ1lYSmxJR0ZzZDJGNWN5QjFjR1JoZEdWa1hHNGdJSFpoY2lCd1lYSmxiblJFWVhSaElEMGdjR0Z5Wlc1MFZtNXZaR1VnSmlZZ2NHRnlaVzUwVm01dlpHVXVaR0YwWVR0Y2JseHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnWld4elpTQXFMMXh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJR1JsWm1sdVpWSmxZV04wYVhabEtIWnRMQ0FuSkdGMGRISnpKeXdnY0dGeVpXNTBSR0YwWVNBbUppQndZWEpsYm5SRVlYUmhMbUYwZEhKeklIeDhJR1Z0Y0hSNVQySnFaV04wTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWhhWE5WY0dSaGRHbHVaME5vYVd4a1EyOXRjRzl1Wlc1MElDWW1JSGRoY200b1hDSWtZWFIwY25NZ2FYTWdjbVZoWkc5dWJIa3VYQ0lzSUhadEtUdGNiaUFnSUNCOUxDQjBjblZsS1R0Y2JpQWdJQ0JrWldacGJtVlNaV0ZqZEdsMlpTaDJiU3dnSnlSc2FYTjBaVzVsY25NbkxDQnZjSFJwYjI1ekxsOXdZWEpsYm5STWFYTjBaVzVsY25NZ2ZId2daVzF3ZEhsUFltcGxZM1FzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDRnBjMVZ3WkdGMGFXNW5RMmhwYkdSRGIyMXdiMjVsYm5RZ0ppWWdkMkZ5YmloY0lpUnNhWE4wWlc1bGNuTWdhWE1nY21WaFpHOXViSGt1WENJc0lIWnRLVHRjYmlBZ0lDQjlMQ0IwY25WbEtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQmtaV1pwYm1WU1pXRmpkR2wyWlNoMmJTd2dKeVJoZEhSeWN5Y3NJSEJoY21WdWRFUmhkR0VnSmlZZ2NHRnlaVzUwUkdGMFlTNWhkSFJ5Y3lCOGZDQmxiWEIwZVU5aWFtVmpkQ3dnYm5Wc2JDd2dkSEoxWlNrN1hHNGdJQ0FnWkdWbWFXNWxVbVZoWTNScGRtVW9kbTBzSUNja2JHbHpkR1Z1WlhKekp5d2diM0IwYVc5dWN5NWZjR0Z5Wlc1MFRHbHpkR1Z1WlhKeklIeDhJR1Z0Y0hSNVQySnFaV04wTENCdWRXeHNMQ0IwY25WbEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ5Wlc1a1pYSk5hWGhwYmlBb1ZuVmxLU0I3WEc0Z0lDOHZJR2x1YzNSaGJHd2djblZ1ZEdsdFpTQmpiMjUyWlc1cFpXNWpaU0JvWld4d1pYSnpYRzRnSUdsdWMzUmhiR3hTWlc1a1pYSklaV3h3WlhKektGWjFaUzV3Y205MGIzUjVjR1VwTzF4dVhHNGdJRloxWlM1d2NtOTBiM1I1Y0dVdUpHNWxlSFJVYVdOcklEMGdablZ1WTNScGIyNGdLR1p1S1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZUhSVWFXTnJLR1p1TENCMGFHbHpLVnh1SUNCOU8xeHVYRzRnSUZaMVpTNXdjbTkwYjNSNWNHVXVYM0psYm1SbGNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ2RtMGdQU0IwYUdsek8xeHVJQ0FnSUhaaGNpQnlaV1lnUFNCMmJTNGtiM0IwYVc5dWN6dGNiaUFnSUNCMllYSWdjbVZ1WkdWeUlEMGdjbVZtTG5KbGJtUmxjanRjYmlBZ0lDQjJZWElnWDNCaGNtVnVkRlp1YjJSbElEMGdjbVZtTGw5d1lYSmxiblJXYm05a1pUdGNibHh1SUNBZ0lHbG1JQ2gyYlM1ZmFYTk5iM1Z1ZEdWa0tTQjdYRzRnSUNBZ0lDQXZMeUJwWmlCMGFHVWdjR0Z5Wlc1MElHUnBaRzRuZENCMWNHUmhkR1VzSUhSb1pTQnpiRzkwSUc1dlpHVnpJSGRwYkd3Z1ltVWdkR2hsSUc5dVpYTWdabkp2YlZ4dUlDQWdJQ0FnTHk4Z2JHRnpkQ0J5Wlc1a1pYSXVJRlJvWlhrZ2JtVmxaQ0IwYnlCaVpTQmpiRzl1WldRZ2RHOGdaVzV6ZFhKbElGd2labkpsYzJodVpYTnpYQ0lnWm05eUlIUm9hWE1nY21WdVpHVnlMbHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlIWnRMaVJ6Ykc5MGN5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MyeHZkQ0E5SUhadExpUnpiRzkwYzF0clpYbGRPMXh1SUNBZ0lDQWdJQ0F2THlCZmNtVnVaR1Z5WldRZ2FYTWdZU0JtYkdGbklHRmtaR1ZrSUdKNUlISmxibVJsY2xOc2IzUXNJR0oxZENCdFlYa2dibTkwSUdKbElIQnlaWE5sYm5SY2JpQWdJQ0FnSUNBZ0x5OGdhV1lnZEdobElITnNiM1FnYVhNZ2NHRnpjMlZrSUdaeWIyMGdiV0Z1ZFdGc2JIa2dkM0pwZEhSbGJpQnlaVzVrWlhJZ1puVnVZM1JwYjI1elhHNGdJQ0FnSUNBZ0lHbG1JQ2h6Ykc5MExsOXlaVzVrWlhKbFpDQjhmQ0FvYzJ4dmRGc3dYU0FtSmlCemJHOTBXekJkTG1Wc2JTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMmJTNGtjMnh2ZEhOYmEyVjVYU0E5SUdOc2IyNWxWazV2WkdWektITnNiM1FzSUhSeWRXVWdMeW9nWkdWbGNDQXFMeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyYlM0a2MyTnZjR1ZrVTJ4dmRITWdQU0FvWDNCaGNtVnVkRlp1YjJSbElDWW1JRjl3WVhKbGJuUldibTlrWlM1a1lYUmhMbk5qYjNCbFpGTnNiM1J6S1NCOGZDQmxiWEIwZVU5aWFtVmpkRHRjYmx4dUlDQWdJQzh2SUhObGRDQndZWEpsYm5RZ2RtNXZaR1V1SUhSb2FYTWdZV3hzYjNkeklISmxibVJsY2lCbWRXNWpkR2x2Ym5NZ2RHOGdhR0YyWlNCaFkyTmxjM05jYmlBZ0lDQXZMeUIwYnlCMGFHVWdaR0YwWVNCdmJpQjBhR1VnY0d4aFkyVm9iMnhrWlhJZ2JtOWtaUzVjYmlBZ0lDQjJiUzRrZG01dlpHVWdQU0JmY0dGeVpXNTBWbTV2WkdVN1hHNGdJQ0FnTHk4Z2NtVnVaR1Z5SUhObGJHWmNiaUFnSUNCMllYSWdkbTV2WkdVN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lIWnViMlJsSUQwZ2NtVnVaR1Z5TG1OaGJHd29kbTB1WDNKbGJtUmxjbEJ5YjNoNUxDQjJiUzRrWTNKbFlYUmxSV3hsYldWdWRDazdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdhR0Z1Wkd4bFJYSnliM0lvWlN3Z2RtMHNJRndpY21WdVpHVnlYQ0lwTzF4dUlDQWdJQ0FnTHk4Z2NtVjBkWEp1SUdWeWNtOXlJSEpsYm1SbGNpQnlaWE4xYkhRc1hHNGdJQ0FnSUNBdkx5QnZjaUJ3Y21WMmFXOTFjeUIyYm05a1pTQjBieUJ3Y21WMlpXNTBJSEpsYm1SbGNpQmxjbkp2Y2lCallYVnphVzVuSUdKc1lXNXJJR052YlhCdmJtVnVkRnh1SUNBZ0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR1ZzYzJVZ0tpOWNiaUFnSUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gyYlM0a2IzQjBhVzl1Y3k1eVpXNWtaWEpGY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMmJtOWtaU0E5SUhadExpUnZjSFJwYjI1ekxuSmxibVJsY2tWeWNtOXlMbU5oYkd3b2RtMHVYM0psYm1SbGNsQnliM2g1TENCMmJTNGtZM0psWVhSbFJXeGxiV1Z1ZEN3Z1pTazdYRzRnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxSWEp5YjNJb1pTd2dkbTBzSUZ3aWNtVnVaR1Z5UlhKeWIzSmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJibTlrWlNBOUlIWnRMbDkyYm05a1pUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtNXZaR1VnUFNCMmJTNWZkbTV2WkdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIWnViMlJsSUQwZ2RtMHVYM1p1YjJSbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2THlCeVpYUjFjbTRnWlcxd2RIa2dkbTV2WkdVZ2FXNGdZMkZ6WlNCMGFHVWdjbVZ1WkdWeUlHWjFibU4wYVc5dUlHVnljbTl5WldRZ2IzVjBYRzRnSUNBZ2FXWWdLQ0VvZG01dlpHVWdhVzV6ZEdGdVkyVnZaaUJXVG05a1pTa3BJSHRjYmlBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklDWW1JRUZ5Y21GNUxtbHpRWEp5WVhrb2RtNXZaR1VwS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNBZ0owMTFiSFJwY0d4bElISnZiM1FnYm05a1pYTWdjbVYwZFhKdVpXUWdabkp2YlNCeVpXNWtaWElnWm5WdVkzUnBiMjR1SUZKbGJtUmxjaUJtZFc1amRHbHZiaUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQW5jMmh2ZFd4a0lISmxkSFZ5YmlCaElITnBibWRzWlNCeWIyOTBJRzV2WkdVdUp5eGNiaUFnSUNBZ0lDQWdJQ0IyYlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtNXZaR1VnUFNCamNtVmhkR1ZGYlhCMGVWWk9iMlJsS0NrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhObGRDQndZWEpsYm5SY2JpQWdJQ0IyYm05a1pTNXdZWEpsYm5RZ1BTQmZjR0Z5Wlc1MFZtNXZaR1U3WEc0Z0lDQWdjbVYwZFhKdUlIWnViMlJsWEc0Z0lIMDdYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNTJZWElnZFdsa0lEMGdNRHRjYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRTFwZUdsdUlDaFdkV1VwSUh0Y2JpQWdWblZsTG5CeWIzUnZkSGx3WlM1ZmFXNXBkQ0E5SUdaMWJtTjBhVzl1SUNodmNIUnBiMjV6S1NCN1hHNGdJQ0FnZG1GeUlIWnRJRDBnZEdocGN6dGNiaUFnSUNBdkx5QmhJSFZwWkZ4dUlDQWdJSFp0TGw5MWFXUWdQU0IxYVdRckt6dGNibHh1SUNBZ0lIWmhjaUJ6ZEdGeWRGUmhaeXdnWlc1a1ZHRm5PMXh1SUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklDWW1JR052Ym1acFp5NXdaWEptYjNKdFlXNWpaU0FtSmlCdFlYSnJLU0I3WEc0Z0lDQWdJQ0J6ZEdGeWRGUmhaeUE5SUZ3aWRuVmxMWEJsY21ZdGMzUmhjblE2WENJZ0t5QW9kbTB1WDNWcFpDazdYRzRnSUNBZ0lDQmxibVJVWVdjZ1BTQmNJbloxWlMxd1pYSm1MV1Z1WkRwY0lpQXJJQ2gyYlM1ZmRXbGtLVHRjYmlBZ0lDQWdJRzFoY21zb2MzUmhjblJVWVdjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHRWdabXhoWnlCMGJ5QmhkbTlwWkNCMGFHbHpJR0psYVc1bklHOWljMlZ5ZG1Wa1hHNGdJQ0FnZG0wdVgybHpWblZsSUQwZ2RISjFaVHRjYmlBZ0lDQXZMeUJ0WlhKblpTQnZjSFJwYjI1elhHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NZ0ppWWdiM0IwYVc5dWN5NWZhWE5EYjIxd2IyNWxiblFwSUh0Y2JpQWdJQ0FnSUM4dklHOXdkR2x0YVhwbElHbHVkR1Z5Ym1Gc0lHTnZiWEJ2Ym1WdWRDQnBibk4wWVc1MGFXRjBhVzl1WEc0Z0lDQWdJQ0F2THlCemFXNWpaU0JrZVc1aGJXbGpJRzl3ZEdsdmJuTWdiV1Z5WjJsdVp5QnBjeUJ3Y21WMGRIa2djMnh2ZHl3Z1lXNWtJRzV2Ym1VZ2IyWWdkR2hsWEc0Z0lDQWdJQ0F2THlCcGJuUmxjbTVoYkNCamIyMXdiMjVsYm5RZ2IzQjBhVzl1Y3lCdVpXVmtjeUJ6Y0dWamFXRnNJSFJ5WldGMGJXVnVkQzVjYmlBZ0lDQWdJR2x1YVhSSmJuUmxjbTVoYkVOdmJYQnZibVZ1ZENoMmJTd2diM0IwYVc5dWN5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhadExpUnZjSFJwYjI1eklEMGdiV1Z5WjJWUGNIUnBiMjV6S0Z4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsUTI5dWMzUnlkV04wYjNKUGNIUnBiMjV6S0hadExtTnZibk4wY25WamRHOXlLU3hjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeUI4ZkNCN2ZTeGNiaUFnSUNBZ0lDQWdkbTFjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQmxiSE5sSUNvdlhHNGdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJR2x1YVhSUWNtOTRlU2gyYlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFp0TGw5eVpXNWtaWEpRY205NGVTQTlJSFp0TzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJsZUhCdmMyVWdjbVZoYkNCelpXeG1YRzRnSUNBZ2RtMHVYM05sYkdZZ1BTQjJiVHRjYmlBZ0lDQnBibWwwVEdsbVpXTjVZMnhsS0hadEtUdGNiaUFnSUNCcGJtbDBSWFpsYm5SektIWnRLVHRjYmlBZ0lDQnBibWwwVW1WdVpHVnlLSFp0S1R0Y2JpQWdJQ0JqWVd4c1NHOXZheWgyYlN3Z0oySmxabTl5WlVOeVpXRjBaU2NwTzF4dUlDQWdJR2x1YVhSSmJtcGxZM1JwYjI1ektIWnRLVHNnTHk4Z2NtVnpiMngyWlNCcGJtcGxZM1JwYjI1eklHSmxabTl5WlNCa1lYUmhMM0J5YjNCelhHNGdJQ0FnYVc1cGRGTjBZWFJsS0hadEtUdGNiaUFnSUNCcGJtbDBVSEp2ZG1sa1pTaDJiU2s3SUM4dklISmxjMjlzZG1VZ2NISnZkbWxrWlNCaFpuUmxjaUJrWVhSaEwzQnliM0J6WEc0Z0lDQWdZMkZzYkVodmIyc29kbTBzSUNkamNtVmhkR1ZrSnlrN1hHNWNiaUFnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQmpiMjVtYVdjdWNHVnlabTl5YldGdVkyVWdKaVlnYldGeWF5a2dlMXh1SUNBZ0lDQWdkbTB1WDI1aGJXVWdQU0JtYjNKdFlYUkRiMjF3YjI1bGJuUk9ZVzFsS0hadExDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNCdFlYSnJLR1Z1WkZSaFp5azdYRzRnSUNBZ0lDQnRaV0Z6ZFhKbEtDaGNJbloxWlNCY0lpQXJJQ2gyYlM1ZmJtRnRaU2tnS3lCY0lpQnBibWwwWENJcExDQnpkR0Z5ZEZSaFp5d2daVzVrVkdGbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kbTB1Skc5d2RHbHZibk11Wld3cElIdGNiaUFnSUNBZ0lIWnRMaVJ0YjNWdWRDaDJiUzRrYjNCMGFXOXVjeTVsYkNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBibWwwU1c1MFpYSnVZV3hEYjIxd2IyNWxiblFnS0hadExDQnZjSFJwYjI1ektTQjdYRzRnSUhaaGNpQnZjSFJ6SUQwZ2RtMHVKRzl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZM0psWVhSbEtIWnRMbU52Ym5OMGNuVmpkRzl5TG05d2RHbHZibk1wTzF4dUlDQXZMeUJrYjJsdVp5QjBhR2x6SUdKbFkyRjFjMlVnYVhRbmN5Qm1ZWE4wWlhJZ2RHaGhiaUJrZVc1aGJXbGpJR1Z1ZFcxbGNtRjBhVzl1TGx4dUlDQjJZWElnY0dGeVpXNTBWbTV2WkdVZ1BTQnZjSFJwYjI1ekxsOXdZWEpsYm5SV2JtOWtaVHRjYmlBZ2IzQjBjeTV3WVhKbGJuUWdQU0J2Y0hScGIyNXpMbkJoY21WdWREdGNiaUFnYjNCMGN5NWZjR0Z5Wlc1MFZtNXZaR1VnUFNCd1lYSmxiblJXYm05a1pUdGNiaUFnYjNCMGN5NWZjR0Z5Wlc1MFJXeHRJRDBnYjNCMGFXOXVjeTVmY0dGeVpXNTBSV3h0TzF4dUlDQnZjSFJ6TGw5eVpXWkZiRzBnUFNCdmNIUnBiMjV6TGw5eVpXWkZiRzA3WEc1Y2JpQWdkbUZ5SUhadWIyUmxRMjl0Y0c5dVpXNTBUM0IwYVc5dWN5QTlJSEJoY21WdWRGWnViMlJsTG1OdmJYQnZibVZ1ZEU5d2RHbHZibk03WEc0Z0lHOXdkSE11Y0hKdmNITkVZWFJoSUQwZ2RtNXZaR1ZEYjIxd2IyNWxiblJQY0hScGIyNXpMbkJ5YjNCelJHRjBZVHRjYmlBZ2IzQjBjeTVmY0dGeVpXNTBUR2x6ZEdWdVpYSnpJRDBnZG01dlpHVkRiMjF3YjI1bGJuUlBjSFJwYjI1ekxteHBjM1JsYm1WeWN6dGNiaUFnYjNCMGN5NWZjbVZ1WkdWeVEyaHBiR1J5Wlc0Z1BTQjJibTlrWlVOdmJYQnZibVZ1ZEU5d2RHbHZibk11WTJocGJHUnlaVzQ3WEc0Z0lHOXdkSE11WDJOdmJYQnZibVZ1ZEZSaFp5QTlJSFp1YjJSbFEyOXRjRzl1Wlc1MFQzQjBhVzl1Y3k1MFlXYzdYRzVjYmlBZ2FXWWdLRzl3ZEdsdmJuTXVjbVZ1WkdWeUtTQjdYRzRnSUNBZ2IzQjBjeTV5Wlc1a1pYSWdQU0J2Y0hScGIyNXpMbkpsYm1SbGNqdGNiaUFnSUNCdmNIUnpMbk4wWVhScFkxSmxibVJsY2tadWN5QTlJRzl3ZEdsdmJuTXVjM1JoZEdsalVtVnVaR1Z5Um01ek8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsYzI5c2RtVkRiMjV6ZEhKMVkzUnZjazl3ZEdsdmJuTWdLRU4wYjNJcElIdGNiaUFnZG1GeUlHOXdkR2x2Ym5NZ1BTQkRkRzl5TG05d2RHbHZibk03WEc0Z0lHbG1JQ2hEZEc5eUxuTjFjR1Z5S1NCN1hHNGdJQ0FnZG1GeUlITjFjR1Z5VDNCMGFXOXVjeUE5SUhKbGMyOXNkbVZEYjI1emRISjFZM1J2Y2s5d2RHbHZibk1vUTNSdmNpNXpkWEJsY2lrN1hHNGdJQ0FnZG1GeUlHTmhZMmhsWkZOMWNHVnlUM0IwYVc5dWN5QTlJRU4wYjNJdWMzVndaWEpQY0hScGIyNXpPMXh1SUNBZ0lHbG1JQ2h6ZFhCbGNrOXdkR2x2Ym5NZ0lUMDlJR05oWTJobFpGTjFjR1Z5VDNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnTHk4Z2MzVndaWElnYjNCMGFXOXVJR05vWVc1blpXUXNYRzRnSUNBZ0lDQXZMeUJ1WldWa0lIUnZJSEpsYzI5c2RtVWdibVYzSUc5d2RHbHZibk11WEc0Z0lDQWdJQ0JEZEc5eUxuTjFjR1Z5VDNCMGFXOXVjeUE5SUhOMWNHVnlUM0IwYVc5dWN6dGNiaUFnSUNBZ0lDOHZJR05vWldOcklHbG1JSFJvWlhKbElHRnlaU0JoYm5rZ2JHRjBaUzF0YjJScFptbGxaQzloZEhSaFkyaGxaQ0J2Y0hScGIyNXpJQ2dqTkRrM05pbGNiaUFnSUNBZ0lIWmhjaUJ0YjJScFptbGxaRTl3ZEdsdmJuTWdQU0J5WlhOdmJIWmxUVzlrYVdacFpXUlBjSFJwYjI1ektFTjBiM0lwTzF4dUlDQWdJQ0FnTHk4Z2RYQmtZWFJsSUdKaGMyVWdaWGgwWlc1a0lHOXdkR2x2Ym5OY2JpQWdJQ0FnSUdsbUlDaHRiMlJwWm1sbFpFOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdaWGgwWlc1a0tFTjBiM0l1WlhoMFpXNWtUM0IwYVc5dWN5d2diVzlrYVdacFpXUlBjSFJwYjI1ektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHOXdkR2x2Ym5NZ1BTQkRkRzl5TG05d2RHbHZibk1nUFNCdFpYSm5aVTl3ZEdsdmJuTW9jM1Z3WlhKUGNIUnBiMjV6TENCRGRHOXlMbVY0ZEdWdVpFOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtTnZiWEJ2Ym1WdWRITmJiM0IwYVc5dWN5NXVZVzFsWFNBOUlFTjBiM0k3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZjSFJwYjI1elhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGMyOXNkbVZOYjJScFptbGxaRTl3ZEdsdmJuTWdLRU4wYjNJcElIdGNiaUFnZG1GeUlHMXZaR2xtYVdWa08xeHVJQ0IyWVhJZ2JHRjBaWE4wSUQwZ1EzUnZjaTV2Y0hScGIyNXpPMXh1SUNCMllYSWdaWGgwWlc1a1pXUWdQU0JEZEc5eUxtVjRkR1Z1WkU5d2RHbHZibk03WEc0Z0lIWmhjaUJ6WldGc1pXUWdQU0JEZEc5eUxuTmxZV3hsWkU5d2RHbHZibk03WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCc1lYUmxjM1FwSUh0Y2JpQWdJQ0JwWmlBb2JHRjBaWE4wVzJ0bGVWMGdJVDA5SUhObFlXeGxaRnRyWlhsZEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVcxdlpHbG1hV1ZrS1NCN0lHMXZaR2xtYVdWa0lEMGdlMzA3SUgxY2JpQWdJQ0FnSUcxdlpHbG1hV1ZrVzJ0bGVWMGdQU0JrWldSMWNHVW9iR0YwWlhOMFcydGxlVjBzSUdWNGRHVnVaR1ZrVzJ0bGVWMHNJSE5sWVd4bFpGdHJaWGxkS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzF2WkdsbWFXVmtYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUmxaSFZ3WlNBb2JHRjBaWE4wTENCbGVIUmxibVJsWkN3Z2MyVmhiR1ZrS1NCN1hHNGdJQzh2SUdOdmJYQmhjbVVnYkdGMFpYTjBJR0Z1WkNCelpXRnNaV1FnZEc4Z1pXNXpkWEpsSUd4cFptVmplV05zWlNCb2IyOXJjeUIzYjI0bmRDQmlaU0JrZFhCc2FXTmhkR1ZrWEc0Z0lDOHZJR0psZEhkbFpXNGdiV1Z5WjJWelhHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR3hoZEdWemRDa3BJSHRjYmlBZ0lDQjJZWElnY21WeklEMGdXMTA3WEc0Z0lDQWdjMlZoYkdWa0lEMGdRWEp5WVhrdWFYTkJjbkpoZVNoelpXRnNaV1FwSUQ4Z2MyVmhiR1ZrSURvZ1czTmxZV3hsWkYwN1hHNGdJQ0FnWlhoMFpXNWtaV1FnUFNCQmNuSmhlUzVwYzBGeWNtRjVLR1Y0ZEdWdVpHVmtLU0EvSUdWNGRHVnVaR1ZrSURvZ1cyVjRkR1Z1WkdWa1hUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGhkR1Z6ZEM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdMeThnY0hWemFDQnZjbWxuYVc1aGJDQnZjSFJwYjI1eklHRnVaQ0J1YjNRZ2MyVmhiR1ZrSUc5d2RHbHZibk1nZEc4Z1pYaGpiSFZrWlNCa2RYQnNhV05oZEdWa0lHOXdkR2x2Ym5OY2JpQWdJQ0FnSUdsbUlDaGxlSFJsYm1SbFpDNXBibVJsZUU5bUtHeGhkR1Z6ZEZ0cFhTa2dQajBnTUNCOGZDQnpaV0ZzWldRdWFXNWtaWGhQWmloc1lYUmxjM1JiYVYwcElEd2dNQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYTXVjSFZ6YUNoc1lYUmxjM1JiYVYwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJR3hoZEdWemRGeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJRloxWlNReklDaHZjSFJwYjI1ektTQjdYRzRnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltWEc0Z0lDQWdJU2gwYUdseklHbHVjM1JoYm1ObGIyWWdWblZsSkRNcFhHNGdJQ2tnZTF4dUlDQWdJSGRoY200b0oxWjFaU0JwY3lCaElHTnZibk4wY25WamRHOXlJR0Z1WkNCemFHOTFiR1FnWW1VZ1kyRnNiR1ZrSUhkcGRHZ2dkR2hsSUdCdVpYZGdJR3RsZVhkdmNtUW5LVHRjYmlBZ2ZWeHVJQ0IwYUdsekxsOXBibWwwS0c5d2RHbHZibk1wTzF4dWZWeHVYRzVwYm1sMFRXbDRhVzRvVm5WbEpETXBPMXh1YzNSaGRHVk5hWGhwYmloV2RXVWtNeWs3WEc1bGRtVnVkSE5OYVhocGJpaFdkV1VrTXlrN1hHNXNhV1psWTNsamJHVk5hWGhwYmloV2RXVWtNeWs3WEc1eVpXNWtaWEpOYVhocGJpaFdkV1VrTXlrN1hHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYm1sMFZYTmxJQ2hXZFdVcElIdGNiaUFnVm5WbExuVnpaU0E5SUdaMWJtTjBhVzl1SUNod2JIVm5hVzRwSUh0Y2JpQWdJQ0IyWVhJZ2FXNXpkR0ZzYkdWa1VHeDFaMmx1Y3lBOUlDaDBhR2x6TGw5cGJuTjBZV3hzWldSUWJIVm5hVzV6SUh4OElDaDBhR2x6TGw5cGJuTjBZV3hzWldSUWJIVm5hVzV6SUQwZ1cxMHBLVHRjYmlBZ0lDQnBaaUFvYVc1emRHRnNiR1ZrVUd4MVoybHVjeTVwYm1SbGVFOW1LSEJzZFdkcGJpa2dQaUF0TVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QmhaR1JwZEdsdmJtRnNJSEJoY21GdFpYUmxjbk5jYmlBZ0lDQjJZWElnWVhKbmN5QTlJSFJ2UVhKeVlYa29ZWEpuZFcxbGJuUnpMQ0F4S1R0Y2JpQWdJQ0JoY21kekxuVnVjMmhwWm5Rb2RHaHBjeWs3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ3YkhWbmFXNHVhVzV6ZEdGc2JDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2NHeDFaMmx1TG1sdWMzUmhiR3d1WVhCd2JIa29jR3gxWjJsdUxDQmhjbWR6S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ3YkhWbmFXNGdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lIQnNkV2RwYmk1aGNIQnNlU2h1ZFd4c0xDQmhjbWR6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhVzV6ZEdGc2JHVmtVR3gxWjJsdWN5NXdkWE5vS0hCc2RXZHBiaWs3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZUdGNibjFjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFJOYVhocGJpUXhJQ2hXZFdVcElIdGNiaUFnVm5WbExtMXBlR2x1SUQwZ1puVnVZM1JwYjI0Z0tHMXBlR2x1S1NCN1hHNGdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdiV1Z5WjJWUGNIUnBiMjV6S0hSb2FYTXViM0IwYVc5dWN5d2diV2w0YVc0cE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDA3WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYm1sMFJYaDBaVzVrSUNoV2RXVXBJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFVmhZMmdnYVc1emRHRnVZMlVnWTI5dWMzUnlkV04wYjNJc0lHbHVZMngxWkdsdVp5QldkV1VzSUdoaGN5QmhJSFZ1YVhGMVpWeHVJQ0FnS2lCamFXUXVJRlJvYVhNZ1pXNWhZbXhsY3lCMWN5QjBieUJqY21WaGRHVWdkM0poY0hCbFpDQmNJbU5vYVd4a1hHNGdJQ0FxSUdOdmJuTjBjblZqZEc5eWMxd2lJR1p2Y2lCd2NtOTBiM1I1Y0dGc0lHbHVhR1Z5YVhSaGJtTmxJR0Z1WkNCallXTm9aU0IwYUdWdExseHVJQ0FnS2k5Y2JpQWdWblZsTG1OcFpDQTlJREE3WEc0Z0lIWmhjaUJqYVdRZ1BTQXhPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRiR0Z6Y3lCcGJtaGxjbWwwWVc1alpWeHVJQ0FnS2k5Y2JpQWdWblZsTG1WNGRHVnVaQ0E5SUdaMWJtTjBhVzl1SUNobGVIUmxibVJQY0hScGIyNXpLU0I3WEc0Z0lDQWdaWGgwWlc1a1QzQjBhVzl1Y3lBOUlHVjRkR1Z1WkU5d2RHbHZibk1nZkh3Z2UzMDdYRzRnSUNBZ2RtRnlJRk4xY0dWeUlEMGdkR2hwY3p0Y2JpQWdJQ0IyWVhJZ1UzVndaWEpKWkNBOUlGTjFjR1Z5TG1OcFpEdGNiaUFnSUNCMllYSWdZMkZqYUdWa1EzUnZjbk1nUFNCbGVIUmxibVJQY0hScGIyNXpMbDlEZEc5eUlIeDhJQ2hsZUhSbGJtUlBjSFJwYjI1ekxsOURkRzl5SUQwZ2UzMHBPMXh1SUNBZ0lHbG1JQ2hqWVdOb1pXUkRkRzl5YzF0VGRYQmxja2xrWFNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRU4wYjNKelcxTjFjR1Z5U1dSZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHNWhiV1VnUFNCbGVIUmxibVJQY0hScGIyNXpMbTVoYldVZ2ZId2dVM1Z3WlhJdWIzQjBhVzl1Y3k1dVlXMWxPMXh1SUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUNZbUlHNWhiV1VwSUh0Y2JpQWdJQ0FnSUhaaGJHbGtZWFJsUTI5dGNHOXVaVzUwVG1GdFpTaHVZVzFsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ1UzVmlJRDBnWm5WdVkzUnBiMjRnVm5WbFEyOXRjRzl1Wlc1MElDaHZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5cGJtbDBLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1UzVmlMbkJ5YjNSdmRIbHdaU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9VM1Z3WlhJdWNISnZkRzkwZVhCbEtUdGNiaUFnSUNCVGRXSXVjSEp2ZEc5MGVYQmxMbU52Ym5OMGNuVmpkRzl5SUQwZ1UzVmlPMXh1SUNBZ0lGTjFZaTVqYVdRZ1BTQmphV1FyS3p0Y2JpQWdJQ0JUZFdJdWIzQjBhVzl1Y3lBOUlHMWxjbWRsVDNCMGFXOXVjeWhjYmlBZ0lDQWdJRk4xY0dWeUxtOXdkR2x2Ym5Nc1hHNGdJQ0FnSUNCbGVIUmxibVJQY0hScGIyNXpYRzRnSUNBZ0tUdGNiaUFnSUNCVGRXSmJKM04xY0dWeUoxMGdQU0JUZFhCbGNqdGNibHh1SUNBZ0lDOHZJRVp2Y2lCd2NtOXdjeUJoYm1RZ1kyOXRjSFYwWldRZ2NISnZjR1Z5ZEdsbGN5d2dkMlVnWkdWbWFXNWxJSFJvWlNCd2NtOTRlU0JuWlhSMFpYSnpJRzl1WEc0Z0lDQWdMeThnZEdobElGWjFaU0JwYm5OMFlXNWpaWE1nWVhRZ1pYaDBaVzV6YVc5dUlIUnBiV1VzSUc5dUlIUm9aU0JsZUhSbGJtUmxaQ0J3Y205MGIzUjVjR1V1SUZSb2FYTmNiaUFnSUNBdkx5QmhkbTlwWkhNZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVJR05oYkd4eklHWnZjaUJsWVdOb0lHbHVjM1JoYm1ObElHTnlaV0YwWldRdVhHNGdJQ0FnYVdZZ0tGTjFZaTV2Y0hScGIyNXpMbkJ5YjNCektTQjdYRzRnSUNBZ0lDQnBibWwwVUhKdmNITWtNU2hUZFdJcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1UzVmlMbTl3ZEdsdmJuTXVZMjl0Y0hWMFpXUXBJSHRjYmlBZ0lDQWdJR2x1YVhSRGIyMXdkWFJsWkNReEtGTjFZaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWVd4c2IzY2dablZ5ZEdobGNpQmxlSFJsYm5OcGIyNHZiV2w0YVc0dmNHeDFaMmx1SUhWellXZGxYRzRnSUNBZ1UzVmlMbVY0ZEdWdVpDQTlJRk4xY0dWeUxtVjRkR1Z1WkR0Y2JpQWdJQ0JUZFdJdWJXbDRhVzRnUFNCVGRYQmxjaTV0YVhocGJqdGNiaUFnSUNCVGRXSXVkWE5sSUQwZ1UzVndaWEl1ZFhObE8xeHVYRzRnSUNBZ0x5OGdZM0psWVhSbElHRnpjMlYwSUhKbFoybHpkR1Z5Y3l3Z2MyOGdaWGgwWlc1a1pXUWdZMnhoYzNObGMxeHVJQ0FnSUM4dklHTmhiaUJvWVhabElIUm9aV2x5SUhCeWFYWmhkR1VnWVhOelpYUnpJSFJ2Ynk1Y2JpQWdJQ0JCVTFORlZGOVVXVkJGVXk1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0JUZFdKYmRIbHdaVjBnUFNCVGRYQmxjbHQwZVhCbFhUdGNiaUFnSUNCOUtUdGNiaUFnSUNBdkx5QmxibUZpYkdVZ2NtVmpkWEp6YVhabElITmxiR1l0Ykc5dmEzVndYRzRnSUNBZ2FXWWdLRzVoYldVcElIdGNiaUFnSUNBZ0lGTjFZaTV2Y0hScGIyNXpMbU52YlhCdmJtVnVkSE5iYm1GdFpWMGdQU0JUZFdJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2EyVmxjQ0JoSUhKbFptVnlaVzVqWlNCMGJ5QjBhR1VnYzNWd1pYSWdiM0IwYVc5dWN5QmhkQ0JsZUhSbGJuTnBiMjRnZEdsdFpTNWNiaUFnSUNBdkx5QnNZWFJsY2lCaGRDQnBibk4wWVc1MGFXRjBhVzl1SUhkbElHTmhiaUJqYUdWamF5QnBaaUJUZFhCbGNpZHpJRzl3ZEdsdmJuTWdhR0YyWlZ4dUlDQWdJQzh2SUdKbFpXNGdkWEJrWVhSbFpDNWNiaUFnSUNCVGRXSXVjM1Z3WlhKUGNIUnBiMjV6SUQwZ1UzVndaWEl1YjNCMGFXOXVjenRjYmlBZ0lDQlRkV0l1WlhoMFpXNWtUM0IwYVc5dWN5QTlJR1Y0ZEdWdVpFOXdkR2x2Ym5NN1hHNGdJQ0FnVTNWaUxuTmxZV3hsWkU5d2RHbHZibk1nUFNCbGVIUmxibVFvZTMwc0lGTjFZaTV2Y0hScGIyNXpLVHRjYmx4dUlDQWdJQzh2SUdOaFkyaGxJR052Ym5OMGNuVmpkRzl5WEc0Z0lDQWdZMkZqYUdWa1EzUnZjbk5iVTNWd1pYSkpaRjBnUFNCVGRXSTdYRzRnSUNBZ2NtVjBkWEp1SUZOMVlseHVJQ0I5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMFVISnZjSE1rTVNBb1EyOXRjQ2tnZTF4dUlDQjJZWElnY0hKdmNITWdQU0JEYjIxd0xtOXdkR2x2Ym5NdWNISnZjSE03WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCd2NtOXdjeWtnZTF4dUlDQWdJSEJ5YjNoNUtFTnZiWEF1Y0hKdmRHOTBlWEJsTENCY0lsOXdjbTl3YzF3aUxDQnJaWGtwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFJEYjIxd2RYUmxaQ1F4SUNoRGIyMXdLU0I3WEc0Z0lIWmhjaUJqYjIxd2RYUmxaQ0E5SUVOdmJYQXViM0IwYVc5dWN5NWpiMjF3ZFhSbFpEdGNiaUFnWm05eUlDaDJZWElnYTJWNUlHbHVJR052YlhCMWRHVmtLU0I3WEc0Z0lDQWdaR1ZtYVc1bFEyOXRjSFYwWldRb1EyOXRjQzV3Y205MGIzUjVjR1VzSUd0bGVTd2dZMjl0Y0hWMFpXUmJhMlY1WFNrN1hHNGdJSDFjYm4xY2JseHVMeW9nSUNvdlhHNWNibVoxYm1OMGFXOXVJR2x1YVhSQmMzTmxkRkpsWjJsemRHVnljeUFvVm5WbEtTQjdYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1VnWVhOelpYUWdjbVZuYVhOMGNtRjBhVzl1SUcxbGRHaHZaSE11WEc0Z0lDQXFMMXh1SUNCQlUxTkZWRjlVV1ZCRlV5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaDBlWEJsS1NCN1hHNGdJQ0FnVm5WbFczUjVjR1ZkSUQwZ1puVnVZM1JwYjI0Z0tGeHVJQ0FnSUNBZ2FXUXNYRzRnSUNBZ0lDQmtaV1pwYm1sMGFXOXVYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQnBaaUFvSVdSbFptbHVhWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YjNCMGFXOXVjMXQwZVhCbElDc2dKM01uWFZ0cFpGMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJQ0FnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCMGVYQmxJRDA5UFNBblkyOXRjRzl1Wlc1MEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGJHbGtZWFJsUTI5dGNHOXVaVzUwVG1GdFpTaHBaQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2RqYjIxd2IyNWxiblFuSUNZbUlHbHpVR3hoYVc1UFltcGxZM1FvWkdWbWFXNXBkR2x2YmlrcElIdGNiaUFnSUNBZ0lDQWdJQ0JrWldacGJtbDBhVzl1TG01aGJXVWdQU0JrWldacGJtbDBhVzl1TG01aGJXVWdmSHdnYVdRN1hHNGdJQ0FnSUNBZ0lDQWdaR1ZtYVc1cGRHbHZiaUE5SUhSb2FYTXViM0IwYVc5dWN5NWZZbUZ6WlM1bGVIUmxibVFvWkdWbWFXNXBkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNka2FYSmxZM1JwZG1VbklDWW1JSFI1Y0dWdlppQmtaV1pwYm1sMGFXOXVJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnWkdWbWFXNXBkR2x2YmlBOUlIc2dZbWx1WkRvZ1pHVm1hVzVwZEdsdmJpd2dkWEJrWVhSbE9pQmtaV1pwYm1sMGFXOXVJSDA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpXM1I1Y0dVZ0t5QW5jeWRkVzJsa1hTQTlJR1JsWm1sdWFYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrWldacGJtbDBhVzl1WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ2ZTazdYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQm5aWFJEYjIxd2IyNWxiblJPWVcxbElDaHZjSFJ6S1NCN1hHNGdJSEpsZEhWeWJpQnZjSFJ6SUNZbUlDaHZjSFJ6TGtOMGIzSXViM0IwYVc5dWN5NXVZVzFsSUh4OElHOXdkSE11ZEdGbktWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFlYUmphR1Z6SUNod1lYUjBaWEp1TENCdVlXMWxLU0I3WEc0Z0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtIQmhkSFJsY200cEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCaGRIUmxjbTR1YVc1a1pYaFBaaWh1WVcxbEtTQStJQzB4WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlIQmhkSFJsY200Z1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQmhkSFJsY200dWMzQnNhWFFvSnl3bktTNXBibVJsZUU5bUtHNWhiV1VwSUQ0Z0xURmNiaUFnZlNCbGJITmxJR2xtSUNocGMxSmxaMFY0Y0Nod1lYUjBaWEp1S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ3WVhSMFpYSnVMblJsYzNRb2JtRnRaU2xjYmlBZ2ZWeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNCeVpYUjFjbTRnWm1Gc2MyVmNibjFjYmx4dVpuVnVZM1JwYjI0Z2NISjFibVZEWVdOb1pTQW9hMlZsY0VGc2FYWmxTVzV6ZEdGdVkyVXNJR1pwYkhSbGNpa2dlMXh1SUNCMllYSWdZMkZqYUdVZ1BTQnJaV1Z3UVd4cGRtVkpibk4wWVc1alpTNWpZV05vWlR0Y2JpQWdkbUZ5SUd0bGVYTWdQU0JyWldWd1FXeHBkbVZKYm5OMFlXNWpaUzVyWlhsek8xeHVJQ0IyWVhJZ1gzWnViMlJsSUQwZ2EyVmxjRUZzYVhabFNXNXpkR0Z1WTJVdVgzWnViMlJsTzF4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z1kyRmphR1VwSUh0Y2JpQWdJQ0IyWVhJZ1kyRmphR1ZrVG05a1pTQTlJR05oWTJobFcydGxlVjA3WEc0Z0lDQWdhV1lnS0dOaFkyaGxaRTV2WkdVcElIdGNiaUFnSUNBZ0lIWmhjaUJ1WVcxbElEMGdaMlYwUTI5dGNHOXVaVzUwVG1GdFpTaGpZV05vWldST2IyUmxMbU52YlhCdmJtVnVkRTl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdhV1lnS0c1aGJXVWdKaVlnSVdacGJIUmxjaWh1WVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0J3Y25WdVpVTmhZMmhsUlc1MGNua29ZMkZqYUdVc0lHdGxlU3dnYTJWNWN5d2dYM1p1YjJSbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjSEoxYm1WRFlXTm9aVVZ1ZEhKNUlDaGNiaUFnWTJGamFHVXNYRzRnSUd0bGVTeGNiaUFnYTJWNWN5eGNiaUFnWTNWeWNtVnVkRnh1S1NCN1hHNGdJSFpoY2lCallXTm9aV1FrSkRFZ1BTQmpZV05vWlZ0clpYbGRPMXh1SUNCcFppQW9ZMkZqYUdWa0pDUXhJQ1ltSUNnaFkzVnljbVZ1ZENCOGZDQmpZV05vWldRa0pERXVkR0ZuSUNFOVBTQmpkWEp5Wlc1MExuUmhaeWtwSUh0Y2JpQWdJQ0JqWVdOb1pXUWtKREV1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlV1SkdSbGMzUnliM2tvS1R0Y2JpQWdmVnh1SUNCallXTm9aVnRyWlhsZElEMGdiblZzYkR0Y2JpQWdjbVZ0YjNabEtHdGxlWE1zSUd0bGVTazdYRzU5WEc1Y2JuWmhjaUJ3WVhSMFpYSnVWSGx3WlhNZ1BTQmJVM1J5YVc1bkxDQlNaV2RGZUhBc0lFRnljbUY1WFR0Y2JseHVkbUZ5SUV0bFpYQkJiR2wyWlNBOUlIdGNiaUFnYm1GdFpUb2dKMnRsWlhBdFlXeHBkbVVuTEZ4dUlDQmhZbk4wY21GamREb2dkSEoxWlN4Y2JseHVJQ0J3Y205d2N6b2dlMXh1SUNBZ0lHbHVZMngxWkdVNklIQmhkSFJsY201VWVYQmxjeXhjYmlBZ0lDQmxlR05zZFdSbE9pQndZWFIwWlhKdVZIbHdaWE1zWEc0Z0lDQWdiV0Y0T2lCYlUzUnlhVzVuTENCT2RXMWlaWEpkWEc0Z0lIMHNYRzVjYmlBZ1kzSmxZWFJsWkRvZ1puVnVZM1JwYjI0Z1kzSmxZWFJsWkNBb0tTQjdYRzRnSUNBZ2RHaHBjeTVqWVdOb1pTQTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lDQWdkR2hwY3k1clpYbHpJRDBnVzEwN1hHNGdJSDBzWEc1Y2JpQWdaR1Z6ZEhKdmVXVmtPaUJtZFc1amRHbHZiaUJrWlhOMGNtOTVaV1FnS0NrZ2UxeHVJQ0FnSUhaaGNpQjBhR2x6SkRFZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJSFJvYVhNa01TNWpZV05vWlNrZ2UxeHVJQ0FnSUNBZ2NISjFibVZEWVdOb1pVVnVkSEo1S0hSb2FYTWtNUzVqWVdOb1pTd2dhMlY1TENCMGFHbHpKREV1YTJWNWN5azdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJSGRoZEdOb09pQjdYRzRnSUNBZ2FXNWpiSFZrWlRvZ1puVnVZM1JwYjI0Z2FXNWpiSFZrWlNBb2RtRnNLU0I3WEc0Z0lDQWdJQ0J3Y25WdVpVTmhZMmhsS0hSb2FYTXNJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdJSEpsZEhWeWJpQnRZWFJqYUdWektIWmhiQ3dnYm1GdFpTazdJSDBwTzF4dUlDQWdJSDBzWEc0Z0lDQWdaWGhqYkhWa1pUb2dablZ1WTNScGIyNGdaWGhqYkhWa1pTQW9kbUZzS1NCN1hHNGdJQ0FnSUNCd2NuVnVaVU5oWTJobEtIUm9hWE1zSUdaMWJtTjBhVzl1SUNodVlXMWxLU0I3SUhKbGRIVnliaUFoYldGMFkyaGxjeWgyWVd3c0lHNWhiV1VwT3lCOUtUdGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdjbVZ1WkdWeU9pQm1kVzVqZEdsdmJpQnlaVzVrWlhJZ0tDa2dlMXh1SUNBZ0lIWmhjaUJ6Ykc5MElEMGdkR2hwY3k0a2MyeHZkSE11WkdWbVlYVnNkRHRjYmlBZ0lDQjJZWElnZG01dlpHVWdQU0JuWlhSR2FYSnpkRU52YlhCdmJtVnVkRU5vYVd4a0tITnNiM1FwTzF4dUlDQWdJSFpoY2lCamIyMXdiMjVsYm5SUGNIUnBiMjV6SUQwZ2RtNXZaR1VnSmlZZ2RtNXZaR1V1WTI5dGNHOXVaVzUwVDNCMGFXOXVjenRjYmlBZ0lDQnBaaUFvWTI5dGNHOXVaVzUwVDNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnTHk4Z1kyaGxZMnNnY0dGMGRHVnlibHh1SUNBZ0lDQWdkbUZ5SUc1aGJXVWdQU0JuWlhSRGIyMXdiMjVsYm5ST1lXMWxLR052YlhCdmJtVnVkRTl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdkbUZ5SUhKbFppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdhVzVqYkhWa1pTQTlJSEpsWmk1cGJtTnNkV1JsTzF4dUlDQWdJQ0FnZG1GeUlHVjRZMngxWkdVZ1BTQnlaV1l1WlhoamJIVmtaVHRjYmlBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0x5OGdibTkwSUdsdVkyeDFaR1ZrWEc0Z0lDQWdJQ0FnSUNocGJtTnNkV1JsSUNZbUlDZ2hibUZ0WlNCOGZDQWhiV0YwWTJobGN5aHBibU5zZFdSbExDQnVZVzFsS1NrcElIeDhYRzRnSUNBZ0lDQWdJQzh2SUdWNFkyeDFaR1ZrWEc0Z0lDQWdJQ0FnSUNobGVHTnNkV1JsSUNZbUlHNWhiV1VnSmlZZ2JXRjBZMmhsY3lobGVHTnNkV1JsTENCdVlXMWxLU2xjYmlBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZG01dlpHVmNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkbUZ5SUhKbFppUXhJRDBnZEdocGN6dGNiaUFnSUNBZ0lIWmhjaUJqWVdOb1pTQTlJSEpsWmlReExtTmhZMmhsTzF4dUlDQWdJQ0FnZG1GeUlHdGxlWE1nUFNCeVpXWWtNUzVyWlhsek8xeHVJQ0FnSUNBZ2RtRnlJR3RsZVNBOUlIWnViMlJsTG10bGVTQTlQU0J1ZFd4c1hHNGdJQ0FnSUNBZ0lDOHZJSE5oYldVZ1kyOXVjM1J5ZFdOMGIzSWdiV0Y1SUdkbGRDQnlaV2RwYzNSbGNtVmtJR0Z6SUdScFptWmxjbVZ1ZENCc2IyTmhiQ0JqYjIxd2IyNWxiblJ6WEc0Z0lDQWdJQ0FnSUM4dklITnZJR05wWkNCaGJHOXVaU0JwY3lCdWIzUWdaVzV2ZFdkb0lDZ2pNekkyT1NsY2JpQWdJQ0FnSUNBZ1B5QmpiMjF3YjI1bGJuUlBjSFJwYjI1ekxrTjBiM0l1WTJsa0lDc2dLR052YlhCdmJtVnVkRTl3ZEdsdmJuTXVkR0ZuSUQ4Z0tGd2lPanBjSWlBcklDaGpiMjF3YjI1bGJuUlBjSFJwYjI1ekxuUmhaeWtwSURvZ0p5Y3BYRzRnSUNBZ0lDQWdJRG9nZG01dlpHVXVhMlY1TzF4dUlDQWdJQ0FnYVdZZ0tHTmhZMmhsVzJ0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnZG01dlpHVXVZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVWdQU0JqWVdOb1pWdHJaWGxkTG1OdmJYQnZibVZ1ZEVsdWMzUmhibU5sTzF4dUlDQWdJQ0FnSUNBdkx5QnRZV3RsSUdOMWNuSmxiblFnYTJWNUlHWnlaWE5vWlhOMFhHNGdJQ0FnSUNBZ0lISmxiVzkyWlNoclpYbHpMQ0JyWlhrcE8xeHVJQ0FnSUNBZ0lDQnJaWGx6TG5CMWMyZ29hMlY1S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxXMnRsZVYwZ1BTQjJibTlrWlR0Y2JpQWdJQ0FnSUNBZ2EyVjVjeTV3ZFhOb0tHdGxlU2s3WEc0Z0lDQWdJQ0FnSUM4dklIQnlkVzVsSUc5c1pHVnpkQ0JsYm5SeWVWeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXRZWGdnSmlZZ2EyVjVjeTVzWlc1bmRHZ2dQaUJ3WVhKelpVbHVkQ2gwYUdsekxtMWhlQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQndjblZ1WlVOaFkyaGxSVzUwY25rb1kyRmphR1VzSUd0bGVYTmJNRjBzSUd0bGVYTXNJSFJvYVhNdVgzWnViMlJsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjJibTlrWlM1a1lYUmhMbXRsWlhCQmJHbDJaU0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIyYm05a1pTQjhmQ0FvYzJ4dmRDQW1KaUJ6Ykc5MFd6QmRLVnh1SUNCOVhHNTlPMXh1WEc1MllYSWdZblZwYkhSSmJrTnZiWEJ2Ym1WdWRITWdQU0I3WEc0Z0lFdGxaWEJCYkdsMlpUb2dTMlZsY0VGc2FYWmxYRzU5TzF4dVhHNHZLaUFnS2k5Y2JseHVablZ1WTNScGIyNGdhVzVwZEVkc2IySmhiRUZRU1NBb1ZuVmxLU0I3WEc0Z0lDOHZJR052Ym1acFoxeHVJQ0IyWVhJZ1kyOXVabWxuUkdWbUlEMGdlMzA3WEc0Z0lHTnZibVpwWjBSbFppNW5aWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQmpiMjVtYVdjN0lIMDdYRzRnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdZMjl1Wm1sblJHVm1Mbk5sZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJSGRoY200b1hHNGdJQ0FnSUNBZ0lDZEVieUJ1YjNRZ2NtVndiR0ZqWlNCMGFHVWdWblZsTG1OdmJtWnBaeUJ2WW1wbFkzUXNJSE5sZENCcGJtUnBkbWxrZFdGc0lHWnBaV3hrY3lCcGJuTjBaV0ZrTGlkY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1SUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29WblZsTENBblkyOXVabWxuSnl3Z1kyOXVabWxuUkdWbUtUdGNibHh1SUNBdkx5QmxlSEJ2YzJWa0lIVjBhV3dnYldWMGFHOWtjeTVjYmlBZ0x5OGdUazlVUlRvZ2RHaGxjMlVnWVhKbElHNXZkQ0JqYjI1emFXUmxjbVZrSUhCaGNuUWdiMllnZEdobElIQjFZbXhwWXlCQlVFa2dMU0JoZG05cFpDQnlaV3g1YVc1bklHOXVYRzRnSUM4dklIUm9aVzBnZFc1c1pYTnpJSGx2ZFNCaGNtVWdZWGRoY21VZ2IyWWdkR2hsSUhKcGMyc3VYRzRnSUZaMVpTNTFkR2xzSUQwZ2UxeHVJQ0FnSUhkaGNtNDZJSGRoY200c1hHNGdJQ0FnWlhoMFpXNWtPaUJsZUhSbGJtUXNYRzRnSUNBZ2JXVnlaMlZQY0hScGIyNXpPaUJ0WlhKblpVOXdkR2x2Ym5Nc1hHNGdJQ0FnWkdWbWFXNWxVbVZoWTNScGRtVTZJR1JsWm1sdVpWSmxZV04wYVhabFhHNGdJSDA3WEc1Y2JpQWdWblZsTG5ObGRDQTlJSE5sZER0Y2JpQWdWblZsTG1SbGJHVjBaU0E5SUdSbGJEdGNiaUFnVm5WbExtNWxlSFJVYVdOcklEMGdibVY0ZEZScFkyczdYRzVjYmlBZ1ZuVmxMbTl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4dUlDQkJVMU5GVkY5VVdWQkZVeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2gwZVhCbEtTQjdYRzRnSUNBZ1ZuVmxMbTl3ZEdsdmJuTmJkSGx3WlNBcklDZHpKMTBnUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHVJQ0I5S1R0Y2JseHVJQ0F2THlCMGFHbHpJR2x6SUhWelpXUWdkRzhnYVdSbGJuUnBabmtnZEdobElGd2lZbUZ6WlZ3aUlHTnZibk4wY25WamRHOXlJSFJ2SUdWNGRHVnVaQ0JoYkd3Z2NHeGhhVzR0YjJKcVpXTjBYRzRnSUM4dklHTnZiWEJ2Ym1WdWRITWdkMmwwYUNCcGJpQlhaV1Y0SjNNZ2JYVnNkR2t0YVc1emRHRnVZMlVnYzJObGJtRnlhVzl6TGx4dUlDQldkV1V1YjNCMGFXOXVjeTVmWW1GelpTQTlJRloxWlR0Y2JseHVJQ0JsZUhSbGJtUW9WblZsTG05d2RHbHZibk11WTI5dGNHOXVaVzUwY3l3Z1luVnBiSFJKYmtOdmJYQnZibVZ1ZEhNcE8xeHVYRzRnSUdsdWFYUlZjMlVvVm5WbEtUdGNiaUFnYVc1cGRFMXBlR2x1SkRFb1ZuVmxLVHRjYmlBZ2FXNXBkRVY0ZEdWdVpDaFdkV1VwTzF4dUlDQnBibWwwUVhOelpYUlNaV2RwYzNSbGNuTW9WblZsS1R0Y2JuMWNibHh1YVc1cGRFZHNiMkpoYkVGUVNTaFdkV1VrTXlrN1hHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoV2RXVWtNeTV3Y205MGIzUjVjR1VzSUNja2FYTlRaWEoyWlhJbkxDQjdYRzRnSUdkbGREb2dhWE5UWlhKMlpYSlNaVzVrWlhKcGJtZGNibjBwTzF4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVm5WbEpETXVjSEp2ZEc5MGVYQmxMQ0FuSkhOemNrTnZiblJsZUhRbkxDQjdYRzRnSUdkbGREb2dablZ1WTNScGIyNGdaMlYwSUNncElIdGNiaUFnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2JtVjRkQ0FxTDF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGlSMmJtOWtaU0FtSmlCMGFHbHpMaVIyYm05a1pTNXpjM0pEYjI1MFpYaDBYRzRnSUgxY2JuMHBPMXh1WEc1V2RXVWtNeTUyWlhKemFXOXVJRDBnSnpJdU5TNHhNeWM3WEc1Y2JpOHFJQ0FxTDF4dVhHNHZMeUIwYUdWelpTQmhjbVVnY21WelpYSjJaV1FnWm05eUlIZGxZaUJpWldOaGRYTmxJSFJvWlhrZ1lYSmxJR1JwY21WamRHeDVJR052YlhCcGJHVmtJR0YzWVhsY2JpOHZJR1IxY21sdVp5QjBaVzF3YkdGMFpTQmpiMjF3YVd4aGRHbHZibHh1ZG1GeUlHbHpVbVZ6WlhKMlpXUkJkSFJ5SUQwZ2JXRnJaVTFoY0NnbmMzUjViR1VzWTJ4aGMzTW5LVHRjYmx4dUx5OGdZWFIwY21saWRYUmxjeUIwYUdGMElITm9iM1ZzWkNCaVpTQjFjMmx1WnlCd2NtOXdjeUJtYjNJZ1ltbHVaR2x1WjF4dWRtRnlJR0ZqWTJWd2RGWmhiSFZsSUQwZ2JXRnJaVTFoY0NnbmFXNXdkWFFzZEdWNGRHRnlaV0VzYjNCMGFXOXVMSE5sYkdWamRDeHdjbTluY21WemN5Y3BPMXh1ZG1GeUlHMTFjM1JWYzJWUWNtOXdJRDBnWm5WdVkzUnBiMjRnS0hSaFp5d2dkSGx3WlN3Z1lYUjBjaWtnZTF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUNoaGRIUnlJRDA5UFNBbmRtRnNkV1VuSUNZbUlHRmpZMlZ3ZEZaaGJIVmxLSFJoWnlrcElDWW1JSFI1Y0dVZ0lUMDlJQ2RpZFhSMGIyNG5JSHg4WEc0Z0lDQWdLR0YwZEhJZ1BUMDlJQ2R6Wld4bFkzUmxaQ2NnSmlZZ2RHRm5JRDA5UFNBbmIzQjBhVzl1SnlrZ2ZIeGNiaUFnSUNBb1lYUjBjaUE5UFQwZ0oyTm9aV05yWldRbklDWW1JSFJoWnlBOVBUMGdKMmx1Y0hWMEp5a2dmSHhjYmlBZ0lDQW9ZWFIwY2lBOVBUMGdKMjExZEdWa0p5QW1KaUIwWVdjZ1BUMDlJQ2QyYVdSbGJ5Y3BYRzRnSUNsY2JuMDdYRzVjYm5aaGNpQnBjMFZ1ZFcxbGNtRjBaV1JCZEhSeUlEMGdiV0ZyWlUxaGNDZ25ZMjl1ZEdWdWRHVmthWFJoWW14bExHUnlZV2RuWVdKc1pTeHpjR1ZzYkdOb1pXTnJKeWs3WEc1Y2JuWmhjaUJwYzBKdmIyeGxZVzVCZEhSeUlEMGdiV0ZyWlUxaGNDaGNiaUFnSjJGc2JHOTNablZzYkhOamNtVmxiaXhoYzNsdVl5eGhkWFJ2Wm05amRYTXNZWFYwYjNCc1lYa3NZMmhsWTJ0bFpDeGpiMjF3WVdOMExHTnZiblJ5YjJ4ekxHUmxZMnhoY21Vc0p5QXJYRzRnSUNka1pXWmhkV3gwTEdSbFptRjFiSFJqYUdWamEyVmtMR1JsWm1GMWJIUnRkWFJsWkN4a1pXWmhkV3gwYzJWc1pXTjBaV1FzWkdWbVpYSXNaR2x6WVdKc1pXUXNKeUFyWEc0Z0lDZGxibUZpYkdWa0xHWnZjbTF1YjNaaGJHbGtZWFJsTEdocFpHUmxiaXhwYm1SbGRHVnliV2x1WVhSbExHbHVaWEowTEdsemJXRndMR2wwWlcxelkyOXdaU3hzYjI5d0xHMTFiSFJwY0d4bExDY2dLMXh1SUNBbmJYVjBaV1FzYm05b2NtVm1MRzV2Y21WemFYcGxMRzV2YzJoaFpHVXNibTkyWVd4cFpHRjBaU3h1YjNkeVlYQXNiM0JsYml4d1lYVnpaVzl1WlhocGRDeHlaV0ZrYjI1c2VTd25JQ3RjYmlBZ0ozSmxjWFZwY21Wa0xISmxkbVZ5YzJWa0xITmpiM0JsWkN4elpXRnRiR1Z6Y3l4elpXeGxZM1JsWkN4emIzSjBZV0pzWlN4MGNtRnVjMnhoZEdVc0p5QXJYRzRnSUNkMGNuVmxjM0JsWldRc2RIbHdaVzExYzNSdFlYUmphQ3gyYVhOcFlteGxKMXh1S1R0Y2JseHVkbUZ5SUhoc2FXNXJUbE1nUFNBbmFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1UazVPUzk0YkdsdWF5YzdYRzVjYm5aaGNpQnBjMWhzYVc1cklEMGdablZ1WTNScGIyNGdLRzVoYldVcElIdGNiaUFnY21WMGRYSnVJRzVoYldVdVkyaGhja0YwS0RVcElEMDlQU0FuT2ljZ0ppWWdibUZ0WlM1emJHbGpaU2d3TENBMUtTQTlQVDBnSjNoc2FXNXJKMXh1ZlR0Y2JseHVkbUZ5SUdkbGRGaHNhVzVyVUhKdmNDQTlJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdYRzRnSUhKbGRIVnliaUJwYzFoc2FXNXJLRzVoYldVcElEOGdibUZ0WlM1emJHbGpaU2cyTENCdVlXMWxMbXhsYm1kMGFDa2dPaUFuSjF4dWZUdGNibHh1ZG1GeUlHbHpSbUZzYzNsQmRIUnlWbUZzZFdVZ1BTQm1kVzVqZEdsdmJpQW9kbUZzS1NCN1hHNGdJSEpsZEhWeWJpQjJZV3dnUFQwZ2JuVnNiQ0I4ZkNCMllXd2dQVDA5SUdaaGJITmxYRzU5TzF4dVhHNHZLaUFnS2k5Y2JseHVablZ1WTNScGIyNGdaMlZ1UTJ4aGMzTkdiM0pXYm05a1pTQW9kbTV2WkdVcElIdGNiaUFnZG1GeUlHUmhkR0VnUFNCMmJtOWtaUzVrWVhSaE8xeHVJQ0IyWVhJZ2NHRnlaVzUwVG05a1pTQTlJSFp1YjJSbE8xeHVJQ0IyWVhJZ1kyaHBiR1JPYjJSbElEMGdkbTV2WkdVN1hHNGdJSGRvYVd4bElDaHBjMFJsWmloamFHbHNaRTV2WkdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVcEtTQjdYRzRnSUNBZ1kyaHBiR1JPYjJSbElEMGdZMmhwYkdST2IyUmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxMbDkyYm05a1pUdGNiaUFnSUNCcFppQW9ZMmhwYkdST2IyUmxJQ1ltSUdOb2FXeGtUbTlrWlM1a1lYUmhLU0I3WEc0Z0lDQWdJQ0JrWVhSaElEMGdiV1Z5WjJWRGJHRnpjMFJoZEdFb1kyaHBiR1JPYjJSbExtUmhkR0VzSUdSaGRHRXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQjNhR2xzWlNBb2FYTkVaV1lvY0dGeVpXNTBUbTlrWlNBOUlIQmhjbVZ1ZEU1dlpHVXVjR0Z5Wlc1MEtTa2dlMXh1SUNBZ0lHbG1JQ2h3WVhKbGJuUk9iMlJsSUNZbUlIQmhjbVZ1ZEU1dlpHVXVaR0YwWVNrZ2UxeHVJQ0FnSUNBZ1pHRjBZU0E5SUcxbGNtZGxRMnhoYzNORVlYUmhLR1JoZEdFc0lIQmhjbVZ1ZEU1dlpHVXVaR0YwWVNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ5Wlc1a1pYSkRiR0Z6Y3loa1lYUmhMbk4wWVhScFkwTnNZWE56TENCa1lYUmhMbU5zWVhOektWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFpYSm5aVU5zWVhOelJHRjBZU0FvWTJocGJHUXNJSEJoY21WdWRDa2dlMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSE4wWVhScFkwTnNZWE56T2lCamIyNWpZWFFvWTJocGJHUXVjM1JoZEdsalEyeGhjM01zSUhCaGNtVnVkQzV6ZEdGMGFXTkRiR0Z6Y3lrc1hHNGdJQ0FnWTJ4aGMzTTZJR2x6UkdWbUtHTm9hV3hrTG1Oc1lYTnpLVnh1SUNBZ0lDQWdQeUJiWTJocGJHUXVZMnhoYzNNc0lIQmhjbVZ1ZEM1amJHRnpjMTFjYmlBZ0lDQWdJRG9nY0dGeVpXNTBMbU5zWVhOelhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ1WkdWeVEyeGhjM01nS0Z4dUlDQnpkR0YwYVdORGJHRnpjeXhjYmlBZ1pIbHVZVzFwWTBOc1lYTnpYRzRwSUh0Y2JpQWdhV1lnS0dselJHVm1LSE4wWVhScFkwTnNZWE56S1NCOGZDQnBjMFJsWmloa2VXNWhiV2xqUTJ4aGMzTXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHTnZibU5oZENoemRHRjBhV05EYkdGemN5d2djM1J5YVc1bmFXWjVRMnhoYzNNb1pIbHVZVzFwWTBOc1lYTnpLU2xjYmlBZ2ZWeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNCeVpYUjFjbTRnSnlkY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTI5dVkyRjBJQ2hoTENCaUtTQjdYRzRnSUhKbGRIVnliaUJoSUQ4Z1lpQS9JQ2hoSUNzZ0p5QW5JQ3NnWWlrZ09pQmhJRG9nS0dJZ2ZId2dKeWNwWEc1OVhHNWNibVoxYm1OMGFXOXVJSE4wY21sdVoybG1lVU5zWVhOeklDaDJZV3gxWlNrZ2UxeHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gyWVd4MVpTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2MzUnlhVzVuYVdaNVFYSnlZWGtvZG1Gc2RXVXBYRzRnSUgxY2JpQWdhV1lnS0dselQySnFaV04wS0haaGJIVmxLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnpkSEpwYm1kcFpubFBZbXBsWTNRb2RtRnNkV1VwWEc0Z0lIMWNiaUFnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVmNiaUFnZlZ4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdibVY0ZENBcUwxeHVJQ0J5WlhSMWNtNGdKeWRjYm4xY2JseHVablZ1WTNScGIyNGdjM1J5YVc1bmFXWjVRWEp5WVhrZ0tIWmhiSFZsS1NCN1hHNGdJSFpoY2lCeVpYTWdQU0FuSnp0Y2JpQWdkbUZ5SUhOMGNtbHVaMmxtYVdWa08xeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diQ0E5SUhaaGJIVmxMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJR2xtSUNocGMwUmxaaWh6ZEhKcGJtZHBabWxsWkNBOUlITjBjbWx1WjJsbWVVTnNZWE56S0haaGJIVmxXMmxkS1NrZ0ppWWdjM1J5YVc1bmFXWnBaV1FnSVQwOUlDY25LU0I3WEc0Z0lDQWdJQ0JwWmlBb2NtVnpLU0I3SUhKbGN5QXJQU0FuSUNjN0lIMWNiaUFnSUNBZ0lISmxjeUFyUFNCemRISnBibWRwWm1sbFpEdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMxeHVmVnh1WEc1bWRXNWpkR2x2YmlCemRISnBibWRwWm5sUFltcGxZM1FnS0haaGJIVmxLU0I3WEc0Z0lIWmhjaUJ5WlhNZ1BTQW5KenRjYmlBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUhaaGJIVmxLU0I3WEc0Z0lDQWdhV1lnS0haaGJIVmxXMnRsZVYwcElIdGNiaUFnSUNBZ0lHbG1JQ2h5WlhNcElIc2djbVZ6SUNzOUlDY2dKenNnZlZ4dUlDQWdJQ0FnY21WeklDczlJR3RsZVR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsYzF4dWZWeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlHNWhiV1Z6Y0dGalpVMWhjQ0E5SUh0Y2JpQWdjM1puT2lBbmFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jbkxGeHVJQ0J0WVhSb09pQW5hSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNVGs1T0M5TllYUm9MMDFoZEdoTlRDZGNibjA3WEc1Y2JuWmhjaUJwYzBoVVRVeFVZV2NnUFNCdFlXdGxUV0Z3S0Z4dUlDQW5hSFJ0YkN4aWIyUjVMR0poYzJVc2FHVmhaQ3hzYVc1ckxHMWxkR0VzYzNSNWJHVXNkR2wwYkdVc0p5QXJYRzRnSUNkaFpHUnlaWE56TEdGeWRHbGpiR1VzWVhOcFpHVXNabTl2ZEdWeUxHaGxZV1JsY2l4b01TeG9NaXhvTXl4b05DeG9OU3hvTml4b1ozSnZkWEFzYm1GMkxITmxZM1JwYjI0c0p5QXJYRzRnSUNka2FYWXNaR1FzWkd3c1pIUXNabWxuWTJGd2RHbHZiaXhtYVdkMWNtVXNjR2xqZEhWeVpTeG9jaXhwYldjc2JHa3NiV0ZwYml4dmJDeHdMSEJ5WlN4MWJDd25JQ3RjYmlBZ0oyRXNZaXhoWW1KeUxHSmthU3hpWkc4c1luSXNZMmwwWlN4amIyUmxMR1JoZEdFc1pHWnVMR1Z0TEdrc2EySmtMRzFoY21zc2NTeHljQ3h5ZEN4eWRHTXNjblZpZVN3bklDdGNiaUFnSjNNc2MyRnRjQ3h6YldGc2JDeHpjR0Z1TEhOMGNtOXVaeXh6ZFdJc2MzVndMSFJwYldVc2RTeDJZWElzZDJKeUxHRnlaV0VzWVhWa2FXOHNiV0Z3TEhSeVlXTnJMSFpwWkdWdkxDY2dLMXh1SUNBblpXMWlaV1FzYjJKcVpXTjBMSEJoY21GdExITnZkWEpqWlN4allXNTJZWE1zYzJOeWFYQjBMRzV2YzJOeWFYQjBMR1JsYkN4cGJuTXNKeUFyWEc0Z0lDZGpZWEIwYVc5dUxHTnZiQ3hqYjJ4bmNtOTFjQ3gwWVdKc1pTeDBhR1ZoWkN4MFltOWtlU3gwWkN4MGFDeDBjaXduSUN0Y2JpQWdKMkoxZEhSdmJpeGtZWFJoYkdsemRDeG1hV1ZzWkhObGRDeG1iM0p0TEdsdWNIVjBMR3hoWW1Wc0xHeGxaMlZ1WkN4dFpYUmxjaXh2Y0hSbmNtOTFjQ3h2Y0hScGIyNHNKeUFyWEc0Z0lDZHZkWFJ3ZFhRc2NISnZaM0psYzNNc2MyVnNaV04wTEhSbGVIUmhjbVZoTENjZ0sxeHVJQ0FuWkdWMFlXbHNjeXhrYVdGc2IyY3NiV1Z1ZFN4dFpXNTFhWFJsYlN4emRXMXRZWEo1TENjZ0sxeHVJQ0FuWTI5dWRHVnVkQ3hsYkdWdFpXNTBMSE5vWVdSdmR5eDBaVzF3YkdGMFpTeGliRzlqYTNGMWIzUmxMR2xtY21GdFpTeDBabTl2ZENkY2JpazdYRzVjYmk4dklIUm9hWE1nYldGd0lHbHpJR2x1ZEdWdWRHbHZibUZzYkhrZ2MyVnNaV04wYVhabExDQnZibXg1SUdOdmRtVnlhVzVuSUZOV1J5QmxiR1Z0Wlc1MGN5QjBhR0YwSUcxaGVWeHVMeThnWTI5dWRHRnBiaUJqYUdsc1pDQmxiR1Z0Wlc1MGN5NWNiblpoY2lCcGMxTldSeUE5SUcxaGEyVk5ZWEFvWEc0Z0lDZHpkbWNzWVc1cGJXRjBaU3hqYVhKamJHVXNZMnhwY0hCaGRHZ3NZM1Z5YzI5eUxHUmxabk1zWkdWell5eGxiR3hwY0hObExHWnBiSFJsY2l4bWIyNTBMV1poWTJVc0p5QXJYRzRnSUNkbWIzSmxhV2R1VDJKcVpXTjBMR2NzWjJ4NWNHZ3NhVzFoWjJVc2JHbHVaU3h0WVhKclpYSXNiV0Z6YXl4dGFYTnphVzVuTFdkc2VYQm9MSEJoZEdnc2NHRjBkR1Z5Yml3bklDdGNiaUFnSjNCdmJIbG5iMjRzY0c5c2VXeHBibVVzY21WamRDeHpkMmwwWTJnc2MzbHRZbTlzTEhSbGVIUXNkR1Y0ZEhCaGRHZ3NkSE53WVc0c2RYTmxMSFpwWlhjbkxGeHVJQ0IwY25WbFhHNHBPMXh1WEc1Y2JseHVkbUZ5SUdselVtVnpaWEoyWldSVVlXY2dQU0JtZFc1amRHbHZiaUFvZEdGbktTQjdYRzRnSUhKbGRIVnliaUJwYzBoVVRVeFVZV2NvZEdGbktTQjhmQ0JwYzFOV1J5aDBZV2NwWEc1OU8xeHVYRzVtZFc1amRHbHZiaUJuWlhSVVlXZE9ZVzFsYzNCaFkyVWdLSFJoWnlrZ2UxeHVJQ0JwWmlBb2FYTlRWa2NvZEdGbktTa2dlMXh1SUNBZ0lISmxkSFZ5YmlBbmMzWm5KMXh1SUNCOVhHNGdJQzh2SUdKaGMybGpJSE4xY0hCdmNuUWdabTl5SUUxaGRHaE5URnh1SUNBdkx5QnViM1JsSUdsMElHUnZaWE51SjNRZ2MzVndjRzl5ZENCdmRHaGxjaUJOWVhSb1RVd2daV3hsYldWdWRITWdZbVZwYm1jZ1kyOXRjRzl1Wlc1MElISnZiM1J6WEc0Z0lHbG1JQ2gwWVdjZ1BUMDlJQ2R0WVhSb0p5a2dlMXh1SUNBZ0lISmxkSFZ5YmlBbmJXRjBhQ2RjYmlBZ2ZWeHVmVnh1WEc1MllYSWdkVzVyYm05M2JrVnNaVzFsYm5SRFlXTm9aU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrN1hHNW1kVzVqZEdsdmJpQnBjMVZ1YTI1dmQyNUZiR1Z0Wlc1MElDaDBZV2NwSUh0Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJR2xtSUNnaGFXNUNjbTkzYzJWeUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVmNiaUFnZlZ4dUlDQnBaaUFvYVhOU1pYTmxjblpsWkZSaFp5aDBZV2NwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJSDFjYmlBZ2RHRm5JRDBnZEdGbkxuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQnBaaUFvZFc1cmJtOTNia1ZzWlcxbGJuUkRZV05vWlZ0MFlXZGRJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RXNXJibTkzYmtWc1pXMWxiblJEWVdOb1pWdDBZV2RkWEc0Z0lIMWNiaUFnZG1GeUlHVnNJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaDBZV2NwTzF4dUlDQnBaaUFvZEdGbkxtbHVaR1Y0VDJZb0p5MG5LU0ErSUMweEtTQjdYRzRnSUNBZ0x5OGdhSFIwY0RvdkwzTjBZV05yYjNabGNtWnNiM2N1WTI5dEwyRXZNamd5TVRBek5qUXZNVEEzTURJME5GeHVJQ0FnSUhKbGRIVnliaUFvZFc1cmJtOTNia1ZzWlcxbGJuUkRZV05vWlZ0MFlXZGRJRDBnS0Z4dUlDQWdJQ0FnWld3dVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUhkcGJtUnZkeTVJVkUxTVZXNXJibTkzYmtWc1pXMWxiblFnZkh4Y2JpQWdJQ0FnSUdWc0xtTnZibk4wY25WamRHOXlJRDA5UFNCM2FXNWtiM2N1U0ZSTlRFVnNaVzFsYm5SY2JpQWdJQ0FwS1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUFvZFc1cmJtOTNia1ZzWlcxbGJuUkRZV05vWlZ0MFlXZGRJRDBnTDBoVVRVeFZibXR1YjNkdVJXeGxiV1Z1ZEM4dWRHVnpkQ2hsYkM1MGIxTjBjbWx1WnlncEtTbGNiaUFnZlZ4dWZWeHVYRzUyWVhJZ2FYTlVaWGgwU1c1d2RYUlVlWEJsSUQwZ2JXRnJaVTFoY0NnbmRHVjRkQ3h1ZFcxaVpYSXNjR0Z6YzNkdmNtUXNjMlZoY21Ob0xHVnRZV2xzTEhSbGJDeDFjbXduS1R0Y2JseHVMeW9nSUNvdlhHNWNiaThxS2x4dUlDb2dVWFZsY25rZ1lXNGdaV3hsYldWdWRDQnpaV3hsWTNSdmNpQnBaaUJwZENkeklHNXZkQ0JoYmlCbGJHVnRaVzUwSUdGc2NtVmhaSGt1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSEYxWlhKNUlDaGxiQ2tnZTF4dUlDQnBaaUFvZEhsd1pXOW1JR1ZzSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lIWmhjaUJ6Wld4bFkzUmxaQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9aV3dwTzF4dUlDQWdJR2xtSUNnaGMyVnNaV04wWldRcElIdGNiaUFnSUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dKaVlnZDJGeWJpaGNiaUFnSUNBZ0lDQWdKME5oYm01dmRDQm1hVzVrSUdWc1pXMWxiblE2SUNjZ0t5QmxiRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nka2FYWW5LVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYzJWc1pXTjBaV1JjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaV3hjYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsUld4bGJXVnVkQ1F4SUNoMFlXZE9ZVzFsTENCMmJtOWtaU2tnZTF4dUlDQjJZWElnWld4dElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoMFlXZE9ZVzFsS1R0Y2JpQWdhV1lnS0hSaFowNWhiV1VnSVQwOUlDZHpaV3hsWTNRbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWc2JWeHVJQ0I5WEc0Z0lDOHZJR1poYkhObElHOXlJRzUxYkd3Z2QybHNiQ0J5WlcxdmRtVWdkR2hsSUdGMGRISnBZblYwWlNCaWRYUWdkVzVrWldacGJtVmtJSGRwYkd3Z2JtOTBYRzRnSUdsbUlDaDJibTlrWlM1a1lYUmhJQ1ltSUhadWIyUmxMbVJoZEdFdVlYUjBjbk1nSmlZZ2RtNXZaR1V1WkdGMFlTNWhkSFJ5Y3k1dGRXeDBhWEJzWlNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdaV3h0TG5ObGRFRjBkSEpwWW5WMFpTZ25iWFZzZEdsd2JHVW5MQ0FuYlhWc2RHbHdiR1VuS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnWld4dFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVVZzWlcxbGJuUk9VeUFvYm1GdFpYTndZV05sTENCMFlXZE9ZVzFsS1NCN1hHNGdJSEpsZEhWeWJpQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwVGxNb2JtRnRaWE53WVdObFRXRndXMjVoYldWemNHRmpaVjBzSUhSaFowNWhiV1VwWEc1OVhHNWNibVoxYm1OMGFXOXVJR055WldGMFpWUmxlSFJPYjJSbElDaDBaWGgwS1NCN1hHNGdJSEpsZEhWeWJpQmtiMk4xYldWdWRDNWpjbVZoZEdWVVpYaDBUbTlrWlNoMFpYaDBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRGIyMXRaVzUwSUNoMFpYaDBLU0I3WEc0Z0lISmxkSFZ5YmlCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZEYjIxdFpXNTBLSFJsZUhRcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdsdWMyVnlkRUpsWm05eVpTQW9jR0Z5Wlc1MFRtOWtaU3dnYm1WM1RtOWtaU3dnY21WbVpYSmxibU5sVG05a1pTa2dlMXh1SUNCd1lYSmxiblJPYjJSbExtbHVjMlZ5ZEVKbFptOXlaU2h1WlhkT2IyUmxMQ0J5WldabGNtVnVZMlZPYjJSbEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVnRiM1psUTJocGJHUWdLRzV2WkdVc0lHTm9hV3hrS1NCN1hHNGdJRzV2WkdVdWNtVnRiM1psUTJocGJHUW9ZMmhwYkdRcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaGNIQmxibVJEYUdsc1pDQW9ibTlrWlN3Z1kyaHBiR1FwSUh0Y2JpQWdibTlrWlM1aGNIQmxibVJEYUdsc1pDaGphR2xzWkNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhCaGNtVnVkRTV2WkdVZ0tHNXZaR1VwSUh0Y2JpQWdjbVYwZFhKdUlHNXZaR1V1Y0dGeVpXNTBUbTlrWlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ1WlhoMFUybGliR2x1WnlBb2JtOWtaU2tnZTF4dUlDQnlaWFIxY200Z2JtOWtaUzV1WlhoMFUybGliR2x1WjF4dWZWeHVYRzVtZFc1amRHbHZiaUIwWVdkT1lXMWxJQ2h1YjJSbEtTQjdYRzRnSUhKbGRIVnliaUJ1YjJSbExuUmhaMDVoYldWY2JuMWNibHh1Wm5WdVkzUnBiMjRnYzJWMFZHVjRkRU52Ym5SbGJuUWdLRzV2WkdVc0lIUmxlSFFwSUh0Y2JpQWdibTlrWlM1MFpYaDBRMjl1ZEdWdWRDQTlJSFJsZUhRN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhObGRFRjBkSEpwWW5WMFpTQW9ibTlrWlN3Z2EyVjVMQ0IyWVd3cElIdGNiaUFnYm05a1pTNXpaWFJCZEhSeWFXSjFkR1VvYTJWNUxDQjJZV3dwTzF4dWZWeHVYRzVjYm5aaGNpQnViMlJsVDNCeklEMGdUMkpxWldOMExtWnlaV1Y2WlNoN1hHNWNkR055WldGMFpVVnNaVzFsYm5RNklHTnlaV0YwWlVWc1pXMWxiblFrTVN4Y2JseDBZM0psWVhSbFJXeGxiV1Z1ZEU1VE9pQmpjbVZoZEdWRmJHVnRaVzUwVGxNc1hHNWNkR055WldGMFpWUmxlSFJPYjJSbE9pQmpjbVZoZEdWVVpYaDBUbTlrWlN4Y2JseDBZM0psWVhSbFEyOXRiV1Z1ZERvZ1kzSmxZWFJsUTI5dGJXVnVkQ3hjYmx4MGFXNXpaWEowUW1WbWIzSmxPaUJwYm5ObGNuUkNaV1p2Y21Vc1hHNWNkSEpsYlc5MlpVTm9hV3hrT2lCeVpXMXZkbVZEYUdsc1pDeGNibHgwWVhCd1pXNWtRMmhwYkdRNklHRndjR1Z1WkVOb2FXeGtMRnh1WEhSd1lYSmxiblJPYjJSbE9pQndZWEpsYm5ST2IyUmxMRnh1WEhSdVpYaDBVMmxpYkdsdVp6b2dibVY0ZEZOcFlteHBibWNzWEc1Y2RIUmhaMDVoYldVNklIUmhaMDVoYldVc1hHNWNkSE5sZEZSbGVIUkRiMjUwWlc1ME9pQnpaWFJVWlhoMFEyOXVkR1Z1ZEN4Y2JseDBjMlYwUVhSMGNtbGlkWFJsT2lCelpYUkJkSFJ5YVdKMWRHVmNibjBwTzF4dVhHNHZLaUFnS2k5Y2JseHVkbUZ5SUhKbFppQTlJSHRjYmlBZ1kzSmxZWFJsT2lCbWRXNWpkR2x2YmlCamNtVmhkR1VnS0Y4c0lIWnViMlJsS1NCN1hHNGdJQ0FnY21WbmFYTjBaWEpTWldZb2RtNXZaR1VwTzF4dUlDQjlMRnh1SUNCMWNHUmhkR1U2SUdaMWJtTjBhVzl1SUhWd1pHRjBaU0FvYjJ4a1ZtNXZaR1VzSUhadWIyUmxLU0I3WEc0Z0lDQWdhV1lnS0c5c1pGWnViMlJsTG1SaGRHRXVjbVZtSUNFOVBTQjJibTlrWlM1a1lYUmhMbkpsWmlrZ2UxeHVJQ0FnSUNBZ2NtVm5hWE4wWlhKU1pXWW9iMnhrVm01dlpHVXNJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ2NtVm5hWE4wWlhKU1pXWW9kbTV2WkdVcE8xeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ1pHVnpkSEp2ZVRvZ1puVnVZM1JwYjI0Z1pHVnpkSEp2ZVNBb2RtNXZaR1VwSUh0Y2JpQWdJQ0J5WldkcGMzUmxjbEpsWmloMmJtOWtaU3dnZEhKMVpTazdYRzRnSUgxY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhKbFoybHpkR1Z5VW1WbUlDaDJibTlrWlN3Z2FYTlNaVzF2ZG1Gc0tTQjdYRzRnSUhaaGNpQnJaWGtnUFNCMmJtOWtaUzVrWVhSaExuSmxaanRjYmlBZ2FXWWdLQ0ZyWlhrcElIc2djbVYwZFhKdUlIMWNibHh1SUNCMllYSWdkbTBnUFNCMmJtOWtaUzVqYjI1MFpYaDBPMXh1SUNCMllYSWdjbVZtSUQwZ2RtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlVnZkh3Z2RtNXZaR1V1Wld4dE8xeHVJQ0IyWVhJZ2NtVm1jeUE5SUhadExpUnlaV1p6TzF4dUlDQnBaaUFvYVhOU1pXMXZkbUZzS1NCN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvY21WbWMxdHJaWGxkS1NrZ2UxeHVJQ0FnSUNBZ2NtVnRiM1psS0hKbFpuTmJhMlY1WFN3Z2NtVm1LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsWm5OYmEyVjVYU0E5UFQwZ2NtVm1LU0I3WEc0Z0lDQWdJQ0J5WldaelcydGxlVjBnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaDJibTlrWlM1a1lYUmhMbkpsWmtsdVJtOXlLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvY21WbWMxdHJaWGxkS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaV1p6VzJ0bGVWMGdQU0JiY21WbVhUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZtYzF0clpYbGRMbWx1WkdWNFQyWW9jbVZtS1NBOElEQXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z0pHWnNiM2N0WkdsellXSnNaUzFzYVc1bFhHNGdJQ0FnSUNBZ0lISmxabk5iYTJWNVhTNXdkWE5vS0hKbFppazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbFpuTmJhMlY1WFNBOUlISmxaanRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJXYVhKMGRXRnNJRVJQVFNCd1lYUmphR2x1WnlCaGJHZHZjbWwwYUcwZ1ltRnpaV1FnYjI0Z1UyNWhZbUprYjIwZ1lubGNiaUFxSUZOcGJXOXVJRVp5YVdseklGWnBibVIxYlNBb1FIQmhiR1JsY0dsdVpDbGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdUR2xqWlc1elpWeHVJQ29nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNCaGJHUmxjR2x1WkM5emJtRmlZbVJ2YlM5aWJHOWlMMjFoYzNSbGNpOU1TVU5GVGxORlhHNGdLbHh1SUNvZ2JXOWthV1pwWldRZ1lua2dSWFpoYmlCWmIzVWdLRUI1ZVhnNU9UQTRNRE1wWEc0Z0tseHVJQ29nVG05MElIUjVjR1V0WTJobFkydHBibWNnZEdocGN5QmlaV05oZFhObElIUm9hWE1nWm1sc1pTQnBjeUJ3WlhKbUxXTnlhWFJwWTJGc0lHRnVaQ0IwYUdVZ1kyOXpkRnh1SUNvZ2IyWWdiV0ZyYVc1bklHWnNiM2NnZFc1a1pYSnpkR0Z1WkNCcGRDQnBjeUJ1YjNRZ2QyOXlkR2dnYVhRdVhHNGdLaTljYmx4dWRtRnlJR1Z0Y0hSNVRtOWtaU0E5SUc1bGR5QldUbTlrWlNnbkp5d2dlMzBzSUZ0ZEtUdGNibHh1ZG1GeUlHaHZiMnR6SUQwZ1d5ZGpjbVZoZEdVbkxDQW5ZV04wYVhaaGRHVW5MQ0FuZFhCa1lYUmxKeXdnSjNKbGJXOTJaU2NzSUNka1pYTjBjbTk1SjEwN1hHNWNibVoxYm1OMGFXOXVJSE5oYldWV2JtOWtaU0FvWVN3Z1lpa2dlMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJR0V1YTJWNUlEMDlQU0JpTG10bGVTQW1KaUFvWEc0Z0lDQWdJQ0FvWEc0Z0lDQWdJQ0FnSUdFdWRHRm5JRDA5UFNCaUxuUmhaeUFtSmx4dUlDQWdJQ0FnSUNCaExtbHpRMjl0YldWdWRDQTlQVDBnWWk1cGMwTnZiVzFsYm5RZ0ppWmNiaUFnSUNBZ0lDQWdhWE5FWldZb1lTNWtZWFJoS1NBOVBUMGdhWE5FWldZb1lpNWtZWFJoS1NBbUpseHVJQ0FnSUNBZ0lDQnpZVzFsU1c1d2RYUlVlWEJsS0dFc0lHSXBYRzRnSUNBZ0lDQXBJSHg4SUNoY2JpQWdJQ0FnSUNBZ2FYTlVjblZsS0dFdWFYTkJjM2x1WTFCc1lXTmxhRzlzWkdWeUtTQW1KbHh1SUNBZ0lDQWdJQ0JoTG1GemVXNWpSbUZqZEc5eWVTQTlQVDBnWWk1aGMzbHVZMFpoWTNSdmNua2dKaVpjYmlBZ0lDQWdJQ0FnYVhOVmJtUmxaaWhpTG1GemVXNWpSbUZqZEc5eWVTNWxjbkp2Y2lsY2JpQWdJQ0FnSUNsY2JpQWdJQ0FwWEc0Z0lDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2MyRnRaVWx1Y0hWMFZIbHdaU0FvWVN3Z1lpa2dlMXh1SUNCcFppQW9ZUzUwWVdjZ0lUMDlJQ2RwYm5CMWRDY3BJSHNnY21WMGRYSnVJSFJ5ZFdVZ2ZWeHVJQ0IyWVhJZ2FUdGNiaUFnZG1GeUlIUjVjR1ZCSUQwZ2FYTkVaV1lvYVNBOUlHRXVaR0YwWVNrZ0ppWWdhWE5FWldZb2FTQTlJR2t1WVhSMGNuTXBJQ1ltSUdrdWRIbHdaVHRjYmlBZ2RtRnlJSFI1Y0dWQ0lEMGdhWE5FWldZb2FTQTlJR0l1WkdGMFlTa2dKaVlnYVhORVpXWW9hU0E5SUdrdVlYUjBjbk1wSUNZbUlHa3VkSGx3WlR0Y2JpQWdjbVYwZFhKdUlIUjVjR1ZCSUQwOVBTQjBlWEJsUWlCOGZDQnBjMVJsZUhSSmJuQjFkRlI1Y0dVb2RIbHdaVUVwSUNZbUlHbHpWR1Y0ZEVsdWNIVjBWSGx3WlNoMGVYQmxRaWxjYm4xY2JseHVablZ1WTNScGIyNGdZM0psWVhSbFMyVjVWRzlQYkdSSlpIZ2dLR05vYVd4a2NtVnVMQ0JpWldkcGJrbGtlQ3dnWlc1a1NXUjRLU0I3WEc0Z0lIWmhjaUJwTENCclpYazdYRzRnSUhaaGNpQnRZWEFnUFNCN2ZUdGNiaUFnWm05eUlDaHBJRDBnWW1WbmFXNUpaSGc3SUdrZ1BEMGdaVzVrU1dSNE95QXJLMmtwSUh0Y2JpQWdJQ0JyWlhrZ1BTQmphR2xzWkhKbGJsdHBYUzVyWlhrN1hHNGdJQ0FnYVdZZ0tHbHpSR1ZtS0d0bGVTa3BJSHNnYldGd1cydGxlVjBnUFNCcE95QjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlHMWhjRnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWUVlYUmphRVoxYm1OMGFXOXVJQ2hpWVdOclpXNWtLU0I3WEc0Z0lIWmhjaUJwTENCcU8xeHVJQ0IyWVhJZ1kySnpJRDBnZTMwN1hHNWNiaUFnZG1GeUlHMXZaSFZzWlhNZ1BTQmlZV05yWlc1a0xtMXZaSFZzWlhNN1hHNGdJSFpoY2lCdWIyUmxUM0J6SUQwZ1ltRmphMlZ1WkM1dWIyUmxUM0J6TzF4dVhHNGdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQm9iMjlyY3k1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lHTmljMXRvYjI5cmMxdHBYVjBnUFNCYlhUdGNiaUFnSUNCbWIzSWdLR29nUFNBd095QnFJRHdnYlc5a2RXeGxjeTVzWlc1bmRHZzdJQ3NyYWlrZ2UxeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHMXZaSFZzWlhOYmFsMWJhRzl2YTNOYmFWMWRLU2tnZTF4dUlDQWdJQ0FnSUNCalluTmJhRzl2YTNOYmFWMWRMbkIxYzJnb2JXOWtkV3hsYzF0cVhWdG9iMjlyYzF0cFhWMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR1Z0Y0hSNVRtOWtaVUYwSUNobGJHMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRlpPYjJSbEtHNXZaR1ZQY0hNdWRHRm5UbUZ0WlNobGJHMHBMblJ2VEc5M1pYSkRZWE5sS0Nrc0lIdDlMQ0JiWFN3Z2RXNWtaV1pwYm1Wa0xDQmxiRzBwWEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCamNtVmhkR1ZTYlVOaUlDaGphR2xzWkVWc2JTd2diR2x6ZEdWdVpYSnpLU0I3WEc0Z0lDQWdablZ1WTNScGIyNGdjbVZ0YjNabElDZ3BJSHRjYmlBZ0lDQWdJR2xtSUNndExYSmxiVzkyWlM1c2FYTjBaVzVsY25NZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnRiM1psVG05a1pTaGphR2xzWkVWc2JTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGJXOTJaUzVzYVhOMFpXNWxjbk1nUFNCc2FYTjBaVzVsY25NN1hHNGdJQ0FnY21WMGRYSnVJSEpsYlc5MlpWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjbVZ0YjNabFRtOWtaU0FvWld3cElIdGNiaUFnSUNCMllYSWdjR0Z5Wlc1MElEMGdibTlrWlU5d2N5NXdZWEpsYm5ST2IyUmxLR1ZzS1R0Y2JpQWdJQ0F2THlCbGJHVnRaVzUwSUcxaGVTQm9ZWFpsSUdGc2NtVmhaSGtnWW1WbGJpQnlaVzF2ZG1Wa0lHUjFaU0IwYnlCMkxXaDBiV3dnTHlCMkxYUmxlSFJjYmlBZ0lDQnBaaUFvYVhORVpXWW9jR0Z5Wlc1MEtTa2dlMXh1SUNBZ0lDQWdibTlrWlU5d2N5NXlaVzF2ZG1WRGFHbHNaQ2h3WVhKbGJuUXNJR1ZzS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCcGMxVnVhMjV2ZDI1RmJHVnRaVzUwSkNReElDaDJibTlrWlN3Z2FXNVdVSEpsS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJQ0ZwYmxaUWNtVWdKaVpjYmlBZ0lDQWdJQ0YyYm05a1pTNXVjeUFtSmx4dUlDQWdJQ0FnSVNoY2JpQWdJQ0FnSUNBZ1kyOXVabWxuTG1sbmJtOXlaV1JGYkdWdFpXNTBjeTVzWlc1bmRHZ2dKaVpjYmlBZ0lDQWdJQ0FnWTI5dVptbG5MbWxuYm05eVpXUkZiR1Z0Wlc1MGN5NXpiMjFsS0daMWJtTjBhVzl1SUNocFoyNXZjbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FYTlNaV2RGZUhBb2FXZHViM0psS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdQeUJwWjI1dmNtVXVkR1Z6ZENoMmJtOWtaUzUwWVdjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUdsbmJtOXlaU0E5UFQwZ2RtNXZaR1V1ZEdGblhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQXBJQ1ltWEc0Z0lDQWdJQ0JqYjI1bWFXY3VhWE5WYm10dWIzZHVSV3hsYldWdWRDaDJibTlrWlM1MFlXY3BYRzRnSUNBZ0tWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUdOeVpXRjBhVzVuUld4dFNXNVdVSEpsSUQwZ01EdGNiaUFnWm5WdVkzUnBiMjRnWTNKbFlYUmxSV3h0SUNoMmJtOWtaU3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsTENCd1lYSmxiblJGYkcwc0lISmxaa1ZzYlN3Z2JtVnpkR1ZrS1NCN1hHNGdJQ0FnZG01dlpHVXVhWE5TYjI5MFNXNXpaWEowSUQwZ0lXNWxjM1JsWkRzZ0x5OGdabTl5SUhSeVlXNXphWFJwYjI0Z1pXNTBaWElnWTJobFkydGNiaUFnSUNCcFppQW9ZM0psWVhSbFEyOXRjRzl1Wlc1MEtIWnViMlJsTENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVc0lIQmhjbVZ1ZEVWc2JTd2djbVZtUld4dEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHUmhkR0VnUFNCMmJtOWtaUzVrWVhSaE8xeHVJQ0FnSUhaaGNpQmphR2xzWkhKbGJpQTlJSFp1YjJSbExtTm9hV3hrY21WdU8xeHVJQ0FnSUhaaGNpQjBZV2NnUFNCMmJtOWtaUzUwWVdjN1hHNGdJQ0FnYVdZZ0tHbHpSR1ZtS0hSaFp5a3BJSHRjYmlBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhJQ1ltSUdSaGRHRXVjSEpsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZM0psWVhScGJtZEZiRzFKYmxaUWNtVXJLenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9hWE5WYm10dWIzZHVSV3hsYldWdWRDUWtNU2gyYm05a1pTd2dZM0psWVhScGJtZEZiRzFKYmxaUWNtVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFZibXR1YjNkdUlHTjFjM1J2YlNCbGJHVnRaVzUwT2lBOEp5QXJJSFJoWnlBcklDYytJQzBnWkdsa0lIbHZkU0FuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2R5WldkcGMzUmxjaUIwYUdVZ1kyOXRjRzl1Wlc1MElHTnZjbkpsWTNSc2VUOGdSbTl5SUhKbFkzVnljMmwyWlNCamIyMXdiMjVsYm5SekxDQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDZHRZV3RsSUhOMWNtVWdkRzhnY0hKdmRtbGtaU0IwYUdVZ1hDSnVZVzFsWENJZ2IzQjBhVzl1TGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyYm05a1pTNWpiMjUwWlhoMFhHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZG01dlpHVXVaV3h0SUQwZ2RtNXZaR1V1Ym5OY2JpQWdJQ0FnSUNBZ1B5QnViMlJsVDNCekxtTnlaV0YwWlVWc1pXMWxiblJPVXloMmJtOWtaUzV1Y3l3Z2RHRm5LVnh1SUNBZ0lDQWdJQ0E2SUc1dlpHVlBjSE11WTNKbFlYUmxSV3hsYldWdWRDaDBZV2NzSUhadWIyUmxLVHRjYmlBZ0lDQWdJSE5sZEZOamIzQmxLSFp1YjJSbEtUdGNibHh1SUNBZ0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lHTnlaV0YwWlVOb2FXeGtjbVZ1S0hadWIyUmxMQ0JqYUdsc1pISmxiaXdnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHUmhkR0VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhVzUyYjJ0bFEzSmxZWFJsU0c5dmEzTW9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVc1elpYSjBLSEJoY21WdWRFVnNiU3dnZG01dlpHVXVaV3h0TENCeVpXWkZiRzBwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCa1lYUmhJQ1ltSUdSaGRHRXVjSEpsS1NCN1hHNGdJQ0FnSUNBZ0lHTnlaV0YwYVc1blJXeHRTVzVXVUhKbExTMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBjMVJ5ZFdVb2RtNXZaR1V1YVhORGIyMXRaVzUwS1NrZ2UxeHVJQ0FnSUNBZ2RtNXZaR1V1Wld4dElEMGdibTlrWlU5d2N5NWpjbVZoZEdWRGIyMXRaVzUwS0hadWIyUmxMblJsZUhRcE8xeHVJQ0FnSUNBZ2FXNXpaWEowS0hCaGNtVnVkRVZzYlN3Z2RtNXZaR1V1Wld4dExDQnlaV1pGYkcwcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IyYm05a1pTNWxiRzBnUFNCdWIyUmxUM0J6TG1OeVpXRjBaVlJsZUhST2IyUmxLSFp1YjJSbExuUmxlSFFwTzF4dUlDQWdJQ0FnYVc1elpYSjBLSEJoY21WdWRFVnNiU3dnZG01dlpHVXVaV3h0TENCeVpXWkZiRzBwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdOeVpXRjBaVU52YlhCdmJtVnVkQ0FvZG01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU3dnY0dGeVpXNTBSV3h0TENCeVpXWkZiRzBwSUh0Y2JpQWdJQ0IyWVhJZ2FTQTlJSFp1YjJSbExtUmhkR0U3WEc0Z0lDQWdhV1lnS0dselJHVm1LR2twS1NCN1hHNGdJQ0FnSUNCMllYSWdhWE5TWldGamRHbDJZWFJsWkNBOUlHbHpSR1ZtS0hadWIyUmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxLU0FtSmlCcExtdGxaWEJCYkdsMlpUdGNiaUFnSUNBZ0lHbG1JQ2hwYzBSbFppaHBJRDBnYVM1b2IyOXJLU0FtSmlCcGMwUmxaaWhwSUQwZ2FTNXBibWwwS1NrZ2UxeHVJQ0FnSUNBZ0lDQnBLSFp1YjJSbExDQm1ZV3h6WlNBdktpQm9lV1J5WVhScGJtY2dLaThzSUhCaGNtVnVkRVZzYlN3Z2NtVm1SV3h0S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklHRm1kR1Z5SUdOaGJHeHBibWNnZEdobElHbHVhWFFnYUc5dmF5d2dhV1lnZEdobElIWnViMlJsSUdseklHRWdZMmhwYkdRZ1kyOXRjRzl1Wlc1MFhHNGdJQ0FnSUNBdkx5QnBkQ0J6YUc5MWJHUW5kbVVnWTNKbFlYUmxaQ0JoSUdOb2FXeGtJR2x1YzNSaGJtTmxJR0Z1WkNCdGIzVnVkR1ZrSUdsMExpQjBhR1VnWTJocGJHUmNiaUFnSUNBZ0lDOHZJR052YlhCdmJtVnVkQ0JoYkhOdklHaGhjeUJ6WlhRZ2RHaGxJSEJzWVdObGFHOXNaR1Z5SUhadWIyUmxKM01nWld4dExseHVJQ0FnSUNBZ0x5OGdhVzRnZEdoaGRDQmpZWE5sSUhkbElHTmhiaUJxZFhOMElISmxkSFZ5YmlCMGFHVWdaV3hsYldWdWRDQmhibVFnWW1VZ1pHOXVaUzVjYmlBZ0lDQWdJR2xtSUNocGMwUmxaaWgyYm05a1pTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpTa3BJSHRjYmlBZ0lDQWdJQ0FnYVc1cGRFTnZiWEJ2Ym1WdWRDaDJibTlrWlN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0dselZISjFaU2hwYzFKbFlXTjBhWFpoZEdWa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbFlXTjBhWFpoZEdWRGIyMXdiMjVsYm5Rb2RtNXZaR1VzSUdsdWMyVnlkR1ZrVm01dlpHVlJkV1YxWlN3Z2NHRnlaVzUwUld4dExDQnlaV1pGYkcwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYVc1cGRFTnZiWEJ2Ym1WdWRDQW9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTa2dlMXh1SUNBZ0lHbG1JQ2hwYzBSbFppaDJibTlrWlM1a1lYUmhMbkJsYm1ScGJtZEpibk5sY25RcEtTQjdYRzRnSUNBZ0lDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXVjSFZ6YUM1aGNIQnNlU2hwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VzSUhadWIyUmxMbVJoZEdFdWNHVnVaR2x1WjBsdWMyVnlkQ2s3WEc0Z0lDQWdJQ0IyYm05a1pTNWtZWFJoTG5CbGJtUnBibWRKYm5ObGNuUWdQU0J1ZFd4c08xeHVJQ0FnSUgxY2JpQWdJQ0IyYm05a1pTNWxiRzBnUFNCMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaUzRrWld3N1hHNGdJQ0FnYVdZZ0tHbHpVR0YwWTJoaFlteGxLSFp1YjJSbEtTa2dlMXh1SUNBZ0lDQWdhVzUyYjJ0bFEzSmxZWFJsU0c5dmEzTW9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTazdYRzRnSUNBZ0lDQnpaWFJUWTI5d1pTaDJibTlrWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUdWdGNIUjVJR052YlhCdmJtVnVkQ0J5YjI5MExseHVJQ0FnSUNBZ0x5OGdjMnRwY0NCaGJHd2daV3hsYldWdWRDMXlaV3hoZEdWa0lHMXZaSFZzWlhNZ1pYaGpaWEIwSUdadmNpQnlaV1lnS0NNek5EVTFLVnh1SUNBZ0lDQWdjbVZuYVhOMFpYSlNaV1lvZG01dlpHVXBPMXh1SUNBZ0lDQWdMeThnYldGclpTQnpkWEpsSUhSdklHbHVkbTlyWlNCMGFHVWdhVzV6WlhKMElHaHZiMnRjYmlBZ0lDQWdJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaUzV3ZFhOb0tIWnViMlJsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCeVpXRmpkR2wyWVhSbFEyOXRjRzl1Wlc1MElDaDJibTlrWlN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbExDQndZWEpsYm5SRmJHMHNJSEpsWmtWc2JTa2dlMXh1SUNBZ0lIWmhjaUJwTzF4dUlDQWdJQzh2SUdoaFkyc2dabTl5SUNNME16TTVPaUJoSUhKbFlXTjBhWFpoZEdWa0lHTnZiWEJ2Ym1WdWRDQjNhWFJvSUdsdWJtVnlJSFJ5WVc1emFYUnBiMjVjYmlBZ0lDQXZMeUJrYjJWeklHNXZkQ0IwY21sbloyVnlJR0psWTJGMWMyVWdkR2hsSUdsdWJtVnlJRzV2WkdVbmN5QmpjbVZoZEdWa0lHaHZiMnR6SUdGeVpTQnViM1FnWTJGc2JHVmtYRzRnSUNBZ0x5OGdZV2RoYVc0dUlFbDBKM01nYm05MElHbGtaV0ZzSUhSdklHbHVkbTlzZG1VZ2JXOWtkV3hsTFhOd1pXTnBabWxqSUd4dloybGpJR2x1SUdobGNtVWdZblYwWEc0Z0lDQWdMeThnZEdobGNtVWdaRzlsYzI0bmRDQnpaV1Z0SUhSdklHSmxJR0VnWW1WMGRHVnlJSGRoZVNCMGJ5QmtieUJwZEM1Y2JpQWdJQ0IyWVhJZ2FXNXVaWEpPYjJSbElEMGdkbTV2WkdVN1hHNGdJQ0FnZDJocGJHVWdLR2x1Ym1WeVRtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaU2tnZTF4dUlDQWdJQ0FnYVc1dVpYSk9iMlJsSUQwZ2FXNXVaWEpPYjJSbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObExsOTJibTlrWlR0Y2JpQWdJQ0FnSUdsbUlDaHBjMFJsWmlocElEMGdhVzV1WlhKT2IyUmxMbVJoZEdFcElDWW1JR2x6UkdWbUtHa2dQU0JwTG5SeVlXNXphWFJwYjI0cEtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQmpZbk11WVdOMGFYWmhkR1V1YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdJQ0JqWW5NdVlXTjBhWFpoZEdWYmFWMG9aVzF3ZEhsT2IyUmxMQ0JwYm01bGNrNXZaR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTNXdkWE5vS0dsdWJtVnlUbTlrWlNrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJSFZ1YkdsclpTQmhJRzVsZDJ4NUlHTnlaV0YwWldRZ1kyOXRjRzl1Wlc1MExGeHVJQ0FnSUM4dklHRWdjbVZoWTNScGRtRjBaV1FnYTJWbGNDMWhiR2wyWlNCamIyMXdiMjVsYm5RZ1pHOWxjMjRuZENCcGJuTmxjblFnYVhSelpXeG1YRzRnSUNBZ2FXNXpaWEowS0hCaGNtVnVkRVZzYlN3Z2RtNXZaR1V1Wld4dExDQnlaV1pGYkcwcE8xeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdhVzV6WlhKMElDaHdZWEpsYm5Rc0lHVnNiU3dnY21WbUpDUXhLU0I3WEc0Z0lDQWdhV1lnS0dselJHVm1LSEJoY21WdWRDa3BJSHRjYmlBZ0lDQWdJR2xtSUNocGMwUmxaaWh5WldZa0pERXBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV1lrSkRFdWNHRnlaVzUwVG05a1pTQTlQVDBnY0dGeVpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaVTl3Y3k1cGJuTmxjblJDWldadmNtVW9jR0Z5Wlc1MExDQmxiRzBzSUhKbFppUWtNU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUc1dlpHVlBjSE11WVhCd1pXNWtRMmhwYkdRb2NHRnlaVzUwTENCbGJHMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR055WldGMFpVTm9hV3hrY21WdUlDaDJibTlrWlN3Z1kyaHBiR1J5Wlc0c0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTa2dlMXh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHTm9hV3hrY21WdUtTa2dlMXh1SUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdZMmhsWTJ0RWRYQnNhV05oZEdWTFpYbHpLR05vYVd4a2NtVnVLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWTJocGJHUnlaVzR1YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdZM0psWVhSbFJXeHRLR05vYVd4a2NtVnVXMmxkTENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVc0lIWnViMlJsTG1Wc2JTd2diblZzYkN3Z2RISjFaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hwYzFCeWFXMXBkR2wyWlNoMmJtOWtaUzUwWlhoMEtTa2dlMXh1SUNBZ0lDQWdibTlrWlU5d2N5NWhjSEJsYm1SRGFHbHNaQ2gyYm05a1pTNWxiRzBzSUc1dlpHVlBjSE11WTNKbFlYUmxWR1Y0ZEU1dlpHVW9VM1J5YVc1bktIWnViMlJsTG5SbGVIUXBLU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYVhOUVlYUmphR0ZpYkdVZ0tIWnViMlJsS1NCN1hHNGdJQ0FnZDJocGJHVWdLSFp1YjJSbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObEtTQjdYRzRnSUNBZ0lDQjJibTlrWlNBOUlIWnViMlJsTG1OdmJYQnZibVZ1ZEVsdWMzUmhibU5sTGw5MmJtOWtaVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdselJHVm1LSFp1YjJSbExuUmhaeWxjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdsdWRtOXJaVU55WldGMFpVaHZiMnR6SUNoMmJtOWtaU3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsS1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNReElEMGdNRHNnYVNReElEd2dZMkp6TG1OeVpXRjBaUzVzWlc1bmRHZzdJQ3NyYVNReEtTQjdYRzRnSUNBZ0lDQmpZbk11WTNKbFlYUmxXMmtrTVYwb1pXMXdkSGxPYjJSbExDQjJibTlrWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR2tnUFNCMmJtOWtaUzVrWVhSaExtaHZiMnM3SUM4dklGSmxkWE5sSUhaaGNtbGhZbXhsWEc0Z0lDQWdhV1lnS0dselJHVm1LR2twS1NCN1hHNGdJQ0FnSUNCcFppQW9hWE5FWldZb2FTNWpjbVZoZEdVcEtTQjdJR2t1WTNKbFlYUmxLR1Z0Y0hSNVRtOWtaU3dnZG01dlpHVXBPeUI5WEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvYVM1cGJuTmxjblFwS1NCN0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTNXdkWE5vS0hadWIyUmxLVHNnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dklITmxkQ0J6WTI5d1pTQnBaQ0JoZEhSeWFXSjFkR1VnWm05eUlITmpiM0JsWkNCRFUxTXVYRzRnSUM4dklIUm9hWE1nYVhNZ2FXMXdiR1Z0Wlc1MFpXUWdZWE1nWVNCemNHVmphV0ZzSUdOaGMyVWdkRzhnWVhadmFXUWdkR2hsSUc5MlpYSm9aV0ZrWEc0Z0lDOHZJRzltSUdkdmFXNW5JSFJvY205MVoyZ2dkR2hsSUc1dmNtMWhiQ0JoZEhSeWFXSjFkR1VnY0dGMFkyaHBibWNnY0hKdlkyVnpjeTVjYmlBZ1puVnVZM1JwYjI0Z2MyVjBVMk52Y0dVZ0tIWnViMlJsS1NCN1hHNGdJQ0FnZG1GeUlHazdYRzRnSUNBZ2FXWWdLR2x6UkdWbUtHa2dQU0IyYm05a1pTNW1ibE5qYjNCbFNXUXBLU0I3WEc0Z0lDQWdJQ0J1YjJSbFQzQnpMbk5sZEVGMGRISnBZblYwWlNoMmJtOWtaUzVsYkcwc0lHa3NJQ2NuS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkbUZ5SUdGdVkyVnpkRzl5SUQwZ2RtNXZaR1U3WEc0Z0lDQWdJQ0IzYUdsc1pTQW9ZVzVqWlhOMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0drZ1BTQmhibU5sYzNSdmNpNWpiMjUwWlhoMEtTQW1KaUJwYzBSbFppaHBJRDBnYVM0a2IzQjBhVzl1Y3k1ZmMyTnZjR1ZKWkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0J1YjJSbFQzQnpMbk5sZEVGMGRISnBZblYwWlNoMmJtOWtaUzVsYkcwc0lHa3NJQ2NuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmhibU5sYzNSdmNpQTlJR0Z1WTJWemRHOXlMbkJoY21WdWREdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHk4Z1ptOXlJSE5zYjNRZ1kyOXVkR1Z1ZENCMGFHVjVJSE5vYjNWc1pDQmhiSE52SUdkbGRDQjBhR1VnYzJOdmNHVkpaQ0JtY205dElIUm9aU0JvYjNOMElHbHVjM1JoYm1ObExseHVJQ0FnSUdsbUlDaHBjMFJsWmlocElEMGdZV04wYVhabFNXNXpkR0Z1WTJVcElDWW1YRzRnSUNBZ0lDQnBJQ0U5UFNCMmJtOWtaUzVqYjI1MFpYaDBJQ1ltWEc0Z0lDQWdJQ0JwSUNFOVBTQjJibTlrWlM1bWJrTnZiblJsZUhRZ0ppWmNiaUFnSUNBZ0lHbHpSR1ZtS0drZ1BTQnBMaVJ2Y0hScGIyNXpMbDl6WTI5d1pVbGtLVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdibTlrWlU5d2N5NXpaWFJCZEhSeWFXSjFkR1VvZG01dlpHVXVaV3h0TENCcExDQW5KeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnWVdSa1ZtNXZaR1Z6SUNod1lYSmxiblJGYkcwc0lISmxaa1ZzYlN3Z2RtNXZaR1Z6TENCemRHRnlkRWxrZUN3Z1pXNWtTV1I0TENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVcElIdGNiaUFnSUNCbWIzSWdLRHNnYzNSaGNuUkpaSGdnUEQwZ1pXNWtTV1I0T3lBckszTjBZWEowU1dSNEtTQjdYRzRnSUNBZ0lDQmpjbVZoZEdWRmJHMG9kbTV2WkdWelczTjBZWEowU1dSNFhTd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0J3WVhKbGJuUkZiRzBzSUhKbFprVnNiU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYVc1MmIydGxSR1Z6ZEhKdmVVaHZiMnNnS0hadWIyUmxLU0I3WEc0Z0lDQWdkbUZ5SUdrc0lHbzdYRzRnSUNBZ2RtRnlJR1JoZEdFZ1BTQjJibTlrWlM1a1lYUmhPMXh1SUNBZ0lHbG1JQ2hwYzBSbFppaGtZWFJoS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHa2dQU0JrWVhSaExtaHZiMnNwSUNZbUlHbHpSR1ZtS0drZ1BTQnBMbVJsYzNSeWIza3BLU0I3SUdrb2RtNXZaR1VwT3lCOVhHNGdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWTJKekxtUmxjM1J5YjNrdWJHVnVaM1JvT3lBcksya3BJSHNnWTJKekxtUmxjM1J5YjNsYmFWMG9kbTV2WkdVcE95QjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBjMFJsWmlocElEMGdkbTV2WkdVdVkyaHBiR1J5Wlc0cEtTQjdYRzRnSUNBZ0lDQm1iM0lnS0dvZ1BTQXdPeUJxSUR3Z2RtNXZaR1V1WTJocGJHUnlaVzR1YkdWdVozUm9PeUFySzJvcElIdGNiaUFnSUNBZ0lDQWdhVzUyYjJ0bFJHVnpkSEp2ZVVodmIyc29kbTV2WkdVdVkyaHBiR1J5Wlc1YmFsMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSEpsYlc5MlpWWnViMlJsY3lBb2NHRnlaVzUwUld4dExDQjJibTlrWlhNc0lITjBZWEowU1dSNExDQmxibVJKWkhncElIdGNiaUFnSUNCbWIzSWdLRHNnYzNSaGNuUkpaSGdnUEQwZ1pXNWtTV1I0T3lBckszTjBZWEowU1dSNEtTQjdYRzRnSUNBZ0lDQjJZWElnWTJnZ1BTQjJibTlrWlhOYmMzUmhjblJKWkhoZE8xeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHTm9LU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9hWE5FWldZb1kyZ3VkR0ZuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYlc5MlpVRnVaRWx1ZG05clpWSmxiVzkyWlVodmIyc29ZMmdwTzF4dUlDQWdJQ0FnSUNBZ0lHbHVkbTlyWlVSbGMzUnliM2xJYjI5cktHTm9LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHNnTHk4Z1ZHVjRkQ0J1YjJSbFhHNGdJQ0FnSUNBZ0lDQWdjbVZ0YjNabFRtOWtaU2hqYUM1bGJHMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnY21WdGIzWmxRVzVrU1c1MmIydGxVbVZ0YjNabFNHOXZheUFvZG01dlpHVXNJSEp0S1NCN1hHNGdJQ0FnYVdZZ0tHbHpSR1ZtS0hKdEtTQjhmQ0JwYzBSbFppaDJibTlrWlM1a1lYUmhLU2tnZTF4dUlDQWdJQ0FnZG1GeUlHazdYRzRnSUNBZ0lDQjJZWElnYkdsemRHVnVaWEp6SUQwZ1kySnpMbkpsYlc5MlpTNXNaVzVuZEdnZ0t5QXhPMXh1SUNBZ0lDQWdhV1lnS0dselJHVm1LSEp0S1NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIzWlNCb1lYWmxJR0VnY21WamRYSnphWFpsYkhrZ2NHRnpjMlZrSUdSdmQyNGdjbTBnWTJGc2JHSmhZMnRjYmlBZ0lDQWdJQ0FnTHk4Z2FXNWpjbVZoYzJVZ2RHaGxJR3hwYzNSbGJtVnljeUJqYjNWdWRGeHVJQ0FnSUNBZ0lDQnliUzVzYVhOMFpXNWxjbk1nS3owZ2JHbHpkR1Z1WlhKek8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdaR2x5WldOMGJIa2djbVZ0YjNacGJtZGNiaUFnSUNBZ0lDQWdjbTBnUFNCamNtVmhkR1ZTYlVOaUtIWnViMlJsTG1Wc2JTd2diR2x6ZEdWdVpYSnpLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJQzh2SUhKbFkzVnljMmwyWld4NUlHbHVkbTlyWlNCb2IyOXJjeUJ2YmlCamFHbHNaQ0JqYjIxd2IyNWxiblFnY205dmRDQnViMlJsWEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvYVNBOUlIWnViMlJsTG1OdmJYQnZibVZ1ZEVsdWMzUmhibU5sS1NBbUppQnBjMFJsWmlocElEMGdhUzVmZG01dlpHVXBJQ1ltSUdselJHVm1LR2t1WkdGMFlTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WdGIzWmxRVzVrU1c1MmIydGxVbVZ0YjNabFNHOXZheWhwTENCeWJTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z1kySnpMbkpsYlc5MlpTNXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJQ0FnSUNCalluTXVjbVZ0YjNabFcybGRLSFp1YjJSbExDQnliU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvYVNBOUlIWnViMlJsTG1SaGRHRXVhRzl2YXlrZ0ppWWdhWE5FWldZb2FTQTlJR2t1Y21WdGIzWmxLU2tnZTF4dUlDQWdJQ0FnSUNCcEtIWnViMlJsTENCeWJTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnliU2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaVzF2ZG1WT2IyUmxLSFp1YjJSbExtVnNiU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnZFhCa1lYUmxRMmhwYkdSeVpXNGdLSEJoY21WdWRFVnNiU3dnYjJ4a1EyZ3NJRzVsZDBOb0xDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXNJSEpsYlc5MlpVOXViSGtwSUh0Y2JpQWdJQ0IyWVhJZ2IyeGtVM1JoY25SSlpIZ2dQU0F3TzF4dUlDQWdJSFpoY2lCdVpYZFRkR0Z5ZEVsa2VDQTlJREE3WEc0Z0lDQWdkbUZ5SUc5c1pFVnVaRWxrZUNBOUlHOXNaRU5vTG14bGJtZDBhQ0F0SURFN1hHNGdJQ0FnZG1GeUlHOXNaRk4wWVhKMFZtNXZaR1VnUFNCdmJHUkRhRnN3WFR0Y2JpQWdJQ0IyWVhJZ2IyeGtSVzVrVm01dlpHVWdQU0J2YkdSRGFGdHZiR1JGYm1SSlpIaGRPMXh1SUNBZ0lIWmhjaUJ1WlhkRmJtUkpaSGdnUFNCdVpYZERhQzVzWlc1bmRHZ2dMU0F4TzF4dUlDQWdJSFpoY2lCdVpYZFRkR0Z5ZEZadWIyUmxJRDBnYm1WM1EyaGJNRjA3WEc0Z0lDQWdkbUZ5SUc1bGQwVnVaRlp1YjJSbElEMGdibVYzUTJoYmJtVjNSVzVrU1dSNFhUdGNiaUFnSUNCMllYSWdiMnhrUzJWNVZHOUpaSGdzSUdsa2VFbHVUMnhrTENCMmJtOWtaVlJ2VFc5MlpTd2djbVZtUld4dE8xeHVYRzRnSUNBZ0x5OGdjbVZ0YjNabFQyNXNlU0JwY3lCaElITndaV05wWVd3Z1pteGhaeUIxYzJWa0lHOXViSGtnWW5rZ1BIUnlZVzV6YVhScGIyNHRaM0p2ZFhBK1hHNGdJQ0FnTHk4Z2RHOGdaVzV6ZFhKbElISmxiVzkyWldRZ1pXeGxiV1Z1ZEhNZ2MzUmhlU0JwYmlCamIzSnlaV04wSUhKbGJHRjBhWFpsSUhCdmMybDBhVzl1YzF4dUlDQWdJQzh2SUdSMWNtbHVaeUJzWldGMmFXNW5JSFJ5WVc1emFYUnBiMjV6WEc0Z0lDQWdkbUZ5SUdOaGJrMXZkbVVnUFNBaGNtVnRiM1psVDI1c2VUdGNibHh1SUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNCamFHVmphMFIxY0d4cFkyRjBaVXRsZVhNb2JtVjNRMmdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSGRvYVd4bElDaHZiR1JUZEdGeWRFbGtlQ0E4UFNCdmJHUkZibVJKWkhnZ0ppWWdibVYzVTNSaGNuUkpaSGdnUEQwZ2JtVjNSVzVrU1dSNEtTQjdYRzRnSUNBZ0lDQnBaaUFvYVhOVmJtUmxaaWh2YkdSVGRHRnlkRlp1YjJSbEtTa2dlMXh1SUNBZ0lDQWdJQ0J2YkdSVGRHRnlkRlp1YjJSbElEMGdiMnhrUTJoYkt5dHZiR1JUZEdGeWRFbGtlRjA3SUM4dklGWnViMlJsSUdoaGN5QmlaV1Z1SUcxdmRtVmtJR3hsWm5SY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTlZibVJsWmlodmJHUkZibVJXYm05a1pTa3BJSHRjYmlBZ0lDQWdJQ0FnYjJ4a1JXNWtWbTV2WkdVZ1BTQnZiR1JEYUZzdExXOXNaRVZ1WkVsa2VGMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5oYldWV2JtOWtaU2h2YkdSVGRHRnlkRlp1YjJSbExDQnVaWGRUZEdGeWRGWnViMlJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQndZWFJqYUZadWIyUmxLRzlzWkZOMFlYSjBWbTV2WkdVc0lHNWxkMU4wWVhKMFZtNXZaR1VzSUdsdWMyVnlkR1ZrVm01dlpHVlJkV1YxWlNrN1hHNGdJQ0FnSUNBZ0lHOXNaRk4wWVhKMFZtNXZaR1VnUFNCdmJHUkRhRnNySzI5c1pGTjBZWEowU1dSNFhUdGNiaUFnSUNBZ0lDQWdibVYzVTNSaGNuUldibTlrWlNBOUlHNWxkME5vV3lzcmJtVjNVM1JoY25SSlpIaGRPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6WVcxbFZtNXZaR1VvYjJ4a1JXNWtWbTV2WkdVc0lHNWxkMFZ1WkZadWIyUmxLU2tnZTF4dUlDQWdJQ0FnSUNCd1lYUmphRlp1YjJSbEtHOXNaRVZ1WkZadWIyUmxMQ0J1WlhkRmJtUldibTlrWlN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbEtUdGNiaUFnSUNBZ0lDQWdiMnhrUlc1a1ZtNXZaR1VnUFNCdmJHUkRhRnN0TFc5c1pFVnVaRWxrZUYwN1hHNGdJQ0FnSUNBZ0lHNWxkMFZ1WkZadWIyUmxJRDBnYm1WM1EyaGJMUzF1WlhkRmJtUkpaSGhkTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoellXMWxWbTV2WkdVb2IyeGtVM1JoY25SV2JtOWtaU3dnYm1WM1JXNWtWbTV2WkdVcEtTQjdJQzh2SUZadWIyUmxJRzF2ZG1Wa0lISnBaMmgwWEc0Z0lDQWdJQ0FnSUhCaGRHTm9WbTV2WkdVb2IyeGtVM1JoY25SV2JtOWtaU3dnYm1WM1JXNWtWbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTazdYRzRnSUNBZ0lDQWdJR05oYmsxdmRtVWdKaVlnYm05a1pVOXdjeTVwYm5ObGNuUkNaV1p2Y21Vb2NHRnlaVzUwUld4dExDQnZiR1JUZEdGeWRGWnViMlJsTG1Wc2JTd2dibTlrWlU5d2N5NXVaWGgwVTJsaWJHbHVaeWh2YkdSRmJtUldibTlrWlM1bGJHMHBLVHRjYmlBZ0lDQWdJQ0FnYjJ4a1UzUmhjblJXYm05a1pTQTlJRzlzWkVOb1d5c3JiMnhrVTNSaGNuUkpaSGhkTzF4dUlDQWdJQ0FnSUNCdVpYZEZibVJXYm05a1pTQTlJRzVsZDBOb1d5MHRibVYzUlc1a1NXUjRYVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzJGdFpWWnViMlJsS0c5c1pFVnVaRlp1YjJSbExDQnVaWGRUZEdGeWRGWnViMlJsS1NrZ2V5QXZMeUJXYm05a1pTQnRiM1psWkNCc1pXWjBYRzRnSUNBZ0lDQWdJSEJoZEdOb1ZtNXZaR1VvYjJ4a1JXNWtWbTV2WkdVc0lHNWxkMU4wWVhKMFZtNXZaR1VzSUdsdWMyVnlkR1ZrVm01dlpHVlJkV1YxWlNrN1hHNGdJQ0FnSUNBZ0lHTmhiazF2ZG1VZ0ppWWdibTlrWlU5d2N5NXBibk5sY25SQ1pXWnZjbVVvY0dGeVpXNTBSV3h0TENCdmJHUkZibVJXYm05a1pTNWxiRzBzSUc5c1pGTjBZWEowVm01dlpHVXVaV3h0S1R0Y2JpQWdJQ0FnSUNBZ2IyeGtSVzVrVm01dlpHVWdQU0J2YkdSRGFGc3RMVzlzWkVWdVpFbGtlRjA3WEc0Z0lDQWdJQ0FnSUc1bGQxTjBZWEowVm01dlpHVWdQU0J1WlhkRGFGc3JLMjVsZDFOMFlYSjBTV1I0WFR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMVZ1WkdWbUtHOXNaRXRsZVZSdlNXUjRLU2tnZXlCdmJHUkxaWGxVYjBsa2VDQTlJR055WldGMFpVdGxlVlJ2VDJ4a1NXUjRLRzlzWkVOb0xDQnZiR1JUZEdGeWRFbGtlQ3dnYjJ4a1JXNWtTV1I0S1RzZ2ZWeHVJQ0FnSUNBZ0lDQnBaSGhKYms5c1pDQTlJR2x6UkdWbUtHNWxkMU4wWVhKMFZtNXZaR1V1YTJWNUtWeHVJQ0FnSUNBZ0lDQWdJRDhnYjJ4a1MyVjVWRzlKWkhoYmJtVjNVM1JoY25SV2JtOWtaUzVyWlhsZFhHNGdJQ0FnSUNBZ0lDQWdPaUJtYVc1a1NXUjRTVzVQYkdRb2JtVjNVM1JoY25SV2JtOWtaU3dnYjJ4a1EyZ3NJRzlzWkZOMFlYSjBTV1I0TENCdmJHUkZibVJKWkhncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOVmJtUmxaaWhwWkhoSmJrOXNaQ2twSUhzZ0x5OGdUbVYzSUdWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnSUNCamNtVmhkR1ZGYkcwb2JtVjNVM1JoY25SV2JtOWtaU3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsTENCd1lYSmxiblJGYkcwc0lHOXNaRk4wWVhKMFZtNXZaR1V1Wld4dEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0IyYm05a1pWUnZUVzkyWlNBOUlHOXNaRU5vVzJsa2VFbHVUMnhrWFR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJGdFpWWnViMlJsS0hadWIyUmxWRzlOYjNabExDQnVaWGRUZEdGeWRGWnViMlJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMFkyaFdibTlrWlNoMmJtOWtaVlJ2VFc5MlpTd2dibVYzVTNSaGNuUldibTlrWlN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5c1pFTm9XMmxrZUVsdVQyeGtYU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYmsxdmRtVWdKaVlnYm05a1pVOXdjeTVwYm5ObGNuUkNaV1p2Y21Vb2NHRnlaVzUwUld4dExDQjJibTlrWlZSdlRXOTJaUzVsYkcwc0lHOXNaRk4wWVhKMFZtNXZaR1V1Wld4dEtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMkZ0WlNCclpYa2dZblYwSUdScFptWmxjbVZ1ZENCbGJHVnRaVzUwTGlCMGNtVmhkQ0JoY3lCdVpYY2daV3hsYldWdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNKbFlYUmxSV3h0S0c1bGQxTjBZWEowVm01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU3dnY0dGeVpXNTBSV3h0TENCdmJHUlRkR0Z5ZEZadWIyUmxMbVZzYlNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUc1bGQxTjBZWEowVm01dlpHVWdQU0J1WlhkRGFGc3JLMjVsZDFOMFlYSjBTV1I0WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0c5c1pGTjBZWEowU1dSNElENGdiMnhrUlc1a1NXUjRLU0I3WEc0Z0lDQWdJQ0J5WldaRmJHMGdQU0JwYzFWdVpHVm1LRzVsZDBOb1cyNWxkMFZ1WkVsa2VDQXJJREZkS1NBL0lHNTFiR3dnT2lCdVpYZERhRnR1WlhkRmJtUkpaSGdnS3lBeFhTNWxiRzA3WEc0Z0lDQWdJQ0JoWkdSV2JtOWtaWE1vY0dGeVpXNTBSV3h0TENCeVpXWkZiRzBzSUc1bGQwTm9MQ0J1WlhkVGRHRnlkRWxrZUN3Z2JtVjNSVzVrU1dSNExDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9ibVYzVTNSaGNuUkpaSGdnUGlCdVpYZEZibVJKWkhncElIdGNiaUFnSUNBZ0lISmxiVzkyWlZadWIyUmxjeWh3WVhKbGJuUkZiRzBzSUc5c1pFTm9MQ0J2YkdSVGRHRnlkRWxrZUN3Z2IyeGtSVzVrU1dSNEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQmphR1ZqYTBSMWNHeHBZMkYwWlV0bGVYTWdLR05vYVd4a2NtVnVLU0I3WEc0Z0lDQWdkbUZ5SUhObFpXNUxaWGx6SUQwZ2UzMDdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmphR2xzWkhKbGJpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlIWnViMlJsSUQwZ1kyaHBiR1J5Wlc1YmFWMDdYRzRnSUNBZ0lDQjJZWElnYTJWNUlEMGdkbTV2WkdVdWEyVjVPMXh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hObFpXNUxaWGx6VzJ0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tGd2lSSFZ3YkdsallYUmxJR3RsZVhNZ1pHVjBaV04wWldRNklDZGNJaUFySUd0bGVTQXJJRndpSnk0Z1ZHaHBjeUJ0WVhrZ1kyRjFjMlVnWVc0Z2RYQmtZWFJsSUdWeWNtOXlMbHdpS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFp1YjJSbExtTnZiblJsZUhSY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhObFpXNUxaWGx6VzJ0bGVWMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdabWx1WkVsa2VFbHVUMnhrSUNodWIyUmxMQ0J2YkdSRGFDd2djM1JoY25Rc0lHVnVaQ2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNCemRHRnlkRHNnYVNBOElHVnVaRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnWXlBOUlHOXNaRU5vVzJsZE8xeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHTXBJQ1ltSUhOaGJXVldibTlrWlNodWIyUmxMQ0JqS1NrZ2V5QnlaWFIxY200Z2FTQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjR0YwWTJoV2JtOWtaU0FvYjJ4a1ZtNXZaR1VzSUhadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VzSUhKbGJXOTJaVTl1YkhrcElIdGNiaUFnSUNCcFppQW9iMnhrVm01dlpHVWdQVDA5SUhadWIyUmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdaV3h0SUQwZ2RtNXZaR1V1Wld4dElEMGdiMnhrVm01dlpHVXVaV3h0TzF4dVhHNGdJQ0FnYVdZZ0tHbHpWSEoxWlNodmJHUldibTlrWlM1cGMwRnplVzVqVUd4aFkyVm9iMnhrWlhJcEtTQjdYRzRnSUNBZ0lDQnBaaUFvYVhORVpXWW9kbTV2WkdVdVlYTjVibU5HWVdOMGIzSjVMbkpsYzI5c2RtVmtLU2tnZTF4dUlDQWdJQ0FnSUNCb2VXUnlZWFJsS0c5c1pGWnViMlJsTG1Wc2JTd2dkbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJibTlrWlM1cGMwRnplVzVqVUd4aFkyVm9iMnhrWlhJZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdjbVYxYzJVZ1pXeGxiV1Z1ZENCbWIzSWdjM1JoZEdsaklIUnlaV1Z6TGx4dUlDQWdJQzh2SUc1dmRHVWdkMlVnYjI1c2VTQmtieUIwYUdseklHbG1JSFJvWlNCMmJtOWtaU0JwY3lCamJHOXVaV1FnTFZ4dUlDQWdJQzh2SUdsbUlIUm9aU0J1WlhjZ2JtOWtaU0JwY3lCdWIzUWdZMnh2Ym1Wa0lHbDBJRzFsWVc1eklIUm9aU0J5Wlc1a1pYSWdablZ1WTNScGIyNXpJR2hoZG1VZ1ltVmxibHh1SUNBZ0lDOHZJSEpsYzJWMElHSjVJSFJvWlNCb2IzUXRjbVZzYjJGa0xXRndhU0JoYm1RZ2QyVWdibVZsWkNCMGJ5QmtieUJoSUhCeWIzQmxjaUJ5WlMxeVpXNWtaWEl1WEc0Z0lDQWdhV1lnS0dselZISjFaU2gyYm05a1pTNXBjMU4wWVhScFl5a2dKaVpjYmlBZ0lDQWdJR2x6VkhKMVpTaHZiR1JXYm05a1pTNXBjMU4wWVhScFl5a2dKaVpjYmlBZ0lDQWdJSFp1YjJSbExtdGxlU0E5UFQwZ2IyeGtWbTV2WkdVdWEyVjVJQ1ltWEc0Z0lDQWdJQ0FvYVhOVWNuVmxLSFp1YjJSbExtbHpRMnh2Ym1Wa0tTQjhmQ0JwYzFSeWRXVW9kbTV2WkdVdWFYTlBibU5sS1NsY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUhadWIyUmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxJRDBnYjJ4a1ZtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlU3WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdhVHRjYmlBZ0lDQjJZWElnWkdGMFlTQTlJSFp1YjJSbExtUmhkR0U3WEc0Z0lDQWdhV1lnS0dselJHVm1LR1JoZEdFcElDWW1JR2x6UkdWbUtHa2dQU0JrWVhSaExtaHZiMnNwSUNZbUlHbHpSR1ZtS0drZ1BTQnBMbkJ5WlhCaGRHTm9LU2tnZTF4dUlDQWdJQ0FnYVNodmJHUldibTlrWlN3Z2RtNXZaR1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCdmJHUkRhQ0E5SUc5c1pGWnViMlJsTG1Ob2FXeGtjbVZ1TzF4dUlDQWdJSFpoY2lCamFDQTlJSFp1YjJSbExtTm9hV3hrY21WdU8xeHVJQ0FnSUdsbUlDaHBjMFJsWmloa1lYUmhLU0FtSmlCcGMxQmhkR05vWVdKc1pTaDJibTlrWlNrcElIdGNiaUFnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCalluTXVkWEJrWVhSbExteGxibWQwYURzZ0t5dHBLU0I3SUdOaWN5NTFjR1JoZEdWYmFWMG9iMnhrVm01dlpHVXNJSFp1YjJSbEtUc2dmVnh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR2tnUFNCa1lYUmhMbWh2YjJzcElDWW1JR2x6UkdWbUtHa2dQU0JwTG5Wd1pHRjBaU2twSUhzZ2FTaHZiR1JXYm05a1pTd2dkbTV2WkdVcE95QjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBjMVZ1WkdWbUtIWnViMlJsTG5SbGVIUXBLU0I3WEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvYjJ4a1EyZ3BJQ1ltSUdselJHVm1LR05vS1NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYjJ4a1EyZ2dJVDA5SUdOb0tTQjdJSFZ3WkdGMFpVTm9hV3hrY21WdUtHVnNiU3dnYjJ4a1EyZ3NJR05vTENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVc0lISmxiVzkyWlU5dWJIa3BPeUI5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselJHVm1LR05vS1NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVhORVpXWW9iMnhrVm01dlpHVXVkR1Y0ZENrcElIc2dibTlrWlU5d2N5NXpaWFJVWlhoMFEyOXVkR1Z1ZENobGJHMHNJQ2NuS1RzZ2ZWeHVJQ0FnSUNBZ0lDQmhaR1JXYm05a1pYTW9aV3h0TENCdWRXeHNMQ0JqYUN3Z01Dd2dZMmd1YkdWdVozUm9JQzBnTVN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5FWldZb2IyeGtRMmdwS1NCN1hHNGdJQ0FnSUNBZ0lISmxiVzkyWlZadWIyUmxjeWhsYkcwc0lHOXNaRU5vTENBd0xDQnZiR1JEYUM1c1pXNW5kR2dnTFNBeEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5FWldZb2IyeGtWbTV2WkdVdWRHVjRkQ2twSUh0Y2JpQWdJQ0FnSUNBZ2JtOWtaVTl3Y3k1elpYUlVaWGgwUTI5dWRHVnVkQ2hsYkcwc0lDY25LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzlzWkZadWIyUmxMblJsZUhRZ0lUMDlJSFp1YjJSbExuUmxlSFFwSUh0Y2JpQWdJQ0FnSUc1dlpHVlBjSE11YzJWMFZHVjRkRU52Ym5SbGJuUW9aV3h0TENCMmJtOWtaUzUwWlhoMEtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHbHpSR1ZtS0dSaGRHRXBLU0I3WEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvYVNBOUlHUmhkR0V1YUc5dmF5a2dKaVlnYVhORVpXWW9hU0E5SUdrdWNHOXpkSEJoZEdOb0tTa2dleUJwS0c5c1pGWnViMlJsTENCMmJtOWtaU2s3SUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCcGJuWnZhMlZKYm5ObGNuUkliMjlySUNoMmJtOWtaU3dnY1hWbGRXVXNJR2x1YVhScFlXd3BJSHRjYmlBZ0lDQXZMeUJrWld4aGVTQnBibk5sY25RZ2FHOXZhM01nWm05eUlHTnZiWEJ2Ym1WdWRDQnliMjkwSUc1dlpHVnpMQ0JwYm5admEyVWdkR2hsYlNCaFpuUmxjaUIwYUdWY2JpQWdJQ0F2THlCbGJHVnRaVzUwSUdseklISmxZV3hzZVNCcGJuTmxjblJsWkZ4dUlDQWdJR2xtSUNocGMxUnlkV1VvYVc1cGRHbGhiQ2tnSmlZZ2FYTkVaV1lvZG01dlpHVXVjR0Z5Wlc1MEtTa2dlMXh1SUNBZ0lDQWdkbTV2WkdVdWNHRnlaVzUwTG1SaGRHRXVjR1Z1WkdsdVowbHVjMlZ5ZENBOUlIRjFaWFZsTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEYxWlhWbExteGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUhGMVpYVmxXMmxkTG1SaGRHRXVhRzl2YXk1cGJuTmxjblFvY1hWbGRXVmJhVjBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhaaGNpQm9lV1J5WVhScGIyNUNZV2xzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdMeThnYkdsemRDQnZaaUJ0YjJSMWJHVnpJSFJvWVhRZ1kyRnVJSE5yYVhBZ1kzSmxZWFJsSUdodmIyc2daSFZ5YVc1bklHaDVaSEpoZEdsdmJpQmlaV05oZFhObElIUm9aWGxjYmlBZ0x5OGdZWEpsSUdGc2NtVmhaSGtnY21WdVpHVnlaV1FnYjI0Z2RHaGxJR05zYVdWdWRDQnZjaUJvWVhNZ2JtOGdibVZsWkNCbWIzSWdhVzVwZEdsaGJHbDZZWFJwYjI1Y2JpQWdMeThnVG05MFpUb2djM1I1YkdVZ2FYTWdaWGhqYkhWa1pXUWdZbVZqWVhWelpTQnBkQ0J5Wld4cFpYTWdiMjRnYVc1cGRHbGhiQ0JqYkc5dVpTQm1iM0lnWm5WMGRYSmxYRzRnSUM4dklHUmxaWEFnZFhCa1lYUmxjeUFvSXpjd05qTXBMbHh1SUNCMllYSWdhWE5TWlc1a1pYSmxaRTF2WkhWc1pTQTlJRzFoYTJWTllYQW9KMkYwZEhKekxHTnNZWE56TEhOMFlYUnBZME5zWVhOekxITjBZWFJwWTFOMGVXeGxMR3RsZVNjcE8xeHVYRzRnSUM4dklFNXZkR1U2SUhSb2FYTWdhWE1nWVNCaWNtOTNjMlZ5TFc5dWJIa2dablZ1WTNScGIyNGdjMjhnZDJVZ1kyRnVJR0Z6YzNWdFpTQmxiRzF6SUdGeVpTQkVUMDBnYm05a1pYTXVYRzRnSUdaMWJtTjBhVzl1SUdoNVpISmhkR1VnS0dWc2JTd2dkbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTd2dhVzVXVUhKbEtTQjdYRzRnSUNBZ2RtRnlJR2s3WEc0Z0lDQWdkbUZ5SUhSaFp5QTlJSFp1YjJSbExuUmhaenRjYmlBZ0lDQjJZWElnWkdGMFlTQTlJSFp1YjJSbExtUmhkR0U3WEc0Z0lDQWdkbUZ5SUdOb2FXeGtjbVZ1SUQwZ2RtNXZaR1V1WTJocGJHUnlaVzQ3WEc0Z0lDQWdhVzVXVUhKbElEMGdhVzVXVUhKbElIeDhJQ2hrWVhSaElDWW1JR1JoZEdFdWNISmxLVHRjYmlBZ0lDQjJibTlrWlM1bGJHMGdQU0JsYkcwN1hHNWNiaUFnSUNCcFppQW9hWE5VY25WbEtIWnViMlJsTG1selEyOXRiV1Z1ZENrZ0ppWWdhWE5FWldZb2RtNXZaR1V1WVhONWJtTkdZV04wYjNKNUtTa2dlMXh1SUNBZ0lDQWdkbTV2WkdVdWFYTkJjM2x1WTFCc1lXTmxhRzlzWkdWeUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbFhHNGdJQ0FnZlZ4dUlDQWdJQzh2SUdGemMyVnlkQ0J1YjJSbElHMWhkR05vWEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lHbG1JQ2doWVhOelpYSjBUbTlrWlUxaGRHTm9LR1ZzYlN3Z2RtNXZaR1VzSUdsdVZsQnlaU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBjMFJsWmloa1lYUmhLU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0drZ1BTQmtZWFJoTG1odmIyc3BJQ1ltSUdselJHVm1LR2tnUFNCcExtbHVhWFFwS1NCN0lHa29kbTV2WkdVc0lIUnlkV1VnTHlvZ2FIbGtjbUYwYVc1bklDb3ZLVHNnZlZ4dUlDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0drZ1BTQjJibTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlNrcElIdGNiaUFnSUNBZ0lDQWdMeThnWTJocGJHUWdZMjl0Y0c5dVpXNTBMaUJwZENCemFHOTFiR1FnYUdGMlpTQm9lV1J5WVhSbFpDQnBkSE1nYjNkdUlIUnlaV1V1WEc0Z0lDQWdJQ0FnSUdsdWFYUkRiMjF3YjI1bGJuUW9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hwYzBSbFppaDBZV2NwS1NCN1hHNGdJQ0FnSUNCcFppQW9hWE5FWldZb1kyaHBiR1J5Wlc0cEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUdWdGNIUjVJR1ZzWlcxbGJuUXNJR0ZzYkc5M0lHTnNhV1Z1ZENCMGJ5QndhV05ySUhWd0lHRnVaQ0J3YjNCMWJHRjBaU0JqYUdsc1pISmxibHh1SUNBZ0lDQWdJQ0JwWmlBb0lXVnNiUzVvWVhORGFHbHNaRTV2WkdWektDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamNtVmhkR1ZEYUdsc1pISmxiaWgyYm05a1pTd2dZMmhwYkdSeVpXNHNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkaTFvZEcxc0lHRnVaQ0JrYjIxUWNtOXdjem9nYVc1dVpYSklWRTFNWEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHa2dQU0JrWVhSaEtTQW1KaUJwYzBSbFppaHBJRDBnYVM1a2IyMVFjbTl3Y3lrZ0ppWWdhWE5FWldZb2FTQTlJR2t1YVc1dVpYSklWRTFNS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dJVDA5SUdWc2JTNXBibTVsY2toVVRVd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR052Ym5OdmJHVWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJV2g1WkhKaGRHbHZia0poYVd4bFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9lV1J5WVhScGIyNUNZV2xzWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ25VR0Z5Wlc1ME9pQW5MQ0JsYkcwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWduYzJWeWRtVnlJR2x1Ym1WeVNGUk5URG9nSnl3Z2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkamJHbGxiblFnYVc1dVpYSklWRTFNT2lBbkxDQmxiRzB1YVc1dVpYSklWRTFNS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYVhSbGNtRjBaU0JoYm1RZ1kyOXRjR0Z5WlNCamFHbHNaSEpsYmlCc2FYTjBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR05vYVd4a2NtVnVUV0YwWTJnZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOb2FXeGtUbTlrWlNBOUlHVnNiUzVtYVhKemRFTm9hV3hrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU1F4SUQwZ01Ec2dhU1F4SUR3Z1kyaHBiR1J5Wlc0dWJHVnVaM1JvT3lCcEpERXJLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXTm9hV3hrVG05a1pTQjhmQ0FoYUhsa2NtRjBaU2hqYUdsc1pFNXZaR1VzSUdOb2FXeGtjbVZ1VzJra01WMHNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU3dnYVc1V1VISmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb2FXeGtjbVZ1VFdGMFkyZ2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05vYVd4a1RtOWtaU0E5SUdOb2FXeGtUbTlrWlM1dVpYaDBVMmxpYkdsdVp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsbUlHTm9hV3hrVG05a1pTQnBjeUJ1YjNRZ2JuVnNiQ3dnYVhRZ2JXVmhibk1nZEdobElHRmpkSFZoYkNCamFHbHNaRTV2WkdWeklHeHBjM1FnYVhOY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUd4dmJtZGxjaUIwYUdGdUlIUm9aU0IyYVhKMGRXRnNJR05vYVd4a2NtVnVJR3hwYzNRdVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXTm9hV3hrY21WdVRXRjBZMmdnZkh3Z1kyaHBiR1JPYjJSbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dWdlppQmpiMjV6YjJ4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDRm9lV1J5WVhScGIyNUNZV2xzWldSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FIbGtjbUYwYVc5dVFtRnBiR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0oxQmhjbVZ1ZERvZ0p5d2daV3h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9KMDFwYzIxaGRHTm9hVzVuSUdOb2FXeGtUbTlrWlhNZ2RuTXVJRlpPYjJSbGN6b2dKeXdnWld4dExtTm9hV3hrVG05a1pYTXNJR05vYVd4a2NtVnVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaHBjMFJsWmloa1lYUmhLU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdablZzYkVsdWRtOXJaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdaR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFYTlNaVzVrWlhKbFpFMXZaSFZzWlNoclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1kV3hzU1c1MmIydGxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWRtOXJaVU55WldGMFpVaHZiMnR6S0hadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRm1kV3hzU1c1MmIydGxJQ1ltSUdSaGRHRmJKMk5zWVhOekoxMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5Qmxibk4xY21VZ1kyOXNiR1ZqZEdsdVp5QmtaWEJ6SUdadmNpQmtaV1Z3SUdOc1lYTnpJR0pwYm1ScGJtZHpJR1p2Y2lCbWRYUjFjbVVnZFhCa1lYUmxjMXh1SUNBZ0lDQWdJQ0FnSUhSeVlYWmxjbk5sS0dSaGRHRmJKMk5zWVhOekoxMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hsYkcwdVpHRjBZU0FoUFQwZ2RtNXZaR1V1ZEdWNGRDa2dlMXh1SUNBZ0lDQWdaV3h0TG1SaGRHRWdQU0IyYm05a1pTNTBaWGgwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RISjFaVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnWVhOelpYSjBUbTlrWlUxaGRHTm9JQ2h1YjJSbExDQjJibTlrWlN3Z2FXNVdVSEpsS1NCN1hHNGdJQ0FnYVdZZ0tHbHpSR1ZtS0hadWIyUmxMblJoWnlrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMmJtOWtaUzUwWVdjdWFXNWtaWGhQWmlnbmRuVmxMV052YlhCdmJtVnVkQ2NwSUQwOVBTQXdJSHg4SUNoY2JpQWdJQ0FnSUNBZ0lXbHpWVzVyYm05M2JrVnNaVzFsYm5Ra0pERW9kbTV2WkdVc0lHbHVWbEJ5WlNrZ0ppWmNiaUFnSUNBZ0lDQWdkbTV2WkdVdWRHRm5MblJ2VEc5M1pYSkRZWE5sS0NrZ1BUMDlJQ2h1YjJSbExuUmhaMDVoYldVZ0ppWWdibTlrWlM1MFlXZE9ZVzFsTG5SdlRHOTNaWEpEWVhObEtDa3BYRzRnSUNBZ0lDQXBYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1YjJSbExtNXZaR1ZVZVhCbElEMDlQU0FvZG01dlpHVXVhWE5EYjIxdFpXNTBJRDhnT0NBNklETXBYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlIQmhkR05vSUNodmJHUldibTlrWlN3Z2RtNXZaR1VzSUdoNVpISmhkR2x1Wnl3Z2NtVnRiM1psVDI1c2VTd2djR0Z5Wlc1MFJXeHRMQ0J5WldaRmJHMHBJSHRjYmlBZ0lDQnBaaUFvYVhOVmJtUmxaaWgyYm05a1pTa3BJSHRjYmlBZ0lDQWdJR2xtSUNocGMwUmxaaWh2YkdSV2JtOWtaU2twSUhzZ2FXNTJiMnRsUkdWemRISnZlVWh2YjJzb2IyeGtWbTV2WkdVcE95QjlYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2FYTkpibWwwYVdGc1VHRjBZMmdnUFNCbVlXeHpaVHRjYmlBZ0lDQjJZWElnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsSUQwZ1cxMDdYRzVjYmlBZ0lDQnBaaUFvYVhOVmJtUmxaaWh2YkdSV2JtOWtaU2twSUh0Y2JpQWdJQ0FnSUM4dklHVnRjSFI1SUcxdmRXNTBJQ2hzYVd0bGJIa2dZWE1nWTI5dGNHOXVaVzUwS1N3Z1kzSmxZWFJsSUc1bGR5QnliMjkwSUdWc1pXMWxiblJjYmlBZ0lDQWdJR2x6U1c1cGRHbGhiRkJoZEdOb0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdOeVpXRjBaVVZzYlNoMmJtOWtaU3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsTENCd1lYSmxiblJGYkcwc0lISmxaa1ZzYlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFpoY2lCcGMxSmxZV3hGYkdWdFpXNTBJRDBnYVhORVpXWW9iMnhrVm01dlpHVXVibTlrWlZSNWNHVXBPMXh1SUNBZ0lDQWdhV1lnS0NGcGMxSmxZV3hGYkdWdFpXNTBJQ1ltSUhOaGJXVldibTlrWlNodmJHUldibTlrWlN3Z2RtNXZaR1VwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJSEJoZEdOb0lHVjRhWE4wYVc1bklISnZiM1FnYm05a1pWeHVJQ0FnSUNBZ0lDQndZWFJqYUZadWIyUmxLRzlzWkZadWIyUmxMQ0IyYm05a1pTd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0J5WlcxdmRtVlBibXg1S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMUpsWVd4RmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnYlc5MWJuUnBibWNnZEc4Z1lTQnlaV0ZzSUdWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCcFppQjBhR2x6SUdseklITmxjblpsY2kxeVpXNWtaWEpsWkNCamIyNTBaVzUwSUdGdVpDQnBaaUIzWlNCallXNGdjR1Z5Wm05eWJWeHVJQ0FnSUNBZ0lDQWdJQzh2SUdFZ2MzVmpZMlZ6YzJaMWJDQm9lV1J5WVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHOXNaRlp1YjJSbExtNXZaR1ZVZVhCbElEMDlQU0F4SUNZbUlHOXNaRlp1YjJSbExtaGhjMEYwZEhKcFluVjBaU2hUVTFKZlFWUlVVaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzlzWkZadWIyUmxMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaFRVMUpmUVZSVVVpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCb2VXUnlZWFJwYm1jZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FYTlVjblZsS0doNVpISmhkR2x1WnlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9lV1J5WVhSbEtHOXNaRlp1YjJSbExDQjJibTlrWlN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiblp2YTJWSmJuTmxjblJJYjI5cktIWnViMlJsTENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiMnhrVm01dlpHVmNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkVWFHVWdZMnhwWlc1MExYTnBaR1VnY21WdVpHVnlaV1FnZG1seWRIVmhiQ0JFVDAwZ2RISmxaU0JwY3lCdWIzUWdiV0YwWTJocGJtY2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNObGNuWmxjaTF5Wlc1a1pYSmxaQ0JqYjI1MFpXNTBMaUJVYUdseklHbHpJR3hwYTJWc2VTQmpZWFZ6WldRZ1lua2dhVzVqYjNKeVpXTjBJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkSVZFMU1JRzFoY210MWNDd2dabTl5SUdWNFlXMXdiR1VnYm1WemRHbHVaeUJpYkc5amF5MXNaWFpsYkNCbGJHVnRaVzUwY3lCcGJuTnBaR1VnSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p6eHdQaXdnYjNJZ2JXbHpjMmx1WnlBOGRHSnZaSGsrTGlCQ1lXbHNhVzVuSUdoNVpISmhkR2x2YmlCaGJtUWdjR1Z5Wm05eWJXbHVaeUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblpuVnNiQ0JqYkdsbGJuUXRjMmxrWlNCeVpXNWtaWEl1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQXZMeUJsYVhSb1pYSWdibTkwSUhObGNuWmxjaTF5Wlc1a1pYSmxaQ3dnYjNJZ2FIbGtjbUYwYVc5dUlHWmhhV3hsWkM1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJqY21WaGRHVWdZVzRnWlcxd2RIa2dibTlrWlNCaGJtUWdjbVZ3YkdGalpTQnBkRnh1SUNBZ0lDQWdJQ0FnSUc5c1pGWnViMlJsSUQwZ1pXMXdkSGxPYjJSbFFYUW9iMnhrVm01dlpHVXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjbVZ3YkdGamFXNW5JR1Y0YVhOMGFXNW5JR1ZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdkbUZ5SUc5c1pFVnNiU0E5SUc5c1pGWnViMlJsTG1Wc2JUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGNtVnVkRVZzYlNReElEMGdibTlrWlU5d2N5NXdZWEpsYm5ST2IyUmxLRzlzWkVWc2JTazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1kzSmxZWFJsSUc1bGR5QnViMlJsWEc0Z0lDQWdJQ0FnSUdOeVpXRjBaVVZzYlNoY2JpQWdJQ0FnSUNBZ0lDQjJibTlrWlN4Y2JpQWdJQ0FnSUNBZ0lDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXNYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1pYaDBjbVZ0Wld4NUlISmhjbVVnWldSblpTQmpZWE5sT2lCa2J5QnViM1FnYVc1elpYSjBJR2xtSUc5c1pDQmxiR1Z0Wlc1MElHbHpJR2x1SUdGY2JpQWdJQ0FnSUNBZ0lDQXZMeUJzWldGMmFXNW5JSFJ5WVc1emFYUnBiMjR1SUU5dWJIa2dhR0Z3Y0dWdWN5QjNhR1Z1SUdOdmJXSnBibWx1WnlCMGNtRnVjMmwwYVc5dUlDdGNiaUFnSUNBZ0lDQWdJQ0F2THlCclpXVndMV0ZzYVhabElDc2dTRTlEY3k0Z0tDTTBOVGt3S1Z4dUlDQWdJQ0FnSUNBZ0lHOXNaRVZzYlM1ZmJHVmhkbVZEWWlBL0lHNTFiR3dnT2lCd1lYSmxiblJGYkcwa01TeGNiaUFnSUNBZ0lDQWdJQ0J1YjJSbFQzQnpMbTVsZUhSVGFXSnNhVzVuS0c5c1pFVnNiU2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUIxY0dSaGRHVWdjR0Z5Wlc1MElIQnNZV05sYUc5c1pHVnlJRzV2WkdVZ1pXeGxiV1Z1ZEN3Z2NtVmpkWEp6YVhabGJIbGNiaUFnSUNBZ0lDQWdhV1lnS0dselJHVm1LSFp1YjJSbExuQmhjbVZ1ZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ1lXNWpaWE4wYjNJZ1BTQjJibTlrWlM1d1lYSmxiblE3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSEJoZEdOb1lXSnNaU0E5SUdselVHRjBZMmhoWW14bEtIWnViMlJsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb1lXNWpaWE4wYjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1kySnpMbVJsYzNSeWIza3ViR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJKekxtUmxjM1J5YjNsYmFWMG9ZVzVqWlhOMGIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1alpYTjBiM0l1Wld4dElEMGdkbTV2WkdVdVpXeHRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJoZEdOb1lXSnNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSkRFZ1BTQXdPeUJwSkRFZ1BDQmpZbk11WTNKbFlYUmxMbXhsYm1kMGFEc2dLeXRwSkRFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZbk11WTNKbFlYUmxXMmtrTVYwb1pXMXdkSGxPYjJSbExDQmhibU5sYzNSdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJelkxTVROY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXNTJiMnRsSUdsdWMyVnlkQ0JvYjI5cmN5QjBhR0YwSUcxaGVTQm9ZWFpsSUdKbFpXNGdiV1Z5WjJWa0lHSjVJR055WldGMFpTQm9iMjlyY3k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pTNW5MaUJtYjNJZ1pHbHlaV04wYVhabGN5QjBhR0YwSUhWelpYTWdkR2hsSUZ3aWFXNXpaWEowWldSY0lpQm9iMjlyTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FXNXpaWEowSUQwZ1lXNWpaWE4wYjNJdVpHRjBZUzVvYjI5ckxtbHVjMlZ5ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHVjMlZ5ZEM1dFpYSm5aV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpkR0Z5ZENCaGRDQnBibVJsZUNBeElIUnZJR0YyYjJsa0lISmxMV2x1ZG05cmFXNW5JR052YlhCdmJtVnVkQ0J0YjNWdWRHVmtJR2h2YjJ0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcEpESWdQU0F4T3lCcEpESWdQQ0JwYm5ObGNuUXVabTV6TG14bGJtZDBhRHNnYVNReUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWMyVnlkQzVtYm5OYmFTUXlYU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm5hWE4wWlhKU1pXWW9ZVzVqWlhOMGIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1alpYTjBiM0lnUFNCaGJtTmxjM1J2Y2k1d1lYSmxiblE3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1pHVnpkSEp2ZVNCdmJHUWdibTlrWlZ4dUlDQWdJQ0FnSUNCcFppQW9hWE5FWldZb2NHRnlaVzUwUld4dEpERXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnRiM1psVm01dlpHVnpLSEJoY21WdWRFVnNiU1F4TENCYmIyeGtWbTV2WkdWZExDQXdMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBjMFJsWmlodmJHUldibTlrWlM1MFlXY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXNTJiMnRsUkdWemRISnZlVWh2YjJzb2IyeGtWbTV2WkdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXNTJiMnRsU1c1elpYSjBTRzl2YXloMmJtOWtaU3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsTENCcGMwbHVhWFJwWVd4UVlYUmphQ2s3WEc0Z0lDQWdjbVYwZFhKdUlIWnViMlJsTG1Wc2JWeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzUyWVhJZ1pHbHlaV04wYVhabGN5QTlJSHRjYmlBZ1kzSmxZWFJsT2lCMWNHUmhkR1ZFYVhKbFkzUnBkbVZ6TEZ4dUlDQjFjR1JoZEdVNklIVndaR0YwWlVScGNtVmpkR2wyWlhNc1hHNGdJR1JsYzNSeWIzazZJR1oxYm1OMGFXOXVJSFZ1WW1sdVpFUnBjbVZqZEdsMlpYTWdLSFp1YjJSbEtTQjdYRzRnSUNBZ2RYQmtZWFJsUkdseVpXTjBhWFpsY3loMmJtOWtaU3dnWlcxd2RIbE9iMlJsS1R0Y2JpQWdmVnh1ZlR0Y2JseHVablZ1WTNScGIyNGdkWEJrWVhSbFJHbHlaV04wYVhabGN5QW9iMnhrVm01dlpHVXNJSFp1YjJSbEtTQjdYRzRnSUdsbUlDaHZiR1JXYm05a1pTNWtZWFJoTG1ScGNtVmpkR2wyWlhNZ2ZId2dkbTV2WkdVdVpHRjBZUzVrYVhKbFkzUnBkbVZ6S1NCN1hHNGdJQ0FnWDNWd1pHRjBaU2h2YkdSV2JtOWtaU3dnZG01dlpHVXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5MWNHUmhkR1VnS0c5c1pGWnViMlJsTENCMmJtOWtaU2tnZTF4dUlDQjJZWElnYVhORGNtVmhkR1VnUFNCdmJHUldibTlrWlNBOVBUMGdaVzF3ZEhsT2IyUmxPMXh1SUNCMllYSWdhWE5FWlhOMGNtOTVJRDBnZG01dlpHVWdQVDA5SUdWdGNIUjVUbTlrWlR0Y2JpQWdkbUZ5SUc5c1pFUnBjbk1nUFNCdWIzSnRZV3hwZW1WRWFYSmxZM1JwZG1WekpERW9iMnhrVm01dlpHVXVaR0YwWVM1a2FYSmxZM1JwZG1WekxDQnZiR1JXYm05a1pTNWpiMjUwWlhoMEtUdGNiaUFnZG1GeUlHNWxkMFJwY25NZ1BTQnViM0p0WVd4cGVtVkVhWEpsWTNScGRtVnpKREVvZG01dlpHVXVaR0YwWVM1a2FYSmxZM1JwZG1WekxDQjJibTlrWlM1amIyNTBaWGgwS1R0Y2JseHVJQ0IyWVhJZ1pHbHljMWRwZEdoSmJuTmxjblFnUFNCYlhUdGNiaUFnZG1GeUlHUnBjbk5YYVhSb1VHOXpkSEJoZEdOb0lEMGdXMTA3WEc1Y2JpQWdkbUZ5SUd0bGVTd2diMnhrUkdseUxDQmthWEk3WEc0Z0lHWnZjaUFvYTJWNUlHbHVJRzVsZDBScGNuTXBJSHRjYmlBZ0lDQnZiR1JFYVhJZ1BTQnZiR1JFYVhKelcydGxlVjA3WEc0Z0lDQWdaR2x5SUQwZ2JtVjNSR2x5YzF0clpYbGRPMXh1SUNBZ0lHbG1JQ2doYjJ4a1JHbHlLU0I3WEc0Z0lDQWdJQ0F2THlCdVpYY2daR2x5WldOMGFYWmxMQ0JpYVc1a1hHNGdJQ0FnSUNCallXeHNTRzl2YXlReEtHUnBjaXdnSjJKcGJtUW5MQ0IyYm05a1pTd2diMnhrVm01dlpHVXBPMXh1SUNBZ0lDQWdhV1lnS0dScGNpNWtaV1lnSmlZZ1pHbHlMbVJsWmk1cGJuTmxjblJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQmthWEp6VjJsMGFFbHVjMlZ5ZEM1d2RYTm9LR1JwY2lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUdWNGFYTjBhVzVuSUdScGNtVmpkR2wyWlN3Z2RYQmtZWFJsWEc0Z0lDQWdJQ0JrYVhJdWIyeGtWbUZzZFdVZ1BTQnZiR1JFYVhJdWRtRnNkV1U3WEc0Z0lDQWdJQ0JqWVd4c1NHOXZheVF4S0dScGNpd2dKM1Z3WkdGMFpTY3NJSFp1YjJSbExDQnZiR1JXYm05a1pTazdYRzRnSUNBZ0lDQnBaaUFvWkdseUxtUmxaaUFtSmlCa2FYSXVaR1ZtTG1OdmJYQnZibVZ1ZEZWd1pHRjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ1pHbHljMWRwZEdoUWIzTjBjR0YwWTJndWNIVnphQ2hrYVhJcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHbG1JQ2hrYVhKelYybDBhRWx1YzJWeWRDNXNaVzVuZEdncElIdGNiaUFnSUNCMllYSWdZMkZzYkVsdWMyVnlkQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2daR2x5YzFkcGRHaEpibk5sY25RdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnWTJGc2JFaHZiMnNrTVNoa2FYSnpWMmwwYUVsdWMyVnlkRnRwWFN3Z0oybHVjMlZ5ZEdWa0p5d2dkbTV2WkdVc0lHOXNaRlp1YjJSbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUdsbUlDaHBjME55WldGMFpTa2dlMXh1SUNBZ0lDQWdiV1Z5WjJWV1RtOWtaVWh2YjJzb2RtNXZaR1VzSUNkcGJuTmxjblFuTENCallXeHNTVzV6WlhKMEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWTJGc2JFbHVjMlZ5ZENncE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHbG1JQ2hrYVhKelYybDBhRkJ2YzNSd1lYUmphQzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnRaWEpuWlZaT2IyUmxTRzl2YXloMmJtOWtaU3dnSjNCdmMzUndZWFJqYUNjc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWkdseWMxZHBkR2hRYjNOMGNHRjBZMmd1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdZMkZzYkVodmIyc2tNU2hrYVhKelYybDBhRkJ2YzNSd1lYUmphRnRwWFN3Z0oyTnZiWEJ2Ym1WdWRGVndaR0YwWldRbkxDQjJibTlrWlN3Z2IyeGtWbTV2WkdVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0NGcGMwTnlaV0YwWlNrZ2UxeHVJQ0FnSUdadmNpQW9hMlY1SUdsdUlHOXNaRVJwY25NcElIdGNiaUFnSUNBZ0lHbG1JQ2doYm1WM1JHbHljMXRyWlhsZEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUc1dklHeHZibWRsY2lCd2NtVnpaVzUwTENCMWJtSnBibVJjYmlBZ0lDQWdJQ0FnWTJGc2JFaHZiMnNrTVNodmJHUkVhWEp6VzJ0bGVWMHNJQ2QxYm1KcGJtUW5MQ0J2YkdSV2JtOWtaU3dnYjJ4a1ZtNXZaR1VzSUdselJHVnpkSEp2ZVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JuWmhjaUJsYlhCMGVVMXZaR2xtYVdWeWN5QTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc1Y2JtWjFibU4wYVc5dUlHNXZjbTFoYkdsNlpVUnBjbVZqZEdsMlpYTWtNU0FvWEc0Z0lHUnBjbk1zWEc0Z0lIWnRYRzRwSUh0Y2JpQWdkbUZ5SUhKbGN5QTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lHbG1JQ2doWkdseWN5a2dlMXh1SUNBZ0lDOHZJQ1JtYkc5M0xXUnBjMkZpYkdVdGJHbHVaVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTmNiaUFnZlZ4dUlDQjJZWElnYVN3Z1pHbHlPMXh1SUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWkdseWN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR1JwY2lBOUlHUnBjbk5iYVYwN1hHNGdJQ0FnYVdZZ0tDRmthWEl1Ylc5a2FXWnBaWEp6S1NCN1hHNGdJQ0FnSUNBdkx5QWtabXh2ZHkxa2FYTmhZbXhsTFd4cGJtVmNiaUFnSUNBZ0lHUnBjaTV0YjJScFptbGxjbk1nUFNCbGJYQjBlVTF2WkdsbWFXVnljenRjYmlBZ0lDQjlYRzRnSUNBZ2NtVnpXMmRsZEZKaGQwUnBjazVoYldVb1pHbHlLVjBnUFNCa2FYSTdYRzRnSUNBZ1pHbHlMbVJsWmlBOUlISmxjMjlzZG1WQmMzTmxkQ2gyYlM0a2IzQjBhVzl1Y3l3Z0oyUnBjbVZqZEdsMlpYTW5MQ0JrYVhJdWJtRnRaU3dnZEhKMVpTazdYRzRnSUgxY2JpQWdMeThnSkdac2IzY3RaR2x6WVdKc1pTMXNhVzVsWEc0Z0lISmxkSFZ5YmlCeVpYTmNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBVbUYzUkdseVRtRnRaU0FvWkdseUtTQjdYRzRnSUhKbGRIVnliaUJrYVhJdWNtRjNUbUZ0WlNCOGZDQW9LR1JwY2k1dVlXMWxLU0FySUZ3aUxsd2lJQ3NnS0U5aWFtVmpkQzVyWlhsektHUnBjaTV0YjJScFptbGxjbk1nZkh3Z2UzMHBMbXB2YVc0b0p5NG5LU2twWEc1OVhHNWNibVoxYm1OMGFXOXVJR05oYkd4SWIyOXJKREVnS0dScGNpd2dhRzl2YXl3Z2RtNXZaR1VzSUc5c1pGWnViMlJsTENCcGMwUmxjM1J5YjNrcElIdGNiaUFnZG1GeUlHWnVJRDBnWkdseUxtUmxaaUFtSmlCa2FYSXVaR1ZtVzJodmIydGRPMXh1SUNCcFppQW9abTRwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1ptNG9kbTV2WkdVdVpXeHRMQ0JrYVhJc0lIWnViMlJsTENCdmJHUldibTlrWlN3Z2FYTkVaWE4wY205NUtUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQm9ZVzVrYkdWRmNuSnZjaWhsTENCMmJtOWtaUzVqYjI1MFpYaDBMQ0FvWENKa2FYSmxZM1JwZG1VZ1hDSWdLeUFvWkdseUxtNWhiV1VwSUNzZ1hDSWdYQ0lnS3lCb2IyOXJJQ3NnWENJZ2FHOXZhMXdpS1NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JuWmhjaUJpWVhObFRXOWtkV3hsY3lBOUlGdGNiaUFnY21WbUxGeHVJQ0JrYVhKbFkzUnBkbVZ6WEc1ZE8xeHVYRzR2S2lBZ0tpOWNibHh1Wm5WdVkzUnBiMjRnZFhCa1lYUmxRWFIwY25NZ0tHOXNaRlp1YjJSbExDQjJibTlrWlNrZ2UxeHVJQ0IyWVhJZ2IzQjBjeUE5SUhadWIyUmxMbU52YlhCdmJtVnVkRTl3ZEdsdmJuTTdYRzRnSUdsbUlDaHBjMFJsWmlodmNIUnpLU0FtSmlCdmNIUnpMa04wYjNJdWIzQjBhVzl1Y3k1cGJtaGxjbWwwUVhSMGNuTWdQVDA5SUdaaGJITmxLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmlBZ2FXWWdLR2x6Vlc1a1pXWW9iMnhrVm01dlpHVXVaR0YwWVM1aGRIUnljeWtnSmlZZ2FYTlZibVJsWmloMmJtOWtaUzVrWVhSaExtRjBkSEp6S1NrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJSFpoY2lCclpYa3NJR04xY2l3Z2IyeGtPMXh1SUNCMllYSWdaV3h0SUQwZ2RtNXZaR1V1Wld4dE8xeHVJQ0IyWVhJZ2IyeGtRWFIwY25NZ1BTQnZiR1JXYm05a1pTNWtZWFJoTG1GMGRISnpJSHg4SUh0OU8xeHVJQ0IyWVhJZ1lYUjBjbk1nUFNCMmJtOWtaUzVrWVhSaExtRjBkSEp6SUh4OElIdDlPMXh1SUNBdkx5QmpiRzl1WlNCdlluTmxjblpsWkNCdlltcGxZM1J6TENCaGN5QjBhR1VnZFhObGNpQndjbTlpWVdKc2VTQjNZVzUwY3lCMGJ5QnRkWFJoZEdVZ2FYUmNiaUFnYVdZZ0tHbHpSR1ZtS0dGMGRISnpMbDlmYjJKZlh5a3BJSHRjYmlBZ0lDQmhkSFJ5Y3lBOUlIWnViMlJsTG1SaGRHRXVZWFIwY25NZ1BTQmxlSFJsYm1Rb2UzMHNJR0YwZEhKektUdGNiaUFnZlZ4dVhHNGdJR1p2Y2lBb2EyVjVJR2x1SUdGMGRISnpLU0I3WEc0Z0lDQWdZM1Z5SUQwZ1lYUjBjbk5iYTJWNVhUdGNiaUFnSUNCdmJHUWdQU0J2YkdSQmRIUnljMXRyWlhsZE8xeHVJQ0FnSUdsbUlDaHZiR1FnSVQwOUlHTjFjaWtnZTF4dUlDQWdJQ0FnYzJWMFFYUjBjaWhsYkcwc0lHdGxlU3dnWTNWeUtUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ0x5OGdJelF6T1RFNklHbHVJRWxGT1N3Z2MyVjBkR2x1WnlCMGVYQmxJR05oYmlCeVpYTmxkQ0IyWVd4MVpTQm1iM0lnYVc1d2RYUmJkSGx3WlQxeVlXUnBiMTFjYmlBZ0x5OGdJelkyTmpZNklFbEZMMFZrWjJVZ1ptOXlZMlZ6SUhCeWIyZHlaWE56SUhaaGJIVmxJR1J2ZDI0Z2RHOGdNU0JpWldadmNtVWdjMlYwZEdsdVp5QmhJRzFoZUZ4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdhV1lnS0NocGMwbEZJSHg4SUdselJXUm5aU2tnSmlZZ1lYUjBjbk11ZG1Gc2RXVWdJVDA5SUc5c1pFRjBkSEp6TG5aaGJIVmxLU0I3WEc0Z0lDQWdjMlYwUVhSMGNpaGxiRzBzSUNkMllXeDFaU2NzSUdGMGRISnpMblpoYkhWbEtUdGNiaUFnZlZ4dUlDQm1iM0lnS0d0bGVTQnBiaUJ2YkdSQmRIUnljeWtnZTF4dUlDQWdJR2xtSUNocGMxVnVaR1ZtS0dGMGRISnpXMnRsZVYwcEtTQjdYRzRnSUNBZ0lDQnBaaUFvYVhOWWJHbHVheWhyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJR1ZzYlM1eVpXMXZkbVZCZEhSeWFXSjFkR1ZPVXloNGJHbHVhMDVUTENCblpYUlliR2x1YTFCeWIzQW9hMlY1S1NrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDRnBjMFZ1ZFcxbGNtRjBaV1JCZEhSeUtHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ1pXeHRMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaHJaWGtwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCelpYUkJkSFJ5SUNobGJDd2dhMlY1TENCMllXeDFaU2tnZTF4dUlDQnBaaUFvYVhOQ2IyOXNaV0Z1UVhSMGNpaHJaWGtwS1NCN1hHNGdJQ0FnTHk4Z2MyVjBJR0YwZEhKcFluVjBaU0JtYjNJZ1lteGhibXNnZG1Gc2RXVmNiaUFnSUNBdkx5QmxMbWN1SUR4dmNIUnBiMjRnWkdsellXSnNaV1ErVTJWc1pXTjBJRzl1WlR3dmIzQjBhVzl1UGx4dUlDQWdJR2xtSUNocGMwWmhiSE41UVhSMGNsWmhiSFZsS0haaGJIVmxLU2tnZTF4dUlDQWdJQ0FnWld3dWNtVnRiM1psUVhSMGNtbGlkWFJsS0d0bGVTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklIUmxZMmh1YVdOaGJHeDVJR0ZzYkc5M1puVnNiSE5qY21WbGJpQnBjeUJoSUdKdmIyeGxZVzRnWVhSMGNtbGlkWFJsSUdadmNpQThhV1p5WVcxbFBpeGNiaUFnSUNBZ0lDOHZJR0oxZENCR2JHRnphQ0JsZUhCbFkzUnpJR0VnZG1Gc2RXVWdiMllnWENKMGNuVmxYQ0lnZDJobGJpQjFjMlZrSUc5dUlEeGxiV0psWkQ0Z2RHRm5YRzRnSUNBZ0lDQjJZV3gxWlNBOUlHdGxlU0E5UFQwZ0oyRnNiRzkzWm5Wc2JITmpjbVZsYmljZ0ppWWdaV3d1ZEdGblRtRnRaU0E5UFQwZ0owVk5Ra1ZFSjF4dUlDQWdJQ0FnSUNBL0lDZDBjblZsSjF4dUlDQWdJQ0FnSUNBNklHdGxlVHRjYmlBZ0lDQWdJR1ZzTG5ObGRFRjBkSEpwWW5WMFpTaHJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb2FYTkZiblZ0WlhKaGRHVmtRWFIwY2loclpYa3BLU0I3WEc0Z0lDQWdaV3d1YzJWMFFYUjBjbWxpZFhSbEtHdGxlU3dnYVhOR1lXeHplVUYwZEhKV1lXeDFaU2gyWVd4MVpTa2dmSHdnZG1Gc2RXVWdQVDA5SUNkbVlXeHpaU2NnUHlBblptRnNjMlVuSURvZ0ozUnlkV1VuS1R0Y2JpQWdmU0JsYkhObElHbG1JQ2hwYzFoc2FXNXJLR3RsZVNrcElIdGNiaUFnSUNCcFppQW9hWE5HWVd4emVVRjBkSEpXWVd4MVpTaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lHVnNMbkpsYlc5MlpVRjBkSEpwWW5WMFpVNVRLSGhzYVc1clRsTXNJR2RsZEZoc2FXNXJVSEp2Y0NoclpYa3BLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1pXd3VjMlYwUVhSMGNtbGlkWFJsVGxNb2VHeHBibXRPVXl3Z2EyVjVMQ0IyWVd4MVpTazdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHbG1JQ2hwYzBaaGJITjVRWFIwY2xaaGJIVmxLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdaV3d1Y21WdGIzWmxRWFIwY21saWRYUmxLR3RsZVNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUNNM01UTTRPaUJKUlRFd0lDWWdNVEVnWm1seVpYTWdhVzV3ZFhRZ1pYWmxiblFnZDJobGJpQnpaWFIwYVc1bklIQnNZV05sYUc5c1pHVnlJRzl1WEc0Z0lDQWdJQ0F2THlBOGRHVjRkR0Z5WldFK0xpNHVJR0pzYjJOcklIUm9aU0JtYVhKemRDQnBibkIxZENCbGRtVnVkQ0JoYm1RZ2NtVnRiM1psSUhSb1pTQmliRzlqYTJWeVhHNGdJQ0FnSUNBdkx5QnBiVzFsWkdsaGRHVnNlUzVjYmlBZ0lDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0JwYzBsRklDWW1JQ0ZwYzBsRk9TQW1KbHh1SUNBZ0lDQWdJQ0JsYkM1MFlXZE9ZVzFsSUQwOVBTQW5WRVZZVkVGU1JVRW5JQ1ltWEc0Z0lDQWdJQ0FnSUd0bGVTQTlQVDBnSjNCc1lXTmxhRzlzWkdWeUp5QW1KaUFoWld3dVgxOXBaWEJvWEc0Z0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0pzYjJOclpYSWdQU0JtZFc1amRHbHZiaUFvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1V1YzNSdmNFbHRiV1ZrYVdGMFpWQnliM0JoWjJGMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1pXd3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduYVc1d2RYUW5MQ0JpYkc5amEyVnlLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ1pXd3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25hVzV3ZFhRbkxDQmliRzlqYTJWeUtUdGNiaUFnSUNBZ0lDQWdMeThnSkdac2IzY3RaR2x6WVdKc1pTMXNhVzVsWEc0Z0lDQWdJQ0FnSUdWc0xsOWZhV1Z3YUNBOUlIUnlkV1U3SUM4cUlFbEZJSEJzWVdObGFHOXNaR1Z5SUhCaGRHTm9aV1FnS2k5Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdWc0xuTmxkRUYwZEhKcFluVjBaU2hyWlhrc0lIWmhiSFZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dWRtRnlJR0YwZEhKeklEMGdlMXh1SUNCamNtVmhkR1U2SUhWd1pHRjBaVUYwZEhKekxGeHVJQ0IxY0dSaGRHVTZJSFZ3WkdGMFpVRjBkSEp6WEc1OU8xeHVYRzR2S2lBZ0tpOWNibHh1Wm5WdVkzUnBiMjRnZFhCa1lYUmxRMnhoYzNNZ0tHOXNaRlp1YjJSbExDQjJibTlrWlNrZ2UxeHVJQ0IyWVhJZ1pXd2dQU0IyYm05a1pTNWxiRzA3WEc0Z0lIWmhjaUJrWVhSaElEMGdkbTV2WkdVdVpHRjBZVHRjYmlBZ2RtRnlJRzlzWkVSaGRHRWdQU0J2YkdSV2JtOWtaUzVrWVhSaE8xeHVJQ0JwWmlBb1hHNGdJQ0FnYVhOVmJtUmxaaWhrWVhSaExuTjBZWFJwWTBOc1lYTnpLU0FtSmx4dUlDQWdJR2x6Vlc1a1pXWW9aR0YwWVM1amJHRnpjeWtnSmlZZ0tGeHVJQ0FnSUNBZ2FYTlZibVJsWmlodmJHUkVZWFJoS1NCOGZDQW9YRzRnSUNBZ0lDQWdJR2x6Vlc1a1pXWW9iMnhrUkdGMFlTNXpkR0YwYVdORGJHRnpjeWtnSmlaY2JpQWdJQ0FnSUNBZ2FYTlZibVJsWmlodmJHUkVZWFJoTG1Oc1lYTnpLVnh1SUNBZ0lDQWdLVnh1SUNBZ0lDbGNiaUFnS1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JseHVJQ0IyWVhJZ1kyeHpJRDBnWjJWdVEyeGhjM05HYjNKV2JtOWtaU2gyYm05a1pTazdYRzVjYmlBZ0x5OGdhR0Z1Wkd4bElIUnlZVzV6YVhScGIyNGdZMnhoYzNObGMxeHVJQ0IyWVhJZ2RISmhibk5wZEdsdmJrTnNZWE56SUQwZ1pXd3VYM1J5WVc1emFYUnBiMjVEYkdGemMyVnpPMXh1SUNCcFppQW9hWE5FWldZb2RISmhibk5wZEdsdmJrTnNZWE56S1NrZ2UxeHVJQ0FnSUdOc2N5QTlJR052Ym1OaGRDaGpiSE1zSUhOMGNtbHVaMmxtZVVOc1lYTnpLSFJ5WVc1emFYUnBiMjVEYkdGemN5a3BPMXh1SUNCOVhHNWNiaUFnTHk4Z2MyVjBJSFJvWlNCamJHRnpjMXh1SUNCcFppQW9ZMnh6SUNFOVBTQmxiQzVmY0hKbGRrTnNZWE56S1NCN1hHNGdJQ0FnWld3dWMyVjBRWFIwY21saWRYUmxLQ2RqYkdGemN5Y3NJR05zY3lrN1hHNGdJQ0FnWld3dVgzQnlaWFpEYkdGemN5QTlJR05zY3p0Y2JpQWdmVnh1ZlZ4dVhHNTJZWElnYTJ4aGMzTWdQU0I3WEc0Z0lHTnlaV0YwWlRvZ2RYQmtZWFJsUTJ4aGMzTXNYRzRnSUhWd1pHRjBaVG9nZFhCa1lYUmxRMnhoYzNOY2JuMDdYRzVjYmk4cUlDQXFMMXh1WEc0dktpQWdLaTljYmx4dVhHNWNibHh1WEc1Y2JseHVYRzVjYmk4dklHRmtaQ0JoSUhKaGR5QmhkSFJ5SUNoMWMyVWdkR2hwY3lCcGJpQndjbVZVY21GdWMyWnZjbTF6S1Z4dVhHNWNibHh1WEc1Y2JseHVYRzVjYmk4dklHNXZkR1U2SUhSb2FYTWdiMjVzZVNCeVpXMXZkbVZ6SUhSb1pTQmhkSFJ5SUdaeWIyMGdkR2hsSUVGeWNtRjVJQ2hoZEhSeWMweHBjM1FwSUhOdklIUm9ZWFFnYVhSY2JpOHZJR1J2WlhOdUozUWdaMlYwSUhCeWIyTmxjM05sWkNCaWVTQndjbTlqWlhOelFYUjBjbk11WEc0dkx5QkNlU0JrWldaaGRXeDBJR2wwSUdSdlpYTWdUazlVSUhKbGJXOTJaU0JwZENCbWNtOXRJSFJvWlNCdFlYQWdLR0YwZEhKelRXRndLU0JpWldOaGRYTmxJSFJvWlNCdFlYQWdhWE5jYmk4dklHNWxaV1JsWkNCa2RYSnBibWNnWTI5a1pXZGxiaTVjYmx4dUx5b2dJQ292WEc1Y2JpOHFLbHh1SUNvZ1EzSnZjM010Y0d4aGRHWnZjbTBnWTI5a1pTQm5aVzVsY21GMGFXOXVJR1p2Y2lCamIyMXdiMjVsYm5RZ2RpMXRiMlJsYkZ4dUlDb3ZYRzVjYmx4dUx5b3FYRzRnS2lCRGNtOXpjeTF3YkdGMFptOXliU0JqYjJSbFoyVnVJR2hsYkhCbGNpQm1iM0lnWjJWdVpYSmhkR2x1WnlCMkxXMXZaR1ZzSUhaaGJIVmxJR0Z6YzJsbmJtMWxiblFnWTI5a1pTNWNiaUFxTDF4dVhHNHZLaUFnS2k5Y2JseHVMeThnYVc0Z2MyOXRaU0JqWVhObGN5d2dkR2hsSUdWMlpXNTBJSFZ6WldRZ2FHRnpJSFJ2SUdKbElHUmxkR1Z5YldsdVpXUWdZWFFnY25WdWRHbHRaVnh1THk4Z2MyOGdkMlVnZFhObFpDQnpiMjFsSUhKbGMyVnlkbVZrSUhSdmEyVnVjeUJrZFhKcGJtY2dZMjl0Y0dsc1pTNWNiblpoY2lCU1FVNUhSVjlVVDB0RlRpQTlJQ2RmWDNJbk8xeHVkbUZ5SUVOSVJVTkxRazlZWDFKQlJFbFBYMVJQUzBWT0lEMGdKMTlmWXljN1hHNWNiaThxSUNBcUwxeHVYRzR2THlCdWIzSnRZV3hwZW1VZ2RpMXRiMlJsYkNCbGRtVnVkQ0IwYjJ0bGJuTWdkR2hoZENCallXNGdiMjVzZVNCaVpTQmtaWFJsY20xcGJtVmtJR0YwSUhKMWJuUnBiV1V1WEc0dkx5QnBkQ2R6SUdsdGNHOXlkR0Z1ZENCMGJ5QndiR0ZqWlNCMGFHVWdaWFpsYm5RZ1lYTWdkR2hsSUdacGNuTjBJR2x1SUhSb1pTQmhjbkpoZVNCaVpXTmhkWE5sWEc0dkx5QjBhR1VnZDJodmJHVWdjRzlwYm5RZ2FYTWdaVzV6ZFhKcGJtY2dkR2hsSUhZdGJXOWtaV3dnWTJGc2JHSmhZMnNnWjJWMGN5QmpZV3hzWldRZ1ltVm1iM0psWEc0dkx5QjFjMlZ5TFdGMGRHRmphR1ZrSUdoaGJtUnNaWEp6TGx4dVpuVnVZM1JwYjI0Z2JtOXliV0ZzYVhwbFJYWmxiblJ6SUNodmJpa2dlMXh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2FXWWdLR2x6UkdWbUtHOXVXMUpCVGtkRlgxUlBTMFZPWFNrcElIdGNiaUFnSUNBdkx5QkpSU0JwYm5CMWRGdDBlWEJsUFhKaGJtZGxYU0J2Ym14NUlITjFjSEJ2Y25SeklHQmphR0Z1WjJWZ0lHVjJaVzUwWEc0Z0lDQWdkbUZ5SUdWMlpXNTBJRDBnYVhOSlJTQS9JQ2RqYUdGdVoyVW5JRG9nSjJsdWNIVjBKenRjYmlBZ0lDQnZibHRsZG1WdWRGMGdQU0JiWFM1amIyNWpZWFFvYjI1YlVrRk9SMFZmVkU5TFJVNWRMQ0J2Ymx0bGRtVnVkRjBnZkh3Z1cxMHBPMXh1SUNBZ0lHUmxiR1YwWlNCdmJsdFNRVTVIUlY5VVQwdEZUbDA3WEc0Z0lIMWNiaUFnTHk4Z1ZHaHBjeUIzWVhNZ2IzSnBaMmx1WVd4c2VTQnBiblJsYm1SbFpDQjBieUJtYVhnZ0l6UTFNakVnWW5WMElHNXZJR3h2Ym1kbGNpQnVaV05sYzNOaGNubGNiaUFnTHk4Z1lXWjBaWElnTWk0MUxpQkxaV1Z3YVc1bklHbDBJR1p2Y2lCaVlXTnJkMkZ5WkhNZ1kyOXRjR0YwSUhkcGRHZ2daMlZ1WlhKaGRHVmtJR052WkdVZ1puSnZiU0E4SURJdU5GeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnYVdZZ0tHbHpSR1ZtS0c5dVcwTklSVU5MUWs5WVgxSkJSRWxQWDFSUFMwVk9YU2twSUh0Y2JpQWdJQ0J2Ymk1amFHRnVaMlVnUFNCYlhTNWpiMjVqWVhRb2IyNWJRMGhGUTB0Q1QxaGZVa0ZFU1U5ZlZFOUxSVTVkTENCdmJpNWphR0Z1WjJVZ2ZId2dXMTBwTzF4dUlDQWdJR1JsYkdWMFpTQnZibHREU0VWRFMwSlBXRjlTUVVSSlQxOVVUMHRGVGwwN1hHNGdJSDFjYm4xY2JseHVkbUZ5SUhSaGNtZGxkQ1F4TzF4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWUGJtTmxTR0Z1Wkd4bGNpQW9hR0Z1Wkd4bGNpd2daWFpsYm5Rc0lHTmhjSFIxY21VcElIdGNiaUFnZG1GeUlGOTBZWEpuWlhRZ1BTQjBZWEpuWlhRa01Uc2dMeThnYzJGMlpTQmpkWEp5Wlc1MElIUmhjbWRsZENCbGJHVnRaVzUwSUdsdUlHTnNiM04xY21WY2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHOXVZMlZJWVc1a2JHVnlJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ2NtVnpJRDBnYUdGdVpHeGxjaTVoY0hCc2VTaHVkV3hzTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUdsbUlDaHlaWE1nSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUhKbGJXOTJaU1F5S0dWMlpXNTBMQ0J2Ym1ObFNHRnVaR3hsY2l3Z1kyRndkSFZ5WlN3Z1gzUmhjbWRsZENrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRmtaQ1F4SUNoY2JpQWdaWFpsYm5Rc1hHNGdJR2hoYm1Sc1pYSXNYRzRnSUc5dVkyVWtKREVzWEc0Z0lHTmhjSFIxY21Vc1hHNGdJSEJoYzNOcGRtVmNiaWtnZTF4dUlDQm9ZVzVrYkdWeUlEMGdkMmwwYUUxaFkzSnZWR0Z6YXlob1lXNWtiR1Z5S1R0Y2JpQWdhV1lnS0c5dVkyVWtKREVwSUhzZ2FHRnVaR3hsY2lBOUlHTnlaV0YwWlU5dVkyVklZVzVrYkdWeUtHaGhibVJzWlhJc0lHVjJaVzUwTENCallYQjBkWEpsS1RzZ2ZWeHVJQ0IwWVhKblpYUWtNUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRnh1SUNBZ0lHVjJaVzUwTEZ4dUlDQWdJR2hoYm1Sc1pYSXNYRzRnSUNBZ2MzVndjRzl5ZEhOUVlYTnphWFpsWEc0Z0lDQWdJQ0EvSUhzZ1kyRndkSFZ5WlRvZ1kyRndkSFZ5WlN3Z2NHRnpjMmwyWlRvZ2NHRnpjMmwyWlNCOVhHNGdJQ0FnSUNBNklHTmhjSFIxY21WY2JpQWdLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ0YjNabEpESWdLRnh1SUNCbGRtVnVkQ3hjYmlBZ2FHRnVaR3hsY2l4Y2JpQWdZMkZ3ZEhWeVpTeGNiaUFnWDNSaGNtZGxkRnh1S1NCN1hHNGdJQ2hmZEdGeVoyVjBJSHg4SUhSaGNtZGxkQ1F4S1M1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtGeHVJQ0FnSUdWMlpXNTBMRnh1SUNBZ0lHaGhibVJzWlhJdVgzZHBkR2hVWVhOcklIeDhJR2hoYm1Sc1pYSXNYRzRnSUNBZ1kyRndkSFZ5WlZ4dUlDQXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjFjR1JoZEdWRVQwMU1hWE4wWlc1bGNuTWdLRzlzWkZadWIyUmxMQ0IyYm05a1pTa2dlMXh1SUNCcFppQW9hWE5WYm1SbFppaHZiR1JXYm05a1pTNWtZWFJoTG05dUtTQW1KaUJwYzFWdVpHVm1LSFp1YjJSbExtUmhkR0V1YjI0cEtTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNiaUFnZG1GeUlHOXVJRDBnZG01dlpHVXVaR0YwWVM1dmJpQjhmQ0I3ZlR0Y2JpQWdkbUZ5SUc5c1pFOXVJRDBnYjJ4a1ZtNXZaR1V1WkdGMFlTNXZiaUI4ZkNCN2ZUdGNiaUFnZEdGeVoyVjBKREVnUFNCMmJtOWtaUzVsYkcwN1hHNGdJRzV2Y20xaGJHbDZaVVYyWlc1MGN5aHZiaWs3WEc0Z0lIVndaR0YwWlV4cGMzUmxibVZ5Y3lodmJpd2diMnhrVDI0c0lHRmtaQ1F4TENCeVpXMXZkbVVrTWl3Z2RtNXZaR1V1WTI5dWRHVjRkQ2s3WEc0Z0lIUmhjbWRsZENReElEMGdkVzVrWldacGJtVmtPMXh1ZlZ4dVhHNTJZWElnWlhabGJuUnpJRDBnZTF4dUlDQmpjbVZoZEdVNklIVndaR0YwWlVSUFRVeHBjM1JsYm1WeWN5eGNiaUFnZFhCa1lYUmxPaUIxY0dSaGRHVkVUMDFNYVhOMFpXNWxjbk5jYm4wN1hHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUIxY0dSaGRHVkVUMDFRY205d2N5QW9iMnhrVm01dlpHVXNJSFp1YjJSbEtTQjdYRzRnSUdsbUlDaHBjMVZ1WkdWbUtHOXNaRlp1YjJSbExtUmhkR0V1Wkc5dFVISnZjSE1wSUNZbUlHbHpWVzVrWldZb2RtNXZaR1V1WkdGMFlTNWtiMjFRY205d2N5a3BJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1SUNCMllYSWdhMlY1TENCamRYSTdYRzRnSUhaaGNpQmxiRzBnUFNCMmJtOWtaUzVsYkcwN1hHNGdJSFpoY2lCdmJHUlFjbTl3Y3lBOUlHOXNaRlp1YjJSbExtUmhkR0V1Wkc5dFVISnZjSE1nZkh3Z2UzMDdYRzRnSUhaaGNpQndjbTl3Y3lBOUlIWnViMlJsTG1SaGRHRXVaRzl0VUhKdmNITWdmSHdnZTMwN1hHNGdJQzh2SUdOc2IyNWxJRzlpYzJWeWRtVmtJRzlpYW1WamRITXNJR0Z6SUhSb1pTQjFjMlZ5SUhCeWIySmhZbXg1SUhkaGJuUnpJSFJ2SUcxMWRHRjBaU0JwZEZ4dUlDQnBaaUFvYVhORVpXWW9jSEp2Y0hNdVgxOXZZbDlmS1NrZ2UxeHVJQ0FnSUhCeWIzQnpJRDBnZG01dlpHVXVaR0YwWVM1a2IyMVFjbTl3Y3lBOUlHVjRkR1Z1WkNoN2ZTd2djSEp2Y0hNcE8xeHVJQ0I5WEc1Y2JpQWdabTl5SUNoclpYa2dhVzRnYjJ4a1VISnZjSE1wSUh0Y2JpQWdJQ0JwWmlBb2FYTlZibVJsWmlod2NtOXdjMXRyWlhsZEtTa2dlMXh1SUNBZ0lDQWdaV3h0VzJ0bGVWMGdQU0FuSnp0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnWm05eUlDaHJaWGtnYVc0Z2NISnZjSE1wSUh0Y2JpQWdJQ0JqZFhJZ1BTQndjbTl3YzF0clpYbGRPMXh1SUNBZ0lDOHZJR2xuYm05eVpTQmphR2xzWkhKbGJpQnBaaUIwYUdVZ2JtOWtaU0JvWVhNZ2RHVjRkRU52Ym5SbGJuUWdiM0lnYVc1dVpYSklWRTFNTEZ4dUlDQWdJQzh2SUdGeklIUm9aWE5sSUhkcGJHd2dkR2h5YjNjZ1lYZGhlU0JsZUdsemRHbHVaeUJFVDAwZ2JtOWtaWE1nWVc1a0lHTmhkWE5sSUhKbGJXOTJZV3dnWlhKeWIzSnpYRzRnSUNBZ0x5OGdiMjRnYzNWaWMyVnhkV1Z1ZENCd1lYUmphR1Z6SUNnak16TTJNQ2xjYmlBZ0lDQnBaaUFvYTJWNUlEMDlQU0FuZEdWNGRFTnZiblJsYm5RbklIeDhJR3RsZVNBOVBUMGdKMmx1Ym1WeVNGUk5UQ2NwSUh0Y2JpQWdJQ0FnSUdsbUlDaDJibTlrWlM1amFHbHNaSEpsYmlrZ2V5QjJibTlrWlM1amFHbHNaSEpsYmk1c1pXNW5kR2dnUFNBd095QjlYRzRnSUNBZ0lDQnBaaUFvWTNWeUlEMDlQU0J2YkdSUWNtOXdjMXRyWlhsZEtTQjdJR052Ym5ScGJuVmxJSDFjYmlBZ0lDQWdJQzh2SUNNMk5qQXhJSGR2Y21zZ1lYSnZkVzVrSUVOb2NtOXRaU0IyWlhKemFXOXVJRHc5SURVMUlHSjFaeUIzYUdWeVpTQnphVzVuYkdVZ2RHVjRkRTV2WkdWY2JpQWdJQ0FnSUM4dklISmxjR3hoWTJWa0lHSjVJR2x1Ym1WeVNGUk5UQzkwWlhoMFEyOXVkR1Z1ZENCeVpYUmhhVzV6SUdsMGN5QndZWEpsYm5ST2IyUmxJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDQnBaaUFvWld4dExtTm9hV3hrVG05a1pYTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lHVnNiUzV5WlcxdmRtVkRhR2xzWkNobGJHMHVZMmhwYkdST2IyUmxjMXN3WFNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHdGxlU0E5UFQwZ0ozWmhiSFZsSnlrZ2UxeHVJQ0FnSUNBZ0x5OGdjM1J2Y21VZ2RtRnNkV1VnWVhNZ1gzWmhiSFZsSUdGeklIZGxiR3dnYzJsdVkyVmNiaUFnSUNBZ0lDOHZJRzV2YmkxemRISnBibWNnZG1Gc2RXVnpJSGRwYkd3Z1ltVWdjM1J5YVc1bmFXWnBaV1JjYmlBZ0lDQWdJR1ZzYlM1ZmRtRnNkV1VnUFNCamRYSTdYRzRnSUNBZ0lDQXZMeUJoZG05cFpDQnlaWE5sZEhScGJtY2dZM1Z5YzI5eUlIQnZjMmwwYVc5dUlIZG9aVzRnZG1Gc2RXVWdhWE1nZEdobElITmhiV1ZjYmlBZ0lDQWdJSFpoY2lCemRISkRkWElnUFNCcGMxVnVaR1ZtS0dOMWNpa2dQeUFuSnlBNklGTjBjbWx1WnloamRYSXBPMXh1SUNBZ0lDQWdhV1lnS0hOb2IzVnNaRlZ3WkdGMFpWWmhiSFZsS0dWc2JTd2djM1J5UTNWeUtTa2dlMXh1SUNBZ0lDQWdJQ0JsYkcwdWRtRnNkV1VnUFNCemRISkRkWEk3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHVnNiVnRyWlhsZElEMGdZM1Z5TzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dkx5QmphR1ZqYXlCd2JHRjBabTl5YlhNdmQyVmlMM1YwYVd3dllYUjBjbk11YW5NZ1lXTmpaWEIwVm1Gc2RXVmNibHh1WEc1bWRXNWpkR2x2YmlCemFHOTFiR1JWY0dSaGRHVldZV3gxWlNBb1pXeHRMQ0JqYUdWamExWmhiQ2tnZTF4dUlDQnlaWFIxY200Z0tDRmxiRzB1WTI5dGNHOXphVzVuSUNZbUlDaGNiaUFnSUNCbGJHMHVkR0ZuVG1GdFpTQTlQVDBnSjA5UVZFbFBUaWNnZkh4Y2JpQWdJQ0JwYzA1dmRFbHVSbTlqZFhOQmJtUkVhWEowZVNobGJHMHNJR05vWldOclZtRnNLU0I4ZkZ4dUlDQWdJR2x6UkdseWRIbFhhWFJvVFc5a2FXWnBaWEp6S0dWc2JTd2dZMmhsWTJ0V1lXd3BYRzRnSUNrcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdselRtOTBTVzVHYjJOMWMwRnVaRVJwY25SNUlDaGxiRzBzSUdOb1pXTnJWbUZzS1NCN1hHNGdJQzh2SUhKbGRIVnliaUIwY25WbElIZG9aVzRnZEdWNGRHSnZlQ0FvTG01MWJXSmxjaUJoYm1RZ0xuUnlhVzBwSUd4dmMyVnpJR1p2WTNWeklHRnVaQ0JwZEhNZ2RtRnNkV1VnYVhOY2JpQWdMeThnYm05MElHVnhkV0ZzSUhSdklIUm9aU0IxY0dSaGRHVmtJSFpoYkhWbFhHNGdJSFpoY2lCdWIzUkpia1p2WTNWeklEMGdkSEoxWlR0Y2JpQWdMeThnSXpZeE5UZGNiaUFnTHk4Z2QyOXlheUJoY205MWJtUWdTVVVnWW5WbklIZG9aVzRnWVdOalpYTnphVzVuSUdSdlkzVnRaVzUwTG1GamRHbDJaVVZzWlcxbGJuUWdhVzRnWVc0Z2FXWnlZVzFsWEc0Z0lIUnllU0I3SUc1dmRFbHVSbTlqZFhNZ1BTQmtiMk4xYldWdWRDNWhZM1JwZG1WRmJHVnRaVzUwSUNFOVBTQmxiRzA3SUgwZ1kyRjBZMmdnS0dVcElIdDlYRzRnSUhKbGRIVnliaUJ1YjNSSmJrWnZZM1Z6SUNZbUlHVnNiUzUyWVd4MVpTQWhQVDBnWTJobFkydFdZV3hjYm4xY2JseHVablZ1WTNScGIyNGdhWE5FYVhKMGVWZHBkR2hOYjJScFptbGxjbk1nS0dWc2JTd2dibVYzVm1Gc0tTQjdYRzRnSUhaaGNpQjJZV3gxWlNBOUlHVnNiUzUyWVd4MVpUdGNiaUFnZG1GeUlHMXZaR2xtYVdWeWN5QTlJR1ZzYlM1ZmRrMXZaR2xtYVdWeWN6c2dMeThnYVc1cVpXTjBaV1FnWW5rZ2RpMXRiMlJsYkNCeWRXNTBhVzFsWEc0Z0lHbG1JQ2hwYzBSbFppaHRiMlJwWm1sbGNuTXBLU0I3WEc0Z0lDQWdhV1lnS0cxdlpHbG1hV1Z5Y3k1c1lYcDVLU0I3WEc0Z0lDQWdJQ0F2THlCcGJuQjFkSE1nZDJsMGFDQnNZWHA1SUhOb2IzVnNaQ0J2Ym14NUlHSmxJSFZ3WkdGMFpXUWdkMmhsYmlCdWIzUWdhVzRnWm05amRYTmNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9iVzlrYVdacFpYSnpMbTUxYldKbGNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnZUblZ0WW1WeUtIWmhiSFZsS1NBaFBUMGdkRzlPZFcxaVpYSW9ibVYzVm1Gc0tWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2JXOWthV1pwWlhKekxuUnlhVzBwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpTNTBjbWx0S0NrZ0lUMDlJRzVsZDFaaGJDNTBjbWx0S0NsY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFpoYkhWbElDRTlQU0J1WlhkV1lXeGNibjFjYmx4dWRtRnlJR1J2YlZCeWIzQnpJRDBnZTF4dUlDQmpjbVZoZEdVNklIVndaR0YwWlVSUFRWQnliM0J6TEZ4dUlDQjFjR1JoZEdVNklIVndaR0YwWlVSUFRWQnliM0J6WEc1OU8xeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlIQmhjbk5sVTNSNWJHVlVaWGgwSUQwZ1kyRmphR1ZrS0daMWJtTjBhVzl1SUNoamMzTlVaWGgwS1NCN1hHNGdJSFpoY2lCeVpYTWdQU0I3ZlR0Y2JpQWdkbUZ5SUd4cGMzUkVaV3hwYldsMFpYSWdQU0F2T3lnL0lWdGVLRjBxWEZ3cEtTOW5PMXh1SUNCMllYSWdjSEp2Y0dWeWRIbEVaV3hwYldsMFpYSWdQU0F2T2lndUt5a3ZPMXh1SUNCamMzTlVaWGgwTG5Od2JHbDBLR3hwYzNSRVpXeHBiV2wwWlhJcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHbDBaVzBwSUh0Y2JpQWdJQ0JwWmlBb2FYUmxiU2tnZTF4dUlDQWdJQ0FnZG1GeUlIUnRjQ0E5SUdsMFpXMHVjM0JzYVhRb2NISnZjR1Z5ZEhsRVpXeHBiV2wwWlhJcE8xeHVJQ0FnSUNBZ2RHMXdMbXhsYm1kMGFDQStJREVnSmlZZ0tISmxjMXQwYlhCYk1GMHVkSEpwYlNncFhTQTlJSFJ0Y0ZzeFhTNTBjbWx0S0NrcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc0Z0lISmxkSFZ5YmlCeVpYTmNibjBwTzF4dVhHNHZMeUJ0WlhKblpTQnpkR0YwYVdNZ1lXNWtJR1I1Ym1GdGFXTWdjM1I1YkdVZ1pHRjBZU0J2YmlCMGFHVWdjMkZ0WlNCMmJtOWtaVnh1Wm5WdVkzUnBiMjRnYm05eWJXRnNhWHBsVTNSNWJHVkVZWFJoSUNoa1lYUmhLU0I3WEc0Z0lIWmhjaUJ6ZEhsc1pTQTlJRzV2Y20xaGJHbDZaVk4wZVd4bFFtbHVaR2x1Wnloa1lYUmhMbk4wZVd4bEtUdGNiaUFnTHk4Z2MzUmhkR2xqSUhOMGVXeGxJR2x6SUhCeVpTMXdjbTlqWlhOelpXUWdhVzUwYnlCaGJpQnZZbXBsWTNRZ1pIVnlhVzVuSUdOdmJYQnBiR0YwYVc5dVhHNGdJQzh2SUdGdVpDQnBjeUJoYkhkaGVYTWdZU0JtY21WemFDQnZZbXBsWTNRc0lITnZJR2wwSjNNZ2MyRm1aU0IwYnlCdFpYSm5aU0JwYm5SdklHbDBYRzRnSUhKbGRIVnliaUJrWVhSaExuTjBZWFJwWTFOMGVXeGxYRzRnSUNBZ1B5QmxlSFJsYm1Rb1pHRjBZUzV6ZEdGMGFXTlRkSGxzWlN3Z2MzUjViR1VwWEc0Z0lDQWdPaUJ6ZEhsc1pWeHVmVnh1WEc0dkx5QnViM0p0WVd4cGVtVWdjRzl6YzJsaWJHVWdZWEp5WVhrZ0x5QnpkSEpwYm1jZ2RtRnNkV1Z6SUdsdWRHOGdUMkpxWldOMFhHNW1kVzVqZEdsdmJpQnViM0p0WVd4cGVtVlRkSGxzWlVKcGJtUnBibWNnS0dKcGJtUnBibWRUZEhsc1pTa2dlMXh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoaWFXNWthVzVuVTNSNWJHVXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUnZUMkpxWldOMEtHSnBibVJwYm1kVGRIbHNaU2xjYmlBZ2ZWeHVJQ0JwWmlBb2RIbHdaVzltSUdKcGJtUnBibWRUZEhsc1pTQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjR0Z5YzJWVGRIbHNaVlJsZUhRb1ltbHVaR2x1WjFOMGVXeGxLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmlhVzVrYVc1blUzUjViR1ZjYm4xY2JseHVMeW9xWEc0Z0tpQndZWEpsYm5RZ1kyOXRjRzl1Wlc1MElITjBlV3hsSUhOb2IzVnNaQ0JpWlNCaFpuUmxjaUJqYUdsc1pDZHpYRzRnS2lCemJ5QjBhR0YwSUhCaGNtVnVkQ0JqYjIxd2IyNWxiblFuY3lCemRIbHNaU0JqYjNWc1pDQnZkbVZ5Y21sa1pTQnBkRnh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJUZEhsc1pTQW9kbTV2WkdVc0lHTm9aV05yUTJocGJHUXBJSHRjYmlBZ2RtRnlJSEpsY3lBOUlIdDlPMXh1SUNCMllYSWdjM1I1YkdWRVlYUmhPMXh1WEc0Z0lHbG1JQ2hqYUdWamEwTm9hV3hrS1NCN1hHNGdJQ0FnZG1GeUlHTm9hV3hrVG05a1pTQTlJSFp1YjJSbE8xeHVJQ0FnSUhkb2FXeGxJQ2hqYUdsc1pFNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlVwSUh0Y2JpQWdJQ0FnSUdOb2FXeGtUbTlrWlNBOUlHTm9hV3hrVG05a1pTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpTNWZkbTV2WkdVN1hHNGdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJR05vYVd4a1RtOWtaU0FtSmlCamFHbHNaRTV2WkdVdVpHRjBZU0FtSmx4dUlDQWdJQ0FnSUNBb2MzUjViR1ZFWVhSaElEMGdibTl5YldGc2FYcGxVM1I1YkdWRVlYUmhLR05vYVd4a1RtOWtaUzVrWVhSaEtTbGNiaUFnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0JsZUhSbGJtUW9jbVZ6TENCemRIbHNaVVJoZEdFcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHbG1JQ2dvYzNSNWJHVkVZWFJoSUQwZ2JtOXliV0ZzYVhwbFUzUjViR1ZFWVhSaEtIWnViMlJsTG1SaGRHRXBLU2tnZTF4dUlDQWdJR1Y0ZEdWdVpDaHlaWE1zSUhOMGVXeGxSR0YwWVNrN1hHNGdJSDFjYmx4dUlDQjJZWElnY0dGeVpXNTBUbTlrWlNBOUlIWnViMlJsTzF4dUlDQjNhR2xzWlNBb0tIQmhjbVZ1ZEU1dlpHVWdQU0J3WVhKbGJuUk9iMlJsTG5CaGNtVnVkQ2twSUh0Y2JpQWdJQ0JwWmlBb2NHRnlaVzUwVG05a1pTNWtZWFJoSUNZbUlDaHpkSGxzWlVSaGRHRWdQU0J1YjNKdFlXeHBlbVZUZEhsc1pVUmhkR0VvY0dGeVpXNTBUbTlrWlM1a1lYUmhLU2twSUh0Y2JpQWdJQ0FnSUdWNGRHVnVaQ2h5WlhNc0lITjBlV3hsUkdGMFlTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTmNibjFjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJqYzNOV1lYSlNSU0E5SUM5ZUxTMHZPMXh1ZG1GeUlHbHRjRzl5ZEdGdWRGSkZJRDBnTDF4Y2N5b2hhVzF3YjNKMFlXNTBKQzg3WEc1MllYSWdjMlYwVUhKdmNDQTlJR1oxYm1OMGFXOXVJQ2hsYkN3Z2JtRnRaU3dnZG1Gc0tTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9ZM056Vm1GeVVrVXVkR1Z6ZENodVlXMWxLU2tnZTF4dUlDQWdJR1ZzTG5OMGVXeGxMbk5sZEZCeWIzQmxjblI1S0c1aGJXVXNJSFpoYkNrN1hHNGdJSDBnWld4elpTQnBaaUFvYVcxd2IzSjBZVzUwVWtVdWRHVnpkQ2gyWVd3cEtTQjdYRzRnSUNBZ1pXd3VjM1I1YkdVdWMyVjBVSEp2Y0dWeWRIa29ibUZ0WlN3Z2RtRnNMbkpsY0d4aFkyVW9hVzF3YjNKMFlXNTBVa1VzSUNjbktTd2dKMmx0Y0c5eWRHRnVkQ2NwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhaaGNpQnViM0p0WVd4cGVtVmtUbUZ0WlNBOUlHNXZjbTFoYkdsNlpTaHVZVzFsS1R0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gyWVd3cEtTQjdYRzRnSUNBZ0lDQXZMeUJUZFhCd2IzSjBJSFpoYkhWbGN5QmhjbkpoZVNCamNtVmhkR1ZrSUdKNUlHRjFkRzl3Y21WbWFYaGxjaXdnWlM1bkxseHVJQ0FnSUNBZ0x5OGdlMlJwYzNCc1lYazZJRnRjSWkxM1pXSnJhWFF0WW05NFhDSXNJRndpTFcxekxXWnNaWGhpYjNoY0lpd2dYQ0ptYkdWNFhDSmRmVnh1SUNBZ0lDQWdMeThnVTJWMElIUm9aVzBnYjI1bElHSjVJRzl1WlN3Z1lXNWtJSFJvWlNCaWNtOTNjMlZ5SUhkcGJHd2diMjVzZVNCelpYUWdkR2h2YzJVZ2FYUWdZMkZ1SUhKbFkyOW5ibWw2WlZ4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYmlBOUlIWmhiQzVzWlc1bmRHZzdJR2tnUENCc1pXNDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQmxiQzV6ZEhsc1pWdHViM0p0WVd4cGVtVmtUbUZ0WlYwZ1BTQjJZV3hiYVYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1ZzTG5OMGVXeGxXMjV2Y20xaGJHbDZaV1JPWVcxbFhTQTlJSFpoYkR0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JuWmhjaUIyWlc1a2IzSk9ZVzFsY3lBOUlGc25WMlZpYTJsMEp5d2dKMDF2ZWljc0lDZHRjeWRkTzF4dVhHNTJZWElnWlcxd2RIbFRkSGxzWlR0Y2JuWmhjaUJ1YjNKdFlXeHBlbVVnUFNCallXTm9aV1FvWm5WdVkzUnBiMjRnS0hCeWIzQXBJSHRjYmlBZ1pXMXdkSGxUZEhsc1pTQTlJR1Z0Y0hSNVUzUjViR1VnZkh3Z1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5a3VjM1I1YkdVN1hHNGdJSEJ5YjNBZ1BTQmpZVzFsYkdsNlpTaHdjbTl3S1R0Y2JpQWdhV1lnS0hCeWIzQWdJVDA5SUNkbWFXeDBaWEluSUNZbUlDaHdjbTl3SUdsdUlHVnRjSFI1VTNSNWJHVXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQnliM0JjYmlBZ2ZWeHVJQ0IyWVhJZ1kyRndUbUZ0WlNBOUlIQnliM0F1WTJoaGNrRjBLREFwTG5SdlZYQndaWEpEWVhObEtDa2dLeUJ3Y205d0xuTnNhV05sS0RFcE8xeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhabGJtUnZjazVoYldWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdkbUZ5SUc1aGJXVWdQU0IyWlc1a2IzSk9ZVzFsYzF0cFhTQXJJR05oY0U1aGJXVTdYRzRnSUNBZ2FXWWdLRzVoYldVZ2FXNGdaVzF3ZEhsVGRIbHNaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzVoYldWY2JpQWdJQ0I5WEc0Z0lIMWNibjBwTzF4dVhHNW1kVzVqZEdsdmJpQjFjR1JoZEdWVGRIbHNaU0FvYjJ4a1ZtNXZaR1VzSUhadWIyUmxLU0I3WEc0Z0lIWmhjaUJrWVhSaElEMGdkbTV2WkdVdVpHRjBZVHRjYmlBZ2RtRnlJRzlzWkVSaGRHRWdQU0J2YkdSV2JtOWtaUzVrWVhSaE8xeHVYRzRnSUdsbUlDaHBjMVZ1WkdWbUtHUmhkR0V1YzNSaGRHbGpVM1I1YkdVcElDWW1JR2x6Vlc1a1pXWW9aR0YwWVM1emRIbHNaU2tnSmlaY2JpQWdJQ0JwYzFWdVpHVm1LRzlzWkVSaGRHRXVjM1JoZEdsalUzUjViR1VwSUNZbUlHbHpWVzVrWldZb2IyeGtSR0YwWVM1emRIbHNaU2xjYmlBZ0tTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNibHh1SUNCMllYSWdZM1Z5TENCdVlXMWxPMXh1SUNCMllYSWdaV3dnUFNCMmJtOWtaUzVsYkcwN1hHNGdJSFpoY2lCdmJHUlRkR0YwYVdOVGRIbHNaU0E5SUc5c1pFUmhkR0V1YzNSaGRHbGpVM1I1YkdVN1hHNGdJSFpoY2lCdmJHUlRkSGxzWlVKcGJtUnBibWNnUFNCdmJHUkVZWFJoTG01dmNtMWhiR2w2WldSVGRIbHNaU0I4ZkNCdmJHUkVZWFJoTG5OMGVXeGxJSHg4SUh0OU8xeHVYRzRnSUM4dklHbG1JSE4wWVhScFl5QnpkSGxzWlNCbGVHbHpkSE1zSUhOMGVXeGxZbWx1WkdsdVp5QmhiSEpsWVdSNUlHMWxjbWRsWkNCcGJuUnZJR2wwSUhkb1pXNGdaRzlwYm1jZ2JtOXliV0ZzYVhwbFUzUjViR1ZFWVhSaFhHNGdJSFpoY2lCdmJHUlRkSGxzWlNBOUlHOXNaRk4wWVhScFkxTjBlV3hsSUh4OElHOXNaRk4wZVd4bFFtbHVaR2x1Wnp0Y2JseHVJQ0IyWVhJZ2MzUjViR1VnUFNCdWIzSnRZV3hwZW1WVGRIbHNaVUpwYm1ScGJtY29kbTV2WkdVdVpHRjBZUzV6ZEhsc1pTa2dmSHdnZTMwN1hHNWNiaUFnTHk4Z2MzUnZjbVVnYm05eWJXRnNhWHBsWkNCemRIbHNaU0IxYm1SbGNpQmhJR1JwWm1abGNtVnVkQ0JyWlhrZ1ptOXlJRzVsZUhRZ1pHbG1abHh1SUNBdkx5QnRZV3RsSUhOMWNtVWdkRzhnWTJ4dmJtVWdhWFFnYVdZZ2FYUW5jeUJ5WldGamRHbDJaU3dnYzJsdVkyVWdkR2hsSUhWelpYSWdiR2xyWld4NUlIZGhiblJ6WEc0Z0lDOHZJSFJ2SUcxMWRHRjBaU0JwZEM1Y2JpQWdkbTV2WkdVdVpHRjBZUzV1YjNKdFlXeHBlbVZrVTNSNWJHVWdQU0JwYzBSbFppaHpkSGxzWlM1ZlgyOWlYMThwWEc0Z0lDQWdQeUJsZUhSbGJtUW9lMzBzSUhOMGVXeGxLVnh1SUNBZ0lEb2djM1I1YkdVN1hHNWNiaUFnZG1GeUlHNWxkMU4wZVd4bElEMGdaMlYwVTNSNWJHVW9kbTV2WkdVc0lIUnlkV1VwTzF4dVhHNGdJR1p2Y2lBb2JtRnRaU0JwYmlCdmJHUlRkSGxzWlNrZ2UxeHVJQ0FnSUdsbUlDaHBjMVZ1WkdWbUtHNWxkMU4wZVd4bFcyNWhiV1ZkS1NrZ2UxeHVJQ0FnSUNBZ2MyVjBVSEp2Y0NobGJDd2dibUZ0WlN3Z0p5Y3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQm1iM0lnS0c1aGJXVWdhVzRnYm1WM1UzUjViR1VwSUh0Y2JpQWdJQ0JqZFhJZ1BTQnVaWGRUZEhsc1pWdHVZVzFsWFR0Y2JpQWdJQ0JwWmlBb1kzVnlJQ0U5UFNCdmJHUlRkSGxzWlZ0dVlXMWxYU2tnZTF4dUlDQWdJQ0FnTHk4Z2FXVTVJSE5sZEhScGJtY2dkRzhnYm5Wc2JDQm9ZWE1nYm04Z1pXWm1aV04wTENCdGRYTjBJSFZ6WlNCbGJYQjBlU0J6ZEhKcGJtZGNiaUFnSUNBZ0lITmxkRkJ5YjNBb1pXd3NJRzVoYldVc0lHTjFjaUE5UFNCdWRXeHNJRDhnSnljZ09pQmpkWElwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1MllYSWdjM1I1YkdVZ1BTQjdYRzRnSUdOeVpXRjBaVG9nZFhCa1lYUmxVM1I1YkdVc1hHNGdJSFZ3WkdGMFpUb2dkWEJrWVhSbFUzUjViR1ZjYm4wN1hHNWNiaThxSUNBcUwxeHVYRzR2S2lwY2JpQXFJRUZrWkNCamJHRnpjeUIzYVhSb0lHTnZiWEJoZEdsaWFXeHBkSGtnWm05eUlGTldSeUJ6YVc1alpTQmpiR0Z6YzB4cGMzUWdhWE1nYm05MElITjFjSEJ2Y25SbFpDQnZibHh1SUNvZ1UxWkhJR1ZzWlcxbGJuUnpJR2x1SUVsRlhHNGdLaTljYm1aMWJtTjBhVzl1SUdGa1pFTnNZWE56SUNobGJDd2dZMnh6S1NCN1hHNGdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0JwWmlBb0lXTnNjeUI4ZkNBaEtHTnNjeUE5SUdOc2N5NTBjbWx0S0NrcEtTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNibHh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ1pXeHpaU0FxTDF4dUlDQnBaaUFvWld3dVkyeGhjM05NYVhOMEtTQjdYRzRnSUNBZ2FXWWdLR05zY3k1cGJtUmxlRTltS0NjZ0p5a2dQaUF0TVNrZ2UxeHVJQ0FnSUNBZ1kyeHpMbk53YkdsMEtDOWNYSE1yTHlrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1l5a2dleUJ5WlhSMWNtNGdaV3d1WTJ4aGMzTk1hWE4wTG1Ga1pDaGpLVHNnZlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1ZzTG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMnh6S1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZG1GeUlHTjFjaUE5SUZ3aUlGd2lJQ3NnS0dWc0xtZGxkRUYwZEhKcFluVjBaU2duWTJ4aGMzTW5LU0I4ZkNBbkp5a2dLeUJjSWlCY0lqdGNiaUFnSUNCcFppQW9ZM1Z5TG1sdVpHVjRUMllvSnlBbklDc2dZMnh6SUNzZ0p5QW5LU0E4SURBcElIdGNiaUFnSUNBZ0lHVnNMbk5sZEVGMGRISnBZblYwWlNnblkyeGhjM01uTENBb1kzVnlJQ3NnWTJ4ektTNTBjbWx0S0NrcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxiVzkyWlNCamJHRnpjeUIzYVhSb0lHTnZiWEJoZEdsaWFXeHBkSGtnWm05eUlGTldSeUJ6YVc1alpTQmpiR0Z6YzB4cGMzUWdhWE1nYm05MElITjFjSEJ2Y25SbFpDQnZibHh1SUNvZ1UxWkhJR1ZzWlcxbGJuUnpJR2x1SUVsRlhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbGJXOTJaVU5zWVhOeklDaGxiQ3dnWTJ4ektTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9JV05zY3lCOGZDQWhLR05zY3lBOUlHTnNjeTUwY21sdEtDa3BLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmx4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlNBcUwxeHVJQ0JwWmlBb1pXd3VZMnhoYzNOTWFYTjBLU0I3WEc0Z0lDQWdhV1lnS0dOc2N5NXBibVJsZUU5bUtDY2dKeWtnUGlBdE1Ta2dlMXh1SUNBZ0lDQWdZMnh6TG5Od2JHbDBLQzljWEhNckx5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpQW9ZeWtnZXlCeVpYUjFjbTRnWld3dVkyeGhjM05NYVhOMExuSmxiVzkyWlNoaktUc2dmU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHVnNMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9ZMnh6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0NGbGJDNWpiR0Z6YzB4cGMzUXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQmxiQzV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9KMk5zWVhOekp5azdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIWmhjaUJqZFhJZ1BTQmNJaUJjSWlBcklDaGxiQzVuWlhSQmRIUnlhV0oxZEdVb0oyTnNZWE56SnlrZ2ZId2dKeWNwSUNzZ1hDSWdYQ0k3WEc0Z0lDQWdkbUZ5SUhSaGNpQTlJQ2NnSnlBcklHTnNjeUFySUNjZ0p6dGNiaUFnSUNCM2FHbHNaU0FvWTNWeUxtbHVaR1Y0VDJZb2RHRnlLU0ErUFNBd0tTQjdYRzRnSUNBZ0lDQmpkWElnUFNCamRYSXVjbVZ3YkdGalpTaDBZWElzSUNjZ0p5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdOMWNpQTlJR04xY2k1MGNtbHRLQ2s3WEc0Z0lDQWdhV1lnS0dOMWNpa2dlMXh1SUNBZ0lDQWdaV3d1YzJWMFFYUjBjbWxpZFhSbEtDZGpiR0Z6Y3ljc0lHTjFjaWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHVnNMbkpsYlc5MlpVRjBkSEpwWW5WMFpTZ25ZMnhoYzNNbktUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeW9nSUNvdlhHNWNibVoxYm1OMGFXOXVJSEpsYzI5c2RtVlVjbUZ1YzJsMGFXOXVJQ2hrWldZcElIdGNiaUFnYVdZZ0tDRmtaV1lwSUh0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlNBcUwxeHVJQ0JwWmlBb2RIbHdaVzltSUdSbFppQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0IyWVhJZ2NtVnpJRDBnZTMwN1hHNGdJQ0FnYVdZZ0tHUmxaaTVqYzNNZ0lUMDlJR1poYkhObEtTQjdYRzRnSUNBZ0lDQmxlSFJsYm1Rb2NtVnpMQ0JoZFhSdlEzTnpWSEpoYm5OcGRHbHZiaWhrWldZdWJtRnRaU0I4ZkNBbmRpY3BLVHRjYmlBZ0lDQjlYRzRnSUNBZ1pYaDBaVzVrS0hKbGN5d2daR1ZtS1R0Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHUmxaaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCeVpYUjFjbTRnWVhWMGIwTnpjMVJ5WVc1emFYUnBiMjRvWkdWbUtWeHVJQ0I5WEc1OVhHNWNiblpoY2lCaGRYUnZRM056VkhKaGJuTnBkR2x2YmlBOUlHTmhZMmhsWkNobWRXNWpkR2x2YmlBb2JtRnRaU2tnZTF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUdWdWRHVnlRMnhoYzNNNklDaHVZVzFsSUNzZ1hDSXRaVzUwWlhKY0lpa3NYRzRnSUNBZ1pXNTBaWEpVYjBOc1lYTnpPaUFvYm1GdFpTQXJJRndpTFdWdWRHVnlMWFJ2WENJcExGeHVJQ0FnSUdWdWRHVnlRV04wYVhabFEyeGhjM002SUNodVlXMWxJQ3NnWENJdFpXNTBaWEl0WVdOMGFYWmxYQ0lwTEZ4dUlDQWdJR3hsWVhabFEyeGhjM002SUNodVlXMWxJQ3NnWENJdGJHVmhkbVZjSWlrc1hHNGdJQ0FnYkdWaGRtVlViME5zWVhOek9pQW9ibUZ0WlNBcklGd2lMV3hsWVhabExYUnZYQ0lwTEZ4dUlDQWdJR3hsWVhabFFXTjBhWFpsUTJ4aGMzTTZJQ2h1WVcxbElDc2dYQ0l0YkdWaGRtVXRZV04wYVhabFhDSXBYRzRnSUgxY2JuMHBPMXh1WEc1MllYSWdhR0Z6VkhKaGJuTnBkR2x2YmlBOUlHbHVRbkp2ZDNObGNpQW1KaUFoYVhOSlJUazdYRzUyWVhJZ1ZGSkJUbE5KVkVsUFRpQTlJQ2QwY21GdWMybDBhVzl1Snp0Y2JuWmhjaUJCVGtsTlFWUkpUMDRnUFNBbllXNXBiV0YwYVc5dUp6dGNibHh1THk4Z1ZISmhibk5wZEdsdmJpQndjbTl3WlhKMGVTOWxkbVZ1ZENCemJtbG1abWx1WjF4dWRtRnlJSFJ5WVc1emFYUnBiMjVRY205d0lEMGdKM1J5WVc1emFYUnBiMjRuTzF4dWRtRnlJSFJ5WVc1emFYUnBiMjVGYm1SRmRtVnVkQ0E5SUNkMGNtRnVjMmwwYVc5dVpXNWtKenRjYm5aaGNpQmhibWx0WVhScGIyNVFjbTl3SUQwZ0oyRnVhVzFoZEdsdmJpYzdYRzUyWVhJZ1lXNXBiV0YwYVc5dVJXNWtSWFpsYm5RZ1BTQW5ZVzVwYldGMGFXOXVaVzVrSnp0Y2JtbG1JQ2hvWVhOVWNtRnVjMmwwYVc5dUtTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9kMmx1Wkc5M0xtOXVkSEpoYm5OcGRHbHZibVZ1WkNBOVBUMGdkVzVrWldacGJtVmtJQ1ltWEc0Z0lDQWdkMmx1Wkc5M0xtOXVkMlZpYTJsMGRISmhibk5wZEdsdmJtVnVaQ0FoUFQwZ2RXNWtaV1pwYm1Wa1hHNGdJQ2tnZTF4dUlDQWdJSFJ5WVc1emFYUnBiMjVRY205d0lEMGdKMWRsWW10cGRGUnlZVzV6YVhScGIyNG5PMXh1SUNBZ0lIUnlZVzV6YVhScGIyNUZibVJGZG1WdWRDQTlJQ2QzWldKcmFYUlVjbUZ1YzJsMGFXOXVSVzVrSnp0Y2JpQWdmVnh1SUNCcFppQW9kMmx1Wkc5M0xtOXVZVzVwYldGMGFXOXVaVzVrSUQwOVBTQjFibVJsWm1sdVpXUWdKaVpjYmlBZ0lDQjNhVzVrYjNjdWIyNTNaV0pyYVhSaGJtbHRZWFJwYjI1bGJtUWdJVDA5SUhWdVpHVm1hVzVsWkZ4dUlDQXBJSHRjYmlBZ0lDQmhibWx0WVhScGIyNVFjbTl3SUQwZ0oxZGxZbXRwZEVGdWFXMWhkR2x2YmljN1hHNGdJQ0FnWVc1cGJXRjBhVzl1Ulc1a1JYWmxiblFnUFNBbmQyVmlhMmwwUVc1cGJXRjBhVzl1Ulc1a0p6dGNiaUFnZlZ4dWZWeHVYRzR2THlCaWFXNWthVzVuSUhSdklIZHBibVJ2ZHlCcGN5QnVaV05sYzNOaGNua2dkRzhnYldGclpTQm9iM1FnY21Wc2IyRmtJSGR2Y21zZ2FXNGdTVVVnYVc0Z2MzUnlhV04wSUcxdlpHVmNiblpoY2lCeVlXWWdQU0JwYmtKeWIzZHpaWEpjYmlBZ1B5QjNhVzVrYjNjdWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxYRzRnSUNBZ1B5QjNhVzVrYjNjdWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxMbUpwYm1Rb2QybHVaRzkzS1Z4dUlDQWdJRG9nYzJWMFZHbHRaVzkxZEZ4dUlDQTZJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0J1WlhoMElDb3ZJR1oxYm1OMGFXOXVJQ2htYmlrZ2V5QnlaWFIxY200Z1ptNG9LVHNnZlR0Y2JseHVablZ1WTNScGIyNGdibVY0ZEVaeVlXMWxJQ2htYmlrZ2UxeHVJQ0J5WVdZb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lISmhaaWhtYmlrN1hHNGdJSDBwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJoWkdSVWNtRnVjMmwwYVc5dVEyeGhjM01nS0dWc0xDQmpiSE1wSUh0Y2JpQWdkbUZ5SUhSeVlXNXphWFJwYjI1RGJHRnpjMlZ6SUQwZ1pXd3VYM1J5WVc1emFYUnBiMjVEYkdGemMyVnpJSHg4SUNobGJDNWZkSEpoYm5OcGRHbHZia05zWVhOelpYTWdQU0JiWFNrN1hHNGdJR2xtSUNoMGNtRnVjMmwwYVc5dVEyeGhjM05sY3k1cGJtUmxlRTltS0dOc2N5a2dQQ0F3S1NCN1hHNGdJQ0FnZEhKaGJuTnBkR2x2YmtOc1lYTnpaWE11Y0hWemFDaGpiSE1wTzF4dUlDQWdJR0ZrWkVOc1lYTnpLR1ZzTENCamJITXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGJXOTJaVlJ5WVc1emFYUnBiMjVEYkdGemN5QW9aV3dzSUdOc2N5a2dlMXh1SUNCcFppQW9aV3d1WDNSeVlXNXphWFJwYjI1RGJHRnpjMlZ6S1NCN1hHNGdJQ0FnY21WdGIzWmxLR1ZzTGw5MGNtRnVjMmwwYVc5dVEyeGhjM05sY3l3Z1kyeHpLVHRjYmlBZ2ZWeHVJQ0J5WlcxdmRtVkRiR0Z6Y3lobGJDd2dZMnh6S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZDJobGJsUnlZVzV6YVhScGIyNUZibVJ6SUNoY2JpQWdaV3dzWEc0Z0lHVjRjR1ZqZEdWa1ZIbHdaU3hjYmlBZ1kySmNiaWtnZTF4dUlDQjJZWElnY21WbUlEMGdaMlYwVkhKaGJuTnBkR2x2YmtsdVptOG9aV3dzSUdWNGNHVmpkR1ZrVkhsd1pTazdYRzRnSUhaaGNpQjBlWEJsSUQwZ2NtVm1MblI1Y0dVN1hHNGdJSFpoY2lCMGFXMWxiM1YwSUQwZ2NtVm1MblJwYldWdmRYUTdYRzRnSUhaaGNpQndjbTl3UTI5MWJuUWdQU0J5WldZdWNISnZjRU52ZFc1ME8xeHVJQ0JwWmlBb0lYUjVjR1VwSUhzZ2NtVjBkWEp1SUdOaUtDa2dmVnh1SUNCMllYSWdaWFpsYm5RZ1BTQjBlWEJsSUQwOVBTQlVVa0ZPVTBsVVNVOU9JRDhnZEhKaGJuTnBkR2x2YmtWdVpFVjJaVzUwSURvZ1lXNXBiV0YwYVc5dVJXNWtSWFpsYm5RN1hHNGdJSFpoY2lCbGJtUmxaQ0E5SURBN1hHNGdJSFpoY2lCbGJtUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWld3dWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaGxkbVZ1ZEN3Z2IyNUZibVFwTzF4dUlDQWdJR05pS0NrN1hHNGdJSDA3WEc0Z0lIWmhjaUJ2YmtWdVpDQTlJR1oxYm1OMGFXOXVJQ2hsS1NCN1hHNGdJQ0FnYVdZZ0tHVXVkR0Z5WjJWMElEMDlQU0JsYkNrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ3NyWlc1a1pXUWdQajBnY0hKdmNFTnZkVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHVnVaQ2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZUdGNiaUFnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2FXWWdLR1Z1WkdWa0lEd2djSEp2Y0VOdmRXNTBLU0I3WEc0Z0lDQWdJQ0JsYm1Rb0tUdGNiaUFnSUNCOVhHNGdJSDBzSUhScGJXVnZkWFFnS3lBeEtUdGNiaUFnWld3dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lobGRtVnVkQ3dnYjI1RmJtUXBPMXh1ZlZ4dVhHNTJZWElnZEhKaGJuTm1iM0p0VWtVZ1BTQXZYRnhpS0hSeVlXNXpabTl5Ylh4aGJHd3BLQ3g4SkNrdk8xeHVYRzVtZFc1amRHbHZiaUJuWlhSVWNtRnVjMmwwYVc5dVNXNW1ieUFvWld3c0lHVjRjR1ZqZEdWa1ZIbHdaU2tnZTF4dUlDQjJZWElnYzNSNWJHVnpJRDBnZDJsdVpHOTNMbWRsZEVOdmJYQjFkR1ZrVTNSNWJHVW9aV3dwTzF4dUlDQjJZWElnZEhKaGJuTnBkR2x2YmtSbGJHRjVjeUE5SUhOMGVXeGxjMXQwY21GdWMybDBhVzl1VUhKdmNDQXJJQ2RFWld4aGVTZGRMbk53YkdsMEtDY3NJQ2NwTzF4dUlDQjJZWElnZEhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1Y3lBOUlITjBlV3hsYzF0MGNtRnVjMmwwYVc5dVVISnZjQ0FySUNkRWRYSmhkR2x2YmlkZExuTndiR2wwS0Njc0lDY3BPMXh1SUNCMllYSWdkSEpoYm5OcGRHbHZibFJwYldWdmRYUWdQU0JuWlhSVWFXMWxiM1YwS0hSeVlXNXphWFJwYjI1RVpXeGhlWE1zSUhSeVlXNXphWFJwYjI1RWRYSmhkR2x2Ym5NcE8xeHVJQ0IyWVhJZ1lXNXBiV0YwYVc5dVJHVnNZWGx6SUQwZ2MzUjViR1Z6VzJGdWFXMWhkR2x2YmxCeWIzQWdLeUFuUkdWc1lYa25YUzV6Y0d4cGRDZ25MQ0FuS1R0Y2JpQWdkbUZ5SUdGdWFXMWhkR2x2YmtSMWNtRjBhVzl1Y3lBOUlITjBlV3hsYzF0aGJtbHRZWFJwYjI1UWNtOXdJQ3NnSjBSMWNtRjBhVzl1SjEwdWMzQnNhWFFvSnl3Z0p5azdYRzRnSUhaaGNpQmhibWx0WVhScGIyNVVhVzFsYjNWMElEMGdaMlYwVkdsdFpXOTFkQ2hoYm1sdFlYUnBiMjVFWld4aGVYTXNJR0Z1YVcxaGRHbHZia1IxY21GMGFXOXVjeWs3WEc1Y2JpQWdkbUZ5SUhSNWNHVTdYRzRnSUhaaGNpQjBhVzFsYjNWMElEMGdNRHRjYmlBZ2RtRnlJSEJ5YjNCRGIzVnVkQ0E5SURBN1hHNGdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0JwWmlBb1pYaHdaV04wWldSVWVYQmxJRDA5UFNCVVVrRk9VMGxVU1U5T0tTQjdYRzRnSUNBZ2FXWWdLSFJ5WVc1emFYUnBiMjVVYVcxbGIzVjBJRDRnTUNrZ2UxeHVJQ0FnSUNBZ2RIbHdaU0E5SUZSU1FVNVRTVlJKVDA0N1hHNGdJQ0FnSUNCMGFXMWxiM1YwSUQwZ2RISmhibk5wZEdsdmJsUnBiV1Z2ZFhRN1hHNGdJQ0FnSUNCd2NtOXdRMjkxYm5RZ1BTQjBjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNXpMbXhsYm1kMGFEdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQnBaaUFvWlhod1pXTjBaV1JVZVhCbElEMDlQU0JCVGtsTlFWUkpUMDRwSUh0Y2JpQWdJQ0JwWmlBb1lXNXBiV0YwYVc5dVZHbHRaVzkxZENBK0lEQXBJSHRjYmlBZ0lDQWdJSFI1Y0dVZ1BTQkJUa2xOUVZSSlQwNDdYRzRnSUNBZ0lDQjBhVzFsYjNWMElEMGdZVzVwYldGMGFXOXVWR2x0Wlc5MWREdGNiaUFnSUNBZ0lIQnliM0JEYjNWdWRDQTlJR0Z1YVcxaGRHbHZia1IxY21GMGFXOXVjeTVzWlc1bmRHZzdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUnBiV1Z2ZFhRZ1BTQk5ZWFJvTG0xaGVDaDBjbUZ1YzJsMGFXOXVWR2x0Wlc5MWRDd2dZVzVwYldGMGFXOXVWR2x0Wlc5MWRDazdYRzRnSUNBZ2RIbHdaU0E5SUhScGJXVnZkWFFnUGlBd1hHNGdJQ0FnSUNBL0lIUnlZVzV6YVhScGIyNVVhVzFsYjNWMElENGdZVzVwYldGMGFXOXVWR2x0Wlc5MWRGeHVJQ0FnSUNBZ0lDQS9JRlJTUVU1VFNWUkpUMDVjYmlBZ0lDQWdJQ0FnT2lCQlRrbE5RVlJKVDA1Y2JpQWdJQ0FnSURvZ2JuVnNiRHRjYmlBZ0lDQndjbTl3UTI5MWJuUWdQU0IwZVhCbFhHNGdJQ0FnSUNBL0lIUjVjR1VnUFQwOUlGUlNRVTVUU1ZSSlQwNWNiaUFnSUNBZ0lDQWdQeUIwY21GdWMybDBhVzl1UkhWeVlYUnBiMjV6TG14bGJtZDBhRnh1SUNBZ0lDQWdJQ0E2SUdGdWFXMWhkR2x2YmtSMWNtRjBhVzl1Y3k1c1pXNW5kR2hjYmlBZ0lDQWdJRG9nTUR0Y2JpQWdmVnh1SUNCMllYSWdhR0Z6VkhKaGJuTm1iM0p0SUQxY2JpQWdJQ0IwZVhCbElEMDlQU0JVVWtGT1UwbFVTVTlPSUNZbVhHNGdJQ0FnZEhKaGJuTm1iM0p0VWtVdWRHVnpkQ2h6ZEhsc1pYTmJkSEpoYm5OcGRHbHZibEJ5YjNBZ0t5QW5VSEp2Y0dWeWRIa25YU2s3WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnZEhsd1pUb2dkSGx3WlN4Y2JpQWdJQ0IwYVcxbGIzVjBPaUIwYVcxbGIzVjBMRnh1SUNBZ0lIQnliM0JEYjNWdWREb2djSEp2Y0VOdmRXNTBMRnh1SUNBZ0lHaGhjMVJ5WVc1elptOXliVG9nYUdGelZISmhibk5tYjNKdFhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwVkdsdFpXOTFkQ0FvWkdWc1lYbHpMQ0JrZFhKaGRHbHZibk1wSUh0Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnZDJocGJHVWdLR1JsYkdGNWN5NXNaVzVuZEdnZ1BDQmtkWEpoZEdsdmJuTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ1pHVnNZWGx6SUQwZ1pHVnNZWGx6TG1OdmJtTmhkQ2hrWld4aGVYTXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRTFoZEdndWJXRjRMbUZ3Y0d4NUtHNTFiR3dzSUdSMWNtRjBhVzl1Y3k1dFlYQW9ablZ1WTNScGIyNGdLR1FzSUdrcElIdGNiaUFnSUNCeVpYUjFjbTRnZEc5TmN5aGtLU0FySUhSdlRYTW9aR1ZzWVhselcybGRLVnh1SUNCOUtTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RHOU5jeUFvY3lrZ2UxeHVJQ0J5WlhSMWNtNGdUblZ0WW1WeUtITXVjMnhwWTJVb01Dd2dMVEVwS1NBcUlERXdNREJjYm4xY2JseHVMeW9nSUNvdlhHNWNibVoxYm1OMGFXOXVJR1Z1ZEdWeUlDaDJibTlrWlN3Z2RHOW5aMnhsUkdsemNHeGhlU2tnZTF4dUlDQjJZWElnWld3Z1BTQjJibTlrWlM1bGJHMDdYRzVjYmlBZ0x5OGdZMkZzYkNCc1pXRjJaU0JqWVd4c1ltRmpheUJ1YjNkY2JpQWdhV1lnS0dselJHVm1LR1ZzTGw5c1pXRjJaVU5pS1NrZ2UxeHVJQ0FnSUdWc0xsOXNaV0YyWlVOaUxtTmhibU5sYkd4bFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnWld3dVgyeGxZWFpsUTJJb0tUdGNiaUFnZlZ4dVhHNGdJSFpoY2lCa1lYUmhJRDBnY21WemIyeDJaVlJ5WVc1emFYUnBiMjRvZG01dlpHVXVaR0YwWVM1MGNtRnVjMmwwYVc5dUtUdGNiaUFnYVdZZ0tHbHpWVzVrWldZb1pHRjBZU2twSUh0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dVhHNGdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0JwWmlBb2FYTkVaV1lvWld3dVgyVnVkR1Z5UTJJcElIeDhJR1ZzTG01dlpHVlVlWEJsSUNFOVBTQXhLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmx4dUlDQjJZWElnWTNOeklEMGdaR0YwWVM1amMzTTdYRzRnSUhaaGNpQjBlWEJsSUQwZ1pHRjBZUzUwZVhCbE8xeHVJQ0IyWVhJZ1pXNTBaWEpEYkdGemN5QTlJR1JoZEdFdVpXNTBaWEpEYkdGemN6dGNiaUFnZG1GeUlHVnVkR1Z5Vkc5RGJHRnpjeUE5SUdSaGRHRXVaVzUwWlhKVWIwTnNZWE56TzF4dUlDQjJZWElnWlc1MFpYSkJZM1JwZG1WRGJHRnpjeUE5SUdSaGRHRXVaVzUwWlhKQlkzUnBkbVZEYkdGemN6dGNiaUFnZG1GeUlHRndjR1ZoY2tOc1lYTnpJRDBnWkdGMFlTNWhjSEJsWVhKRGJHRnpjenRjYmlBZ2RtRnlJR0Z3Y0dWaGNsUnZRMnhoYzNNZ1BTQmtZWFJoTG1Gd2NHVmhjbFJ2UTJ4aGMzTTdYRzRnSUhaaGNpQmhjSEJsWVhKQlkzUnBkbVZEYkdGemN5QTlJR1JoZEdFdVlYQndaV0Z5UVdOMGFYWmxRMnhoYzNNN1hHNGdJSFpoY2lCaVpXWnZjbVZGYm5SbGNpQTlJR1JoZEdFdVltVm1iM0psUlc1MFpYSTdYRzRnSUhaaGNpQmxiblJsY2lBOUlHUmhkR0V1Wlc1MFpYSTdYRzRnSUhaaGNpQmhablJsY2tWdWRHVnlJRDBnWkdGMFlTNWhablJsY2tWdWRHVnlPMXh1SUNCMllYSWdaVzUwWlhKRFlXNWpaV3hzWldRZ1BTQmtZWFJoTG1WdWRHVnlRMkZ1WTJWc2JHVmtPMXh1SUNCMllYSWdZbVZtYjNKbFFYQndaV0Z5SUQwZ1pHRjBZUzVpWldadmNtVkJjSEJsWVhJN1hHNGdJSFpoY2lCaGNIQmxZWElnUFNCa1lYUmhMbUZ3Y0dWaGNqdGNiaUFnZG1GeUlHRm1kR1Z5UVhCd1pXRnlJRDBnWkdGMFlTNWhablJsY2tGd2NHVmhjanRjYmlBZ2RtRnlJR0Z3Y0dWaGNrTmhibU5sYkd4bFpDQTlJR1JoZEdFdVlYQndaV0Z5UTJGdVkyVnNiR1ZrTzF4dUlDQjJZWElnWkhWeVlYUnBiMjRnUFNCa1lYUmhMbVIxY21GMGFXOXVPMXh1WEc0Z0lDOHZJR0ZqZEdsMlpVbHVjM1JoYm1ObElIZHBiR3dnWVd4M1lYbHpJR0psSUhSb1pTQThkSEpoYm5OcGRHbHZiajRnWTI5dGNHOXVaVzUwSUcxaGJtRm5hVzVuSUhSb2FYTmNiaUFnTHk4Z2RISmhibk5wZEdsdmJpNGdUMjVsSUdWa1oyVWdZMkZ6WlNCMGJ5QmphR1ZqYXlCcGN5QjNhR1Z1SUhSb1pTQThkSEpoYm5OcGRHbHZiajRnYVhNZ2NHeGhZMlZrWEc0Z0lDOHZJR0Z6SUhSb1pTQnliMjkwSUc1dlpHVWdiMllnWVNCamFHbHNaQ0JqYjIxd2IyNWxiblF1SUVsdUlIUm9ZWFFnWTJGelpTQjNaU0J1WldWa0lIUnZJR05vWldOclhHNGdJQzh2SUR4MGNtRnVjMmwwYVc5dVBpZHpJSEJoY21WdWRDQm1iM0lnWVhCd1pXRnlJR05vWldOckxseHVJQ0IyWVhJZ1kyOXVkR1Y0ZENBOUlHRmpkR2wyWlVsdWMzUmhibU5sTzF4dUlDQjJZWElnZEhKaGJuTnBkR2x2Yms1dlpHVWdQU0JoWTNScGRtVkpibk4wWVc1alpTNGtkbTV2WkdVN1hHNGdJSGRvYVd4bElDaDBjbUZ1YzJsMGFXOXVUbTlrWlNBbUppQjBjbUZ1YzJsMGFXOXVUbTlrWlM1d1lYSmxiblFwSUh0Y2JpQWdJQ0IwY21GdWMybDBhVzl1VG05a1pTQTlJSFJ5WVc1emFYUnBiMjVPYjJSbExuQmhjbVZ1ZER0Y2JpQWdJQ0JqYjI1MFpYaDBJRDBnZEhKaGJuTnBkR2x2Yms1dlpHVXVZMjl1ZEdWNGREdGNiaUFnZlZ4dVhHNGdJSFpoY2lCcGMwRndjR1ZoY2lBOUlDRmpiMjUwWlhoMExsOXBjMDF2ZFc1MFpXUWdmSHdnSVhadWIyUmxMbWx6VW05dmRFbHVjMlZ5ZER0Y2JseHVJQ0JwWmlBb2FYTkJjSEJsWVhJZ0ppWWdJV0Z3Y0dWaGNpQW1KaUJoY0hCbFlYSWdJVDA5SUNjbktTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNibHh1SUNCMllYSWdjM1JoY25SRGJHRnpjeUE5SUdselFYQndaV0Z5SUNZbUlHRndjR1ZoY2tOc1lYTnpYRzRnSUNBZ1B5QmhjSEJsWVhKRGJHRnpjMXh1SUNBZ0lEb2daVzUwWlhKRGJHRnpjenRjYmlBZ2RtRnlJR0ZqZEdsMlpVTnNZWE56SUQwZ2FYTkJjSEJsWVhJZ0ppWWdZWEJ3WldGeVFXTjBhWFpsUTJ4aGMzTmNiaUFnSUNBL0lHRndjR1ZoY2tGamRHbDJaVU5zWVhOelhHNGdJQ0FnT2lCbGJuUmxja0ZqZEdsMlpVTnNZWE56TzF4dUlDQjJZWElnZEc5RGJHRnpjeUE5SUdselFYQndaV0Z5SUNZbUlHRndjR1ZoY2xSdlEyeGhjM05jYmlBZ0lDQS9JR0Z3Y0dWaGNsUnZRMnhoYzNOY2JpQWdJQ0E2SUdWdWRHVnlWRzlEYkdGemN6dGNibHh1SUNCMllYSWdZbVZtYjNKbFJXNTBaWEpJYjI5cklEMGdhWE5CY0hCbFlYSmNiaUFnSUNBL0lDaGlaV1p2Y21WQmNIQmxZWElnZkh3Z1ltVm1iM0psUlc1MFpYSXBYRzRnSUNBZ09pQmlaV1p2Y21WRmJuUmxjanRjYmlBZ2RtRnlJR1Z1ZEdWeVNHOXZheUE5SUdselFYQndaV0Z5WEc0Z0lDQWdQeUFvZEhsd1pXOW1JR0Z3Y0dWaGNpQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lHRndjR1ZoY2lBNklHVnVkR1Z5S1Z4dUlDQWdJRG9nWlc1MFpYSTdYRzRnSUhaaGNpQmhablJsY2tWdWRHVnlTRzl2YXlBOUlHbHpRWEJ3WldGeVhHNGdJQ0FnUHlBb1lXWjBaWEpCY0hCbFlYSWdmSHdnWVdaMFpYSkZiblJsY2lsY2JpQWdJQ0E2SUdGbWRHVnlSVzUwWlhJN1hHNGdJSFpoY2lCbGJuUmxja05oYm1ObGJHeGxaRWh2YjJzZ1BTQnBjMEZ3Y0dWaGNseHVJQ0FnSUQ4Z0tHRndjR1ZoY2tOaGJtTmxiR3hsWkNCOGZDQmxiblJsY2tOaGJtTmxiR3hsWkNsY2JpQWdJQ0E2SUdWdWRHVnlRMkZ1WTJWc2JHVmtPMXh1WEc0Z0lIWmhjaUJsZUhCc2FXTnBkRVZ1ZEdWeVJIVnlZWFJwYjI0Z1BTQjBiMDUxYldKbGNpaGNiaUFnSUNCcGMwOWlhbVZqZENoa2RYSmhkR2x2YmlsY2JpQWdJQ0FnSUQ4Z1pIVnlZWFJwYjI0dVpXNTBaWEpjYmlBZ0lDQWdJRG9nWkhWeVlYUnBiMjVjYmlBZ0tUdGNibHh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCbGVIQnNhV05wZEVWdWRHVnlSSFZ5WVhScGIyNGdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lHTm9aV05yUkhWeVlYUnBiMjRvWlhod2JHbGphWFJGYm5SbGNrUjFjbUYwYVc5dUxDQW5aVzUwWlhJbkxDQjJibTlrWlNrN1hHNGdJSDFjYmx4dUlDQjJZWElnWlhod1pXTjBjME5UVXlBOUlHTnpjeUFoUFQwZ1ptRnNjMlVnSmlZZ0lXbHpTVVU1TzF4dUlDQjJZWElnZFhObGNsZGhiblJ6UTI5dWRISnZiQ0E5SUdkbGRFaHZiMnRCY21kMWJXVnVkSE5NWlc1bmRHZ29aVzUwWlhKSWIyOXJLVHRjYmx4dUlDQjJZWElnWTJJZ1BTQmxiQzVmWlc1MFpYSkRZaUE5SUc5dVkyVW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR2xtSUNobGVIQmxZM1J6UTFOVEtTQjdYRzRnSUNBZ0lDQnlaVzF2ZG1WVWNtRnVjMmwwYVc5dVEyeGhjM01vWld3c0lIUnZRMnhoYzNNcE8xeHVJQ0FnSUNBZ2NtVnRiM1psVkhKaGJuTnBkR2x2YmtOc1lYTnpLR1ZzTENCaFkzUnBkbVZEYkdGemN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGpZaTVqWVc1alpXeHNaV1FwSUh0Y2JpQWdJQ0FnSUdsbUlDaGxlSEJsWTNSelExTlRLU0I3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaVlJ5WVc1emFYUnBiMjVEYkdGemN5aGxiQ3dnYzNSaGNuUkRiR0Z6Y3lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCbGJuUmxja05oYm1ObGJHeGxaRWh2YjJzZ0ppWWdaVzUwWlhKRFlXNWpaV3hzWldSSWIyOXJLR1ZzS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdZV1owWlhKRmJuUmxja2h2YjJzZ0ppWWdZV1owWlhKRmJuUmxja2h2YjJzb1pXd3BPMXh1SUNBZ0lIMWNiaUFnSUNCbGJDNWZaVzUwWlhKRFlpQTlJRzUxYkd3N1hHNGdJSDBwTzF4dVhHNGdJR2xtSUNnaGRtNXZaR1V1WkdGMFlTNXphRzkzS1NCN1hHNGdJQ0FnTHk4Z2NtVnRiM1psSUhCbGJtUnBibWNnYkdWaGRtVWdaV3hsYldWdWRDQnZiaUJsYm5SbGNpQmllU0JwYm1wbFkzUnBibWNnWVc0Z2FXNXpaWEowSUdodmIydGNiaUFnSUNCdFpYSm5aVlpPYjJSbFNHOXZheWgyYm05a1pTd2dKMmx1YzJWeWRDY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUhaaGNpQndZWEpsYm5RZ1BTQmxiQzV3WVhKbGJuUk9iMlJsTzF4dUlDQWdJQ0FnZG1GeUlIQmxibVJwYm1kT2IyUmxJRDBnY0dGeVpXNTBJQ1ltSUhCaGNtVnVkQzVmY0dWdVpHbHVaeUFtSmlCd1lYSmxiblF1WDNCbGJtUnBibWRiZG01dlpHVXVhMlY1WFR0Y2JpQWdJQ0FnSUdsbUlDaHdaVzVrYVc1blRtOWtaU0FtSmx4dUlDQWdJQ0FnSUNCd1pXNWthVzVuVG05a1pTNTBZV2NnUFQwOUlIWnViMlJsTG5SaFp5QW1KbHh1SUNBZ0lDQWdJQ0J3Wlc1a2FXNW5UbTlrWlM1bGJHMHVYMnhsWVhabFEySmNiaUFnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0J3Wlc1a2FXNW5UbTlrWlM1bGJHMHVYMnhsWVhabFEySW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1Z1ZEdWeVNHOXZheUFtSmlCbGJuUmxja2h2YjJzb1pXd3NJR05pS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHZJSE4wWVhKMElHVnVkR1Z5SUhSeVlXNXphWFJwYjI1Y2JpQWdZbVZtYjNKbFJXNTBaWEpJYjI5cklDWW1JR0psWm05eVpVVnVkR1Z5U0c5dmF5aGxiQ2s3WEc0Z0lHbG1JQ2hsZUhCbFkzUnpRMU5US1NCN1hHNGdJQ0FnWVdSa1ZISmhibk5wZEdsdmJrTnNZWE56S0dWc0xDQnpkR0Z5ZEVOc1lYTnpLVHRjYmlBZ0lDQmhaR1JVY21GdWMybDBhVzl1UTJ4aGMzTW9aV3dzSUdGamRHbDJaVU5zWVhOektUdGNiaUFnSUNCdVpYaDBSbkpoYldVb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdZV1JrVkhKaGJuTnBkR2x2YmtOc1lYTnpLR1ZzTENCMGIwTnNZWE56S1R0Y2JpQWdJQ0FnSUhKbGJXOTJaVlJ5WVc1emFYUnBiMjVEYkdGemN5aGxiQ3dnYzNSaGNuUkRiR0Z6Y3lrN1hHNGdJQ0FnSUNCcFppQW9JV05pTG1OaGJtTmxiR3hsWkNBbUppQWhkWE5sY2xkaGJuUnpRMjl1ZEhKdmJDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2FYTldZV3hwWkVSMWNtRjBhVzl1S0dWNGNHeHBZMmwwUlc1MFpYSkVkWEpoZEdsdmJpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCelpYUlVhVzFsYjNWMEtHTmlMQ0JsZUhCc2FXTnBkRVZ1ZEdWeVJIVnlZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSGRvWlc1VWNtRnVjMmwwYVc5dVJXNWtjeWhsYkN3Z2RIbHdaU3dnWTJJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JwWmlBb2RtNXZaR1V1WkdGMFlTNXphRzkzS1NCN1hHNGdJQ0FnZEc5bloyeGxSR2x6Y0d4aGVTQW1KaUIwYjJkbmJHVkVhWE53YkdGNUtDazdYRzRnSUNBZ1pXNTBaWEpJYjI5cklDWW1JR1Z1ZEdWeVNHOXZheWhsYkN3Z1kySXBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tDRmxlSEJsWTNSelExTlRJQ1ltSUNGMWMyVnlWMkZ1ZEhORGIyNTBjbTlzS1NCN1hHNGdJQ0FnWTJJb0tUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJzWldGMlpTQW9kbTV2WkdVc0lISnRLU0I3WEc0Z0lIWmhjaUJsYkNBOUlIWnViMlJsTG1Wc2JUdGNibHh1SUNBdkx5QmpZV3hzSUdWdWRHVnlJR05oYkd4aVlXTnJJRzV2ZDF4dUlDQnBaaUFvYVhORVpXWW9aV3d1WDJWdWRHVnlRMklwS1NCN1hHNGdJQ0FnWld3dVgyVnVkR1Z5UTJJdVkyRnVZMlZzYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0JsYkM1ZlpXNTBaWEpEWWlncE8xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUdSaGRHRWdQU0J5WlhOdmJIWmxWSEpoYm5OcGRHbHZiaWgyYm05a1pTNWtZWFJoTG5SeVlXNXphWFJwYjI0cE8xeHVJQ0JwWmlBb2FYTlZibVJsWmloa1lYUmhLU0I4ZkNCbGJDNXViMlJsVkhsd1pTQWhQVDBnTVNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ5YlNncFhHNGdJSDFjYmx4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdhV1lnS0dselJHVm1LR1ZzTGw5c1pXRjJaVU5pS1NrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNWNiaUFnZG1GeUlHTnpjeUE5SUdSaGRHRXVZM056TzF4dUlDQjJZWElnZEhsd1pTQTlJR1JoZEdFdWRIbHdaVHRjYmlBZ2RtRnlJR3hsWVhabFEyeGhjM01nUFNCa1lYUmhMbXhsWVhabFEyeGhjM003WEc0Z0lIWmhjaUJzWldGMlpWUnZRMnhoYzNNZ1BTQmtZWFJoTG14bFlYWmxWRzlEYkdGemN6dGNiaUFnZG1GeUlHeGxZWFpsUVdOMGFYWmxRMnhoYzNNZ1BTQmtZWFJoTG14bFlYWmxRV04wYVhabFEyeGhjM003WEc0Z0lIWmhjaUJpWldadmNtVk1aV0YyWlNBOUlHUmhkR0V1WW1WbWIzSmxUR1ZoZG1VN1hHNGdJSFpoY2lCc1pXRjJaU0E5SUdSaGRHRXViR1ZoZG1VN1hHNGdJSFpoY2lCaFpuUmxja3hsWVhabElEMGdaR0YwWVM1aFpuUmxja3hsWVhabE8xeHVJQ0IyWVhJZ2JHVmhkbVZEWVc1alpXeHNaV1FnUFNCa1lYUmhMbXhsWVhabFEyRnVZMlZzYkdWa08xeHVJQ0IyWVhJZ1pHVnNZWGxNWldGMlpTQTlJR1JoZEdFdVpHVnNZWGxNWldGMlpUdGNiaUFnZG1GeUlHUjFjbUYwYVc5dUlEMGdaR0YwWVM1a2RYSmhkR2x2Ymp0Y2JseHVJQ0IyWVhJZ1pYaHdaV04wYzBOVFV5QTlJR056Y3lBaFBUMGdabUZzYzJVZ0ppWWdJV2x6U1VVNU8xeHVJQ0IyWVhJZ2RYTmxjbGRoYm5SelEyOXVkSEp2YkNBOUlHZGxkRWh2YjJ0QmNtZDFiV1Z1ZEhOTVpXNW5kR2dvYkdWaGRtVXBPMXh1WEc0Z0lIWmhjaUJsZUhCc2FXTnBkRXhsWVhabFJIVnlZWFJwYjI0Z1BTQjBiMDUxYldKbGNpaGNiaUFnSUNCcGMwOWlhbVZqZENoa2RYSmhkR2x2YmlsY2JpQWdJQ0FnSUQ4Z1pIVnlZWFJwYjI0dWJHVmhkbVZjYmlBZ0lDQWdJRG9nWkhWeVlYUnBiMjVjYmlBZ0tUdGNibHh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCcGMwUmxaaWhsZUhCc2FXTnBkRXhsWVhabFJIVnlZWFJwYjI0cEtTQjdYRzRnSUNBZ1kyaGxZMnRFZFhKaGRHbHZiaWhsZUhCc2FXTnBkRXhsWVhabFJIVnlZWFJwYjI0c0lDZHNaV0YyWlNjc0lIWnViMlJsS1R0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJqWWlBOUlHVnNMbDlzWldGMlpVTmlJRDBnYjI1alpTaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdhV1lnS0dWc0xuQmhjbVZ1ZEU1dlpHVWdKaVlnWld3dWNHRnlaVzUwVG05a1pTNWZjR1Z1WkdsdVp5a2dlMXh1SUNBZ0lDQWdaV3d1Y0dGeVpXNTBUbTlrWlM1ZmNHVnVaR2x1WjF0MmJtOWtaUzVyWlhsZElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dWNGNHVmpkSE5EVTFNcElIdGNiaUFnSUNBZ0lISmxiVzkyWlZSeVlXNXphWFJwYjI1RGJHRnpjeWhsYkN3Z2JHVmhkbVZVYjBOc1lYTnpLVHRjYmlBZ0lDQWdJSEpsYlc5MlpWUnlZVzV6YVhScGIyNURiR0Z6Y3lobGJDd2diR1ZoZG1WQlkzUnBkbVZEYkdGemN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGpZaTVqWVc1alpXeHNaV1FwSUh0Y2JpQWdJQ0FnSUdsbUlDaGxlSEJsWTNSelExTlRLU0I3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaVlJ5WVc1emFYUnBiMjVEYkdGemN5aGxiQ3dnYkdWaGRtVkRiR0Z6Y3lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCc1pXRjJaVU5oYm1ObGJHeGxaQ0FtSmlCc1pXRjJaVU5oYm1ObGJHeGxaQ2hsYkNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEp0S0NrN1hHNGdJQ0FnSUNCaFpuUmxja3hsWVhabElDWW1JR0ZtZEdWeVRHVmhkbVVvWld3cE8xeHVJQ0FnSUgxY2JpQWdJQ0JsYkM1ZmJHVmhkbVZEWWlBOUlHNTFiR3c3WEc0Z0lIMHBPMXh1WEc0Z0lHbG1JQ2hrWld4aGVVeGxZWFpsS1NCN1hHNGdJQ0FnWkdWc1lYbE1aV0YyWlNod1pYSm1iM0p0VEdWaGRtVXBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEJsY21admNtMU1aV0YyWlNncE8xeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjR1Z5Wm05eWJVeGxZWFpsSUNncElIdGNiaUFnSUNBdkx5QjBhR1VnWkdWc1lYbGxaQ0JzWldGMlpTQnRZWGtnYUdGMlpTQmhiSEpsWVdSNUlHSmxaVzRnWTJGdVkyVnNiR1ZrWEc0Z0lDQWdhV1lnS0dOaUxtTmhibU5sYkd4bFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhKbFkyOXlaQ0JzWldGMmFXNW5JR1ZzWlcxbGJuUmNiaUFnSUNCcFppQW9JWFp1YjJSbExtUmhkR0V1YzJodmR5a2dlMXh1SUNBZ0lDQWdLR1ZzTG5CaGNtVnVkRTV2WkdVdVgzQmxibVJwYm1jZ2ZId2dLR1ZzTG5CaGNtVnVkRTV2WkdVdVgzQmxibVJwYm1jZ1BTQjdmU2twV3loMmJtOWtaUzVyWlhrcFhTQTlJSFp1YjJSbE8xeHVJQ0FnSUgxY2JpQWdJQ0JpWldadmNtVk1aV0YyWlNBbUppQmlaV1p2Y21WTVpXRjJaU2hsYkNrN1hHNGdJQ0FnYVdZZ0tHVjRjR1ZqZEhORFUxTXBJSHRjYmlBZ0lDQWdJR0ZrWkZSeVlXNXphWFJwYjI1RGJHRnpjeWhsYkN3Z2JHVmhkbVZEYkdGemN5azdYRzRnSUNBZ0lDQmhaR1JVY21GdWMybDBhVzl1UTJ4aGMzTW9aV3dzSUd4bFlYWmxRV04wYVhabFEyeGhjM01wTzF4dUlDQWdJQ0FnYm1WNGRFWnlZVzFsS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdZV1JrVkhKaGJuTnBkR2x2YmtOc1lYTnpLR1ZzTENCc1pXRjJaVlJ2UTJ4aGMzTXBPMXh1SUNBZ0lDQWdJQ0J5WlcxdmRtVlVjbUZ1YzJsMGFXOXVRMnhoYzNNb1pXd3NJR3hsWVhabFEyeGhjM01wTzF4dUlDQWdJQ0FnSUNCcFppQW9JV05pTG1OaGJtTmxiR3hsWkNBbUppQWhkWE5sY2xkaGJuUnpRMjl1ZEhKdmJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMVpoYkdsa1JIVnlZWFJwYjI0b1pYaHdiR2xqYVhSTVpXRjJaVVIxY21GMGFXOXVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2hqWWl3Z1pYaHdiR2xqYVhSTVpXRjJaVVIxY21GMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmhsYmxSeVlXNXphWFJwYjI1RmJtUnpLR1ZzTENCMGVYQmxMQ0JqWWlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdiR1ZoZG1VZ0ppWWdiR1ZoZG1Vb1pXd3NJR05pS1R0Y2JpQWdJQ0JwWmlBb0lXVjRjR1ZqZEhORFUxTWdKaVlnSVhWelpYSlhZVzUwYzBOdmJuUnliMndwSUh0Y2JpQWdJQ0FnSUdOaUtDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaTh2SUc5dWJIa2dkWE5sWkNCcGJpQmtaWFlnYlc5a1pWeHVablZ1WTNScGIyNGdZMmhsWTJ0RWRYSmhkR2x2YmlBb2RtRnNMQ0J1WVcxbExDQjJibTlrWlNrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUhaaGJDQWhQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ1hDSThkSEpoYm5OcGRHbHZiajRnWlhod2JHbGphWFFnWENJZ0t5QnVZVzFsSUNzZ1hDSWdaSFZ5WVhScGIyNGdhWE1nYm05MElHRWdkbUZzYVdRZ2JuVnRZbVZ5SUMwZ1hDSWdLMXh1SUNBZ0lDQWdYQ0puYjNRZ1hDSWdLeUFvU2xOUFRpNXpkSEpwYm1kcFpua29kbUZzS1NrZ0t5QmNJaTVjSWl4Y2JpQWdJQ0FnSUhadWIyUmxMbU52Ym5SbGVIUmNiaUFnSUNBcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0dselRtRk9LSFpoYkNrcElIdGNiaUFnSUNCM1lYSnVLRnh1SUNBZ0lDQWdYQ0k4ZEhKaGJuTnBkR2x2Ymo0Z1pYaHdiR2xqYVhRZ1hDSWdLeUJ1WVcxbElDc2dYQ0lnWkhWeVlYUnBiMjRnYVhNZ1RtRk9JQzBnWENJZ0sxeHVJQ0FnSUNBZ0ozUm9aU0JrZFhKaGRHbHZiaUJsZUhCeVpYTnphVzl1SUcxcFoyaDBJR0psSUdsdVkyOXljbVZqZEM0bkxGeHVJQ0FnSUNBZ2RtNXZaR1V1WTI5dWRHVjRkRnh1SUNBZ0lDazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVhOV1lXeHBaRVIxY21GMGFXOXVJQ2gyWVd3cElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQjJZV3dnUFQwOUlDZHVkVzFpWlhJbklDWW1JQ0ZwYzA1aFRpaDJZV3dwWEc1OVhHNWNiaThxS2x4dUlDb2dUbTl5YldGc2FYcGxJR0VnZEhKaGJuTnBkR2x2YmlCb2IyOXJKM01nWVhKbmRXMWxiblFnYkdWdVozUm9MaUJVYUdVZ2FHOXZheUJ0WVhrZ1ltVTZYRzRnS2lBdElHRWdiV1Z5WjJWa0lHaHZiMnNnS0dsdWRtOXJaWElwSUhkcGRHZ2dkR2hsSUc5eWFXZHBibUZzSUdsdUlDNW1ibk5jYmlBcUlDMGdZU0IzY21Gd2NHVmtJR052YlhCdmJtVnVkQ0J0WlhSb2IyUWdLR05vWldOcklDNWZiR1Z1WjNSb0tWeHVJQ29nTFNCaElIQnNZV2x1SUdaMWJtTjBhVzl1SUNndWJHVnVaM1JvS1Z4dUlDb3ZYRzVtZFc1amRHbHZiaUJuWlhSSWIyOXJRWEpuZFcxbGJuUnpUR1Z1WjNSb0lDaG1iaWtnZTF4dUlDQnBaaUFvYVhOVmJtUmxaaWhtYmlrcElIdGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVmNiaUFnZlZ4dUlDQjJZWElnYVc1MmIydGxja1p1Y3lBOUlHWnVMbVp1Y3p0Y2JpQWdhV1lnS0dselJHVm1LR2x1ZG05clpYSkdibk1wS1NCN1hHNGdJQ0FnTHk4Z2FXNTJiMnRsY2x4dUlDQWdJSEpsZEhWeWJpQm5aWFJJYjI5clFYSm5kVzFsYm5SelRHVnVaM1JvS0Z4dUlDQWdJQ0FnUVhKeVlYa3VhWE5CY25KaGVTaHBiblp2YTJWeVJtNXpLVnh1SUNBZ0lDQWdJQ0EvSUdsdWRtOXJaWEpHYm5OYk1GMWNiaUFnSUNBZ0lDQWdPaUJwYm5admEyVnlSbTV6WEc0Z0lDQWdLVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQW9abTR1WDJ4bGJtZDBhQ0I4ZkNCbWJpNXNaVzVuZEdncElENGdNVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5bGJuUmxjaUFvWHl3Z2RtNXZaR1VwSUh0Y2JpQWdhV1lnS0hadWIyUmxMbVJoZEdFdWMyaHZkeUFoUFQwZ2RISjFaU2tnZTF4dUlDQWdJR1Z1ZEdWeUtIWnViMlJsS1R0Y2JpQWdmVnh1ZlZ4dVhHNTJZWElnZEhKaGJuTnBkR2x2YmlBOUlHbHVRbkp2ZDNObGNpQS9JSHRjYmlBZ1kzSmxZWFJsT2lCZlpXNTBaWElzWEc0Z0lHRmpkR2wyWVhSbE9pQmZaVzUwWlhJc1hHNGdJSEpsYlc5MlpUb2dablZ1WTNScGIyNGdjbVZ0YjNabEpDUXhJQ2gyYm05a1pTd2djbTBwSUh0Y2JpQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnWld4elpTQXFMMXh1SUNBZ0lHbG1JQ2gyYm05a1pTNWtZWFJoTG5Ob2IzY2dJVDA5SUhSeWRXVXBJSHRjYmlBZ0lDQWdJR3hsWVhabEtIWnViMlJsTENCeWJTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKdEtDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OUlEb2dlMzA3WEc1Y2JuWmhjaUJ3YkdGMFptOXliVTF2WkhWc1pYTWdQU0JiWEc0Z0lHRjBkSEp6TEZ4dUlDQnJiR0Z6Y3l4Y2JpQWdaWFpsYm5SekxGeHVJQ0JrYjIxUWNtOXdjeXhjYmlBZ2MzUjViR1VzWEc0Z0lIUnlZVzV6YVhScGIyNWNibDA3WEc1Y2JpOHFJQ0FxTDF4dVhHNHZMeUIwYUdVZ1pHbHlaV04wYVhabElHMXZaSFZzWlNCemFHOTFiR1FnWW1VZ1lYQndiR2xsWkNCc1lYTjBMQ0JoWm5SbGNpQmhiR3hjYmk4dklHSjFhV3gwTFdsdUlHMXZaSFZzWlhNZ2FHRjJaU0JpWldWdUlHRndjR3hwWldRdVhHNTJZWElnYlc5a2RXeGxjeUE5SUhCc1lYUm1iM0p0VFc5a2RXeGxjeTVqYjI1allYUW9ZbUZ6WlUxdlpIVnNaWE1wTzF4dVhHNTJZWElnY0dGMFkyZ2dQU0JqY21WaGRHVlFZWFJqYUVaMWJtTjBhVzl1S0hzZ2JtOWtaVTl3Y3pvZ2JtOWtaVTl3Y3l3Z2JXOWtkV3hsY3pvZ2JXOWtkV3hsY3lCOUtUdGNibHh1THlvcVhHNGdLaUJPYjNRZ2RIbHdaU0JqYUdWamEybHVaeUIwYUdseklHWnBiR1VnWW1WallYVnpaU0JtYkc5M0lHUnZaWE51SjNRZ2JHbHJaU0JoZEhSaFkyaHBibWRjYmlBcUlIQnliM0JsY25ScFpYTWdkRzhnUld4bGJXVnVkSE11WEc0Z0tpOWNibHh1THlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzVwWmlBb2FYTkpSVGtwSUh0Y2JpQWdMeThnYUhSMGNEb3ZMM2QzZHk1dFlYUjBjelF4TVM1amIyMHZjRzl6ZEM5cGJuUmxjbTVsZEMxbGVIQnNiM0psY2kwNUxXOXVhVzV3ZFhRdlhHNGdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM05sYkdWamRHbHZibU5vWVc1blpTY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ1pXd2dQU0JrYjJOMWJXVnVkQzVoWTNScGRtVkZiR1Z0Wlc1ME8xeHVJQ0FnSUdsbUlDaGxiQ0FtSmlCbGJDNTJiVzlrWld3cElIdGNiaUFnSUNBZ0lIUnlhV2RuWlhJb1pXd3NJQ2RwYm5CMWRDY3BPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNTlYRzVjYm5aaGNpQmthWEpsWTNScGRtVWdQU0I3WEc0Z0lHbHVjMlZ5ZEdWa09pQm1kVzVqZEdsdmJpQnBibk5sY25SbFpDQW9aV3dzSUdKcGJtUnBibWNzSUhadWIyUmxMQ0J2YkdSV2JtOWtaU2tnZTF4dUlDQWdJR2xtSUNoMmJtOWtaUzUwWVdjZ1BUMDlJQ2R6Wld4bFkzUW5LU0I3WEc0Z0lDQWdJQ0F2THlBak5qa3dNMXh1SUNBZ0lDQWdhV1lnS0c5c1pGWnViMlJsTG1Wc2JTQW1KaUFoYjJ4a1ZtNXZaR1V1Wld4dExsOTJUM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0J0WlhKblpWWk9iMlJsU0c5dmF5aDJibTlrWlN3Z0ozQnZjM1J3WVhSamFDY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmthWEpsWTNScGRtVXVZMjl0Y0c5dVpXNTBWWEJrWVhSbFpDaGxiQ3dnWW1sdVpHbHVaeXdnZG01dlpHVXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhObGRGTmxiR1ZqZEdWa0tHVnNMQ0JpYVc1a2FXNW5MQ0IyYm05a1pTNWpiMjUwWlhoMEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHVnNMbDkyVDNCMGFXOXVjeUE5SUZ0ZExtMWhjQzVqWVd4c0tHVnNMbTl3ZEdsdmJuTXNJR2RsZEZaaGJIVmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFp1YjJSbExuUmhaeUE5UFQwZ0ozUmxlSFJoY21WaEp5QjhmQ0JwYzFSbGVIUkpibkIxZEZSNWNHVW9aV3d1ZEhsd1pTa3BJSHRjYmlBZ0lDQWdJR1ZzTGw5MlRXOWthV1pwWlhKeklEMGdZbWx1WkdsdVp5NXRiMlJwWm1sbGNuTTdYRzRnSUNBZ0lDQnBaaUFvSVdKcGJtUnBibWN1Ylc5a2FXWnBaWEp6TG14aGVua3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1UyRm1ZWEpwSUR3Z01UQXVNaUFtSUZWSlYyVmlWbWxsZHlCa2IyVnpiaWQwSUdacGNtVWdZMjl0Y0c5emFYUnBiMjVsYm1RZ2QyaGxibHh1SUNBZ0lDQWdJQ0F2THlCemQybDBZMmhwYm1jZ1ptOWpkWE1nWW1WbWIzSmxJR052Ym1acGNtMXBibWNnWTI5dGNHOXphWFJwYjI0Z1kyaHZhV05sWEc0Z0lDQWdJQ0FnSUM4dklIUm9hWE1nWVd4emJ5Qm1hWGhsY3lCMGFHVWdhWE56ZFdVZ2QyaGxjbVVnYzI5dFpTQmljbTkzYzJWeWN5QmxMbWN1SUdsUFV5QkRhSEp2YldWY2JpQWdJQ0FnSUNBZ0x5OGdabWx5WlhNZ1hDSmphR0Z1WjJWY0lpQnBibk4wWldGa0lHOW1JRndpYVc1d2RYUmNJaUJ2YmlCaGRYUnZZMjl0Y0d4bGRHVXVYRzRnSUNBZ0lDQWdJR1ZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOb1lXNW5aU2NzSUc5dVEyOXRjRzl6YVhScGIyNUZibVFwTzF4dUlDQWdJQ0FnSUNCcFppQW9JV2x6UVc1a2NtOXBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHVnNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk52YlhCdmMybDBhVzl1YzNSaGNuUW5MQ0J2YmtOdmJYQnZjMmwwYVc5dVUzUmhjblFwTzF4dUlDQWdJQ0FnSUNBZ0lHVnNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk52YlhCdmMybDBhVzl1Wlc1a0p5d2diMjVEYjIxd2IzTnBkR2x2YmtWdVpDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUNBZ0lDQWdJR2xtSUNocGMwbEZPU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHVnNMblp0YjJSbGJDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdZMjl0Y0c5dVpXNTBWWEJrWVhSbFpEb2dablZ1WTNScGIyNGdZMjl0Y0c5dVpXNTBWWEJrWVhSbFpDQW9aV3dzSUdKcGJtUnBibWNzSUhadWIyUmxLU0I3WEc0Z0lDQWdhV1lnS0hadWIyUmxMblJoWnlBOVBUMGdKM05sYkdWamRDY3BJSHRjYmlBZ0lDQWdJSE5sZEZObGJHVmpkR1ZrS0dWc0xDQmlhVzVrYVc1bkxDQjJibTlrWlM1amIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUM4dklHbHVJR05oYzJVZ2RHaGxJRzl3ZEdsdmJuTWdjbVZ1WkdWeVpXUWdZbmtnZGkxbWIzSWdhR0YyWlNCamFHRnVaMlZrTEZ4dUlDQWdJQ0FnTHk4Z2FYUW5jeUJ3YjNOemFXSnNaU0IwYUdGMElIUm9aU0IyWVd4MVpTQnBjeUJ2ZFhRdGIyWXRjM2x1WXlCM2FYUm9JSFJvWlNCeVpXNWtaWEpsWkNCdmNIUnBiMjV6TGx4dUlDQWdJQ0FnTHk4Z1pHVjBaV04wSUhOMVkyZ2dZMkZ6WlhNZ1lXNWtJR1pwYkhSbGNpQnZkWFFnZG1Gc2RXVnpJSFJvWVhRZ2JtOGdiRzl1WjJWeUlHaGhjeUJoSUcxaGRHTm9hVzVuWEc0Z0lDQWdJQ0F2THlCdmNIUnBiMjRnYVc0Z2RHaGxJRVJQVFM1Y2JpQWdJQ0FnSUhaaGNpQndjbVYyVDNCMGFXOXVjeUE5SUdWc0xsOTJUM0IwYVc5dWN6dGNiaUFnSUNBZ0lIWmhjaUJqZFhKUGNIUnBiMjV6SUQwZ1pXd3VYM1pQY0hScGIyNXpJRDBnVzEwdWJXRndMbU5oYkd3b1pXd3ViM0IwYVc5dWN5d2daMlYwVm1Gc2RXVXBPMXh1SUNBZ0lDQWdhV1lnS0dOMWNrOXdkR2x2Ym5NdWMyOXRaU2htZFc1amRHbHZiaUFvYnl3Z2FTa2dleUJ5WlhSMWNtNGdJV3h2YjNObFJYRjFZV3dvYnl3Z2NISmxkazl3ZEdsdmJuTmJhVjBwT3lCOUtTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCMGNtbG5aMlZ5SUdOb1lXNW5aU0JsZG1WdWRDQnBabHh1SUNBZ0lDQWdJQ0F2THlCdWJ5QnRZWFJqYUdsdVp5QnZjSFJwYjI0Z1ptOTFibVFnWm05eUlHRjBJR3hsWVhOMElHOXVaU0IyWVd4MVpWeHVJQ0FnSUNBZ0lDQjJZWElnYm1WbFpGSmxjMlYwSUQwZ1pXd3ViWFZzZEdsd2JHVmNiaUFnSUNBZ0lDQWdJQ0EvSUdKcGJtUnBibWN1ZG1Gc2RXVXVjMjl0WlNobWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdhR0Z6VG05TllYUmphR2x1WjA5d2RHbHZiaWgyTENCamRYSlBjSFJwYjI1ektUc2dmU2xjYmlBZ0lDQWdJQ0FnSUNBNklHSnBibVJwYm1jdWRtRnNkV1VnSVQwOUlHSnBibVJwYm1jdWIyeGtWbUZzZFdVZ0ppWWdhR0Z6VG05TllYUmphR2x1WjA5d2RHbHZiaWhpYVc1a2FXNW5MblpoYkhWbExDQmpkWEpQY0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHNWxaV1JTWlhObGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSeWFXZG5aWElvWld3c0lDZGphR0Z1WjJVbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dWZUdGNibHh1Wm5WdVkzUnBiMjRnYzJWMFUyVnNaV04wWldRZ0tHVnNMQ0JpYVc1a2FXNW5MQ0IyYlNrZ2UxeHVJQ0JoWTNSMVlXeHNlVk5sZEZObGJHVmpkR1ZrS0dWc0xDQmlhVzVrYVc1bkxDQjJiU2s3WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQnBaaUFvYVhOSlJTQjhmQ0JwYzBWa1oyVXBJSHRjYmlBZ0lDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUdGamRIVmhiR3g1VTJWMFUyVnNaV04wWldRb1pXd3NJR0pwYm1ScGJtY3NJSFp0S1R0Y2JpQWdJQ0I5TENBd0tUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJoWTNSMVlXeHNlVk5sZEZObGJHVmpkR1ZrSUNobGJDd2dZbWx1WkdsdVp5d2dkbTBwSUh0Y2JpQWdkbUZ5SUhaaGJIVmxJRDBnWW1sdVpHbHVaeTUyWVd4MVpUdGNiaUFnZG1GeUlHbHpUWFZzZEdsd2JHVWdQU0JsYkM1dGRXeDBhWEJzWlR0Y2JpQWdhV1lnS0dselRYVnNkR2x3YkdVZ0ppWWdJVUZ5Y21GNUxtbHpRWEp5WVhrb2RtRnNkV1VwS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUppQjNZWEp1S0Z4dUlDQWdJQ0FnWENJOGMyVnNaV04wSUcxMWJIUnBjR3hsSUhZdGJXOWtaV3c5WEZ4Y0lsd2lJQ3NnS0dKcGJtUnBibWN1Wlhod2NtVnpjMmx2YmlrZ0t5QmNJbHhjWENJK0lGd2lJQ3RjYmlBZ0lDQWdJRndpWlhod1pXTjBjeUJoYmlCQmNuSmhlU0IyWVd4MVpTQm1iM0lnYVhSeklHSnBibVJwYm1jc0lHSjFkQ0JuYjNRZ1hDSWdLeUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tIWmhiSFZsS1M1emJHbGpaU2c0TENBdE1Ta3BMRnh1SUNBZ0lDQWdkbTFjYmlBZ0lDQXBPMXh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzRnSUhaaGNpQnpaV3hsWTNSbFpDd2diM0IwYVc5dU8xeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diQ0E5SUdWc0xtOXdkR2x2Ym5NdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ2IzQjBhVzl1SUQwZ1pXd3ViM0IwYVc5dWMxdHBYVHRjYmlBZ0lDQnBaaUFvYVhOTmRXeDBhWEJzWlNrZ2UxeHVJQ0FnSUNBZ2MyVnNaV04wWldRZ1BTQnNiMjl6WlVsdVpHVjRUMllvZG1Gc2RXVXNJR2RsZEZaaGJIVmxLRzl3ZEdsdmJpa3BJRDRnTFRFN1hHNGdJQ0FnSUNCcFppQW9iM0IwYVc5dUxuTmxiR1ZqZEdWa0lDRTlQU0J6Wld4bFkzUmxaQ2tnZTF4dUlDQWdJQ0FnSUNCdmNIUnBiMjR1YzJWc1pXTjBaV1FnUFNCelpXeGxZM1JsWkR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdhV1lnS0d4dmIzTmxSWEYxWVd3b1oyVjBWbUZzZFdVb2IzQjBhVzl1S1N3Z2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hsYkM1elpXeGxZM1JsWkVsdVpHVjRJQ0U5UFNCcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWld3dWMyVnNaV04wWldSSmJtUmxlQ0E5SUdrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdsbUlDZ2hhWE5OZFd4MGFYQnNaU2tnZTF4dUlDQWdJR1ZzTG5ObGJHVmpkR1ZrU1c1a1pYZ2dQU0F0TVR0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm9ZWE5PYjAxaGRHTm9hVzVuVDNCMGFXOXVJQ2gyWVd4MVpTd2diM0IwYVc5dWN5a2dlMXh1SUNCeVpYUjFjbTRnYjNCMGFXOXVjeTVsZG1WeWVTaG1kVzVqZEdsdmJpQW9ieWtnZXlCeVpYUjFjbTRnSVd4dmIzTmxSWEYxWVd3b2J5d2dkbUZzZFdVcE95QjlLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJXWVd4MVpTQW9iM0IwYVc5dUtTQjdYRzRnSUhKbGRIVnliaUFuWDNaaGJIVmxKeUJwYmlCdmNIUnBiMjVjYmlBZ0lDQS9JRzl3ZEdsdmJpNWZkbUZzZFdWY2JpQWdJQ0E2SUc5d2RHbHZiaTUyWVd4MVpWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdmJrTnZiWEJ2YzJsMGFXOXVVM1JoY25RZ0tHVXBJSHRjYmlBZ1pTNTBZWEpuWlhRdVkyOXRjRzl6YVc1bklEMGdkSEoxWlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYjI1RGIyMXdiM05wZEdsdmJrVnVaQ0FvWlNrZ2UxeHVJQ0F2THlCd2NtVjJaVzUwSUhSeWFXZG5aWEpwYm1jZ1lXNGdhVzV3ZFhRZ1pYWmxiblFnWm05eUlHNXZJSEpsWVhOdmJseHVJQ0JwWmlBb0lXVXVkR0Z5WjJWMExtTnZiWEJ2YzJsdVp5a2dleUJ5WlhSMWNtNGdmVnh1SUNCbExuUmhjbWRsZEM1amIyMXdiM05wYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdkSEpwWjJkbGNpaGxMblJoY21kbGRDd2dKMmx1Y0hWMEp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIUnlhV2RuWlhJZ0tHVnNMQ0IwZVhCbEtTQjdYRzRnSUhaaGNpQmxJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSWFpsYm5Rb0owaFVUVXhGZG1WdWRITW5LVHRjYmlBZ1pTNXBibWwwUlhabGJuUW9kSGx3WlN3Z2RISjFaU3dnZEhKMVpTazdYRzRnSUdWc0xtUnBjM0JoZEdOb1JYWmxiblFvWlNrN1hHNTlYRzVjYmk4cUlDQXFMMXh1WEc0dkx5QnlaV04xY25OcGRtVnNlU0J6WldGeVkyZ2dabTl5SUhCdmMzTnBZbXhsSUhSeVlXNXphWFJwYjI0Z1pHVm1hVzVsWkNCcGJuTnBaR1VnZEdobElHTnZiWEJ2Ym1WdWRDQnliMjkwWEc1bWRXNWpkR2x2YmlCc2IyTmhkR1ZPYjJSbElDaDJibTlrWlNrZ2UxeHVJQ0J5WlhSMWNtNGdkbTV2WkdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVZ0ppWWdLQ0YyYm05a1pTNWtZWFJoSUh4OElDRjJibTlrWlM1a1lYUmhMblJ5WVc1emFYUnBiMjRwWEc0Z0lDQWdQeUJzYjJOaGRHVk9iMlJsS0hadWIyUmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxMbDkyYm05a1pTbGNiaUFnSUNBNklIWnViMlJsWEc1OVhHNWNiblpoY2lCemFHOTNJRDBnZTF4dUlDQmlhVzVrT2lCbWRXNWpkR2x2YmlCaWFXNWtJQ2hsYkN3Z2NtVm1MQ0IyYm05a1pTa2dlMXh1SUNBZ0lIWmhjaUIyWVd4MVpTQTlJSEpsWmk1MllXeDFaVHRjYmx4dUlDQWdJSFp1YjJSbElEMGdiRzlqWVhSbFRtOWtaU2gyYm05a1pTazdYRzRnSUNBZ2RtRnlJSFJ5WVc1emFYUnBiMjRrSkRFZ1BTQjJibTlrWlM1a1lYUmhJQ1ltSUhadWIyUmxMbVJoZEdFdWRISmhibk5wZEdsdmJqdGNiaUFnSUNCMllYSWdiM0pwWjJsdVlXeEVhWE53YkdGNUlEMGdaV3d1WDE5MlQzSnBaMmx1WVd4RWFYTndiR0Y1SUQxY2JpQWdJQ0FnSUdWc0xuTjBlV3hsTG1ScGMzQnNZWGtnUFQwOUlDZHViMjVsSnlBL0lDY25JRG9nWld3dWMzUjViR1V1WkdsemNHeGhlVHRjYmlBZ0lDQnBaaUFvZG1Gc2RXVWdKaVlnZEhKaGJuTnBkR2x2YmlRa01Ta2dlMXh1SUNBZ0lDQWdkbTV2WkdVdVpHRjBZUzV6YUc5M0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdWdWRHVnlLSFp1YjJSbExDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdWc0xuTjBlV3hsTG1ScGMzQnNZWGtnUFNCdmNtbG5hVzVoYkVScGMzQnNZWGs3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdaV3d1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJSFpoYkhWbElEOGdiM0pwWjJsdVlXeEVhWE53YkdGNUlEb2dKMjV2Ym1Vbk8xeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQjFjR1JoZEdVNklHWjFibU4wYVc5dUlIVndaR0YwWlNBb1pXd3NJSEpsWml3Z2RtNXZaR1VwSUh0Y2JpQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCeVpXWXVkbUZzZFdVN1hHNGdJQ0FnZG1GeUlHOXNaRlpoYkhWbElEMGdjbVZtTG05c1pGWmhiSFZsTzF4dVhHNGdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUNBZ2FXWWdLSFpoYkhWbElEMDlQU0J2YkdSV1lXeDFaU2tnZXlCeVpYUjFjbTRnZlZ4dUlDQWdJSFp1YjJSbElEMGdiRzlqWVhSbFRtOWtaU2gyYm05a1pTazdYRzRnSUNBZ2RtRnlJSFJ5WVc1emFYUnBiMjRrSkRFZ1BTQjJibTlrWlM1a1lYUmhJQ1ltSUhadWIyUmxMbVJoZEdFdWRISmhibk5wZEdsdmJqdGNiaUFnSUNCcFppQW9kSEpoYm5OcGRHbHZiaVFrTVNrZ2UxeHVJQ0FnSUNBZ2RtNXZaR1V1WkdGMFlTNXphRzkzSUQwZ2RISjFaVHRjYmlBZ0lDQWdJR2xtSUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCbGJuUmxjaWgyYm05a1pTd2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHVnNMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQmxiQzVmWDNaUGNtbG5hVzVoYkVScGMzQnNZWGs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2JHVmhkbVVvZG01dlpHVXNJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmxiQzV6ZEhsc1pTNWthWE53YkdGNUlEMGdKMjV2Ym1Vbk8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1pXd3VjM1I1YkdVdVpHbHpjR3hoZVNBOUlIWmhiSFZsSUQ4Z1pXd3VYMTkyVDNKcFoybHVZV3hFYVhOd2JHRjVJRG9nSjI1dmJtVW5PMXh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0IxYm1KcGJtUTZJR1oxYm1OMGFXOXVJSFZ1WW1sdVpDQW9YRzRnSUNBZ1pXd3NYRzRnSUNBZ1ltbHVaR2x1Wnl4Y2JpQWdJQ0IyYm05a1pTeGNiaUFnSUNCdmJHUldibTlrWlN4Y2JpQWdJQ0JwYzBSbGMzUnliM2xjYmlBZ0tTQjdYRzRnSUNBZ2FXWWdLQ0ZwYzBSbGMzUnliM2twSUh0Y2JpQWdJQ0FnSUdWc0xuTjBlV3hsTG1ScGMzQnNZWGtnUFNCbGJDNWZYM1pQY21sbmFXNWhiRVJwYzNCc1lYazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzUyWVhJZ2NHeGhkR1p2Y20xRWFYSmxZM1JwZG1WeklEMGdlMXh1SUNCdGIyUmxiRG9nWkdseVpXTjBhWFpsTEZ4dUlDQnphRzkzT2lCemFHOTNYRzU5TzF4dVhHNHZLaUFnS2k5Y2JseHVMeThnVUhKdmRtbGtaWE1nZEhKaGJuTnBkR2x2YmlCemRYQndiM0owSUdadmNpQmhJSE5wYm1kc1pTQmxiR1Z0Wlc1MEwyTnZiWEJ2Ym1WdWRDNWNiaTh2SUhOMWNIQnZjblJ6SUhSeVlXNXphWFJwYjI0Z2JXOWtaU0FvYjNWMExXbHVJQzhnYVc0dGIzVjBLVnh1WEc1MllYSWdkSEpoYm5OcGRHbHZibEJ5YjNCeklEMGdlMXh1SUNCdVlXMWxPaUJUZEhKcGJtY3NYRzRnSUdGd2NHVmhjam9nUW05dmJHVmhiaXhjYmlBZ1kzTnpPaUJDYjI5c1pXRnVMRnh1SUNCdGIyUmxPaUJUZEhKcGJtY3NYRzRnSUhSNWNHVTZJRk4wY21sdVp5eGNiaUFnWlc1MFpYSkRiR0Z6Y3pvZ1UzUnlhVzVuTEZ4dUlDQnNaV0YyWlVOc1lYTnpPaUJUZEhKcGJtY3NYRzRnSUdWdWRHVnlWRzlEYkdGemN6b2dVM1J5YVc1bkxGeHVJQ0JzWldGMlpWUnZRMnhoYzNNNklGTjBjbWx1Wnl4Y2JpQWdaVzUwWlhKQlkzUnBkbVZEYkdGemN6b2dVM1J5YVc1bkxGeHVJQ0JzWldGMlpVRmpkR2wyWlVOc1lYTnpPaUJUZEhKcGJtY3NYRzRnSUdGd2NHVmhja05zWVhOek9pQlRkSEpwYm1jc1hHNGdJR0Z3Y0dWaGNrRmpkR2wyWlVOc1lYTnpPaUJUZEhKcGJtY3NYRzRnSUdGd2NHVmhjbFJ2UTJ4aGMzTTZJRk4wY21sdVp5eGNiaUFnWkhWeVlYUnBiMjQ2SUZ0T2RXMWlaWElzSUZOMGNtbHVaeXdnVDJKcVpXTjBYVnh1ZlR0Y2JseHVMeThnYVc0Z1kyRnpaU0IwYUdVZ1kyaHBiR1FnYVhNZ1lXeHpieUJoYmlCaFluTjBjbUZqZENCamIyMXdiMjVsYm5Rc0lHVXVaeTRnUEd0bFpYQXRZV3hwZG1VK1hHNHZMeUIzWlNCM1lXNTBJSFJ2SUhKbFkzVnljMmwyWld4NUlISmxkSEpwWlhabElIUm9aU0J5WldGc0lHTnZiWEJ2Ym1WdWRDQjBieUJpWlNCeVpXNWtaWEpsWkZ4dVpuVnVZM1JwYjI0Z1oyVjBVbVZoYkVOb2FXeGtJQ2gyYm05a1pTa2dlMXh1SUNCMllYSWdZMjl0Y0U5d2RHbHZibk1nUFNCMmJtOWtaU0FtSmlCMmJtOWtaUzVqYjIxd2IyNWxiblJQY0hScGIyNXpPMXh1SUNCcFppQW9ZMjl0Y0U5d2RHbHZibk1nSmlZZ1kyOXRjRTl3ZEdsdmJuTXVRM1J2Y2k1dmNIUnBiMjV6TG1GaWMzUnlZV04wS1NCN1hHNGdJQ0FnY21WMGRYSnVJR2RsZEZKbFlXeERhR2xzWkNoblpYUkdhWEp6ZEVOdmJYQnZibVZ1ZEVOb2FXeGtLR052YlhCUGNIUnBiMjV6TG1Ob2FXeGtjbVZ1S1NsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnZG01dlpHVmNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJsZUhSeVlXTjBWSEpoYm5OcGRHbHZia1JoZEdFZ0tHTnZiWEFwSUh0Y2JpQWdkbUZ5SUdSaGRHRWdQU0I3ZlR0Y2JpQWdkbUZ5SUc5d2RHbHZibk1nUFNCamIyMXdMaVJ2Y0hScGIyNXpPMXh1SUNBdkx5QndjbTl3YzF4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2IzQjBhVzl1Y3k1d2NtOXdjMFJoZEdFcElIdGNiaUFnSUNCa1lYUmhXMnRsZVYwZ1BTQmpiMjF3VzJ0bGVWMDdYRzRnSUgxY2JpQWdMeThnWlhabGJuUnpMbHh1SUNBdkx5QmxlSFJ5WVdOMElHeHBjM1JsYm1WeWN5QmhibVFnY0dGemN5QjBhR1Z0SUdScGNtVmpkR3g1SUhSdklIUm9aU0IwY21GdWMybDBhVzl1SUcxbGRHaHZaSE5jYmlBZ2RtRnlJR3hwYzNSbGJtVnljeUE5SUc5d2RHbHZibk11WDNCaGNtVnVkRXhwYzNSbGJtVnljenRjYmlBZ1ptOXlJQ2gyWVhJZ2EyVjVKREVnYVc0Z2JHbHpkR1Z1WlhKektTQjdYRzRnSUNBZ1pHRjBZVnRqWVcxbGJHbDZaU2hyWlhra01TbGRJRDBnYkdsemRHVnVaWEp6VzJ0bGVTUXhYVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdaR0YwWVZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ3YkdGalpXaHZiR1JsY2lBb2FDd2djbUYzUTJocGJHUXBJSHRjYmlBZ2FXWWdLQzljWEdRdGEyVmxjQzFoYkdsMlpTUXZMblJsYzNRb2NtRjNRMmhwYkdRdWRHRm5LU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm9LQ2RyWldWd0xXRnNhWFpsSnl3Z2UxeHVJQ0FnSUNBZ2NISnZjSE02SUhKaGQwTm9hV3hrTG1OdmJYQnZibVZ1ZEU5d2RHbHZibk11Y0hKdmNITkVZWFJoWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCb1lYTlFZWEpsYm5SVWNtRnVjMmwwYVc5dUlDaDJibTlrWlNrZ2UxeHVJQ0IzYUdsc1pTQW9LSFp1YjJSbElEMGdkbTV2WkdVdWNHRnlaVzUwS1NrZ2UxeHVJQ0FnSUdsbUlDaDJibTlrWlM1a1lYUmhMblJ5WVc1emFYUnBiMjRwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbFhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpVMkZ0WlVOb2FXeGtJQ2hqYUdsc1pDd2diMnhrUTJocGJHUXBJSHRjYmlBZ2NtVjBkWEp1SUc5c1pFTm9hV3hrTG10bGVTQTlQVDBnWTJocGJHUXVhMlY1SUNZbUlHOXNaRU5vYVd4a0xuUmhaeUE5UFQwZ1kyaHBiR1F1ZEdGblhHNTlYRzVjYm5aaGNpQlVjbUZ1YzJsMGFXOXVJRDBnZTF4dUlDQnVZVzFsT2lBbmRISmhibk5wZEdsdmJpY3NYRzRnSUhCeWIzQnpPaUIwY21GdWMybDBhVzl1VUhKdmNITXNYRzRnSUdGaWMzUnlZV04wT2lCMGNuVmxMRnh1WEc0Z0lISmxibVJsY2pvZ1puVnVZM1JwYjI0Z2NtVnVaR1Z5SUNob0tTQjdYRzRnSUNBZ2RtRnlJSFJvYVhNa01TQTlJSFJvYVhNN1hHNWNiaUFnSUNCMllYSWdZMmhwYkdSeVpXNGdQU0IwYUdsekxpUnpiRzkwY3k1a1pXWmhkV3gwTzF4dUlDQWdJR2xtSUNnaFkyaHBiR1J5Wlc0cElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdacGJIUmxjaUJ2ZFhRZ2RHVjRkQ0J1YjJSbGN5QW9jRzl6YzJsaWJHVWdkMmhwZEdWemNHRmpaWE1wWEc0Z0lDQWdZMmhwYkdSeVpXNGdQU0JqYUdsc1pISmxiaTVtYVd4MFpYSW9ablZ1WTNScGIyNGdLR01wSUhzZ2NtVjBkWEp1SUdNdWRHRm5JSHg4SUdselFYTjVibU5RYkdGalpXaHZiR1JsY2loaktUc2dmU2s3WEc0Z0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJQ0FnYVdZZ0tDRmphR2xzWkhKbGJpNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUhkaGNtNGdiWFZzZEdsd2JHVWdaV3hsYldWdWRITmNiaUFnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUFtSmlCamFHbHNaSEpsYmk1c1pXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBblBIUnlZVzV6YVhScGIyNCtJR05oYmlCdmJteDVJR0psSUhWelpXUWdiMjRnWVNCemFXNW5iR1VnWld4bGJXVnVkQzRnVlhObElDY2dLMXh1SUNBZ0lDQWdJQ0FuUEhSeVlXNXphWFJwYjI0dFozSnZkWEErSUdadmNpQnNhWE4wY3k0bkxGeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSd1lYSmxiblJjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUcxdlpHVWdQU0IwYUdsekxtMXZaR1U3WEc1Y2JpQWdJQ0F2THlCM1lYSnVJR2x1ZG1Gc2FXUWdiVzlrWlZ4dUlDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklDWW1YRzRnSUNBZ0lDQnRiMlJsSUNZbUlHMXZaR1VnSVQwOUlDZHBiaTF2ZFhRbklDWW1JRzF2WkdVZ0lUMDlJQ2R2ZFhRdGFXNG5YRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBbmFXNTJZV3hwWkNBOGRISmhibk5wZEdsdmJqNGdiVzlrWlRvZ0p5QXJJRzF2WkdVc1hHNGdJQ0FnSUNBZ0lIUm9hWE11SkhCaGNtVnVkRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnY21GM1EyaHBiR1FnUFNCamFHbHNaSEpsYmxzd1hUdGNibHh1SUNBZ0lDOHZJR2xtSUhSb2FYTWdhWE1nWVNCamIyMXdiMjVsYm5RZ2NtOXZkQ0J1YjJSbElHRnVaQ0IwYUdVZ1kyOXRjRzl1Wlc1MEozTmNiaUFnSUNBdkx5QndZWEpsYm5RZ1kyOXVkR0ZwYm1WeUlHNXZaR1VnWVd4emJ5Qm9ZWE1nZEhKaGJuTnBkR2x2Yml3Z2MydHBjQzVjYmlBZ0lDQnBaaUFvYUdGelVHRnlaVzUwVkhKaGJuTnBkR2x2YmloMGFHbHpMaVIyYm05a1pTa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlZWGREYUdsc1pGeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHRndjR3g1SUhSeVlXNXphWFJwYjI0Z1pHRjBZU0IwYnlCamFHbHNaRnh1SUNBZ0lDOHZJSFZ6WlNCblpYUlNaV0ZzUTJocGJHUW9LU0IwYnlCcFoyNXZjbVVnWVdKemRISmhZM1FnWTI5dGNHOXVaVzUwY3lCbExtY3VJR3RsWlhBdFlXeHBkbVZjYmlBZ0lDQjJZWElnWTJocGJHUWdQU0JuWlhSU1pXRnNRMmhwYkdRb2NtRjNRMmhwYkdRcE8xeHVJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNBZ0lHbG1JQ2doWTJocGJHUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlZWGREYUdsc1pGeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBhR2x6TGw5c1pXRjJhVzVuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY0d4aFkyVm9iMnhrWlhJb2FDd2djbUYzUTJocGJHUXBYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdaVzV6ZFhKbElHRWdhMlY1SUhSb1lYUWdhWE1nZFc1cGNYVmxJSFJ2SUhSb1pTQjJibTlrWlNCMGVYQmxJR0Z1WkNCMGJ5QjBhR2x6SUhSeVlXNXphWFJwYjI1Y2JpQWdJQ0F2THlCamIyMXdiMjVsYm5RZ2FXNXpkR0Z1WTJVdUlGUm9hWE1nYTJWNUlIZHBiR3dnWW1VZ2RYTmxaQ0IwYnlCeVpXMXZkbVVnY0dWdVpHbHVaeUJzWldGMmFXNW5JRzV2WkdWelhHNGdJQ0FnTHk4Z1pIVnlhVzVuSUdWdWRHVnlhVzVuTGx4dUlDQWdJSFpoY2lCcFpDQTlJRndpWDE5MGNtRnVjMmwwYVc5dUxWd2lJQ3NnS0hSb2FYTXVYM1ZwWkNrZ0t5QmNJaTFjSWp0Y2JpQWdJQ0JqYUdsc1pDNXJaWGtnUFNCamFHbHNaQzVyWlhrZ1BUMGdiblZzYkZ4dUlDQWdJQ0FnUHlCamFHbHNaQzVwYzBOdmJXMWxiblJjYmlBZ0lDQWdJQ0FnUHlCcFpDQXJJQ2RqYjIxdFpXNTBKMXh1SUNBZ0lDQWdJQ0E2SUdsa0lDc2dZMmhwYkdRdWRHRm5YRzRnSUNBZ0lDQTZJR2x6VUhKcGJXbDBhWFpsS0dOb2FXeGtMbXRsZVNsY2JpQWdJQ0FnSUNBZ1B5QW9VM1J5YVc1bktHTm9hV3hrTG10bGVTa3VhVzVrWlhoUFppaHBaQ2tnUFQwOUlEQWdQeUJqYUdsc1pDNXJaWGtnT2lCcFpDQXJJR05vYVd4a0xtdGxlU2xjYmlBZ0lDQWdJQ0FnT2lCamFHbHNaQzVyWlhrN1hHNWNiaUFnSUNCMllYSWdaR0YwWVNBOUlDaGphR2xzWkM1a1lYUmhJSHg4SUNoamFHbHNaQzVrWVhSaElEMGdlMzBwS1M1MGNtRnVjMmwwYVc5dUlEMGdaWGgwY21GamRGUnlZVzV6YVhScGIyNUVZWFJoS0hSb2FYTXBPMXh1SUNBZ0lIWmhjaUJ2YkdSU1lYZERhR2xzWkNBOUlIUm9hWE11WDNadWIyUmxPMXh1SUNBZ0lIWmhjaUJ2YkdSRGFHbHNaQ0E5SUdkbGRGSmxZV3hEYUdsc1pDaHZiR1JTWVhkRGFHbHNaQ2s3WEc1Y2JpQWdJQ0F2THlCdFlYSnJJSFl0YzJodmQxeHVJQ0FnSUM4dklITnZJSFJvWVhRZ2RHaGxJSFJ5WVc1emFYUnBiMjRnYlc5a2RXeGxJR05oYmlCb1lXNWtJRzkyWlhJZ2RHaGxJR052Ym5SeWIyd2dkRzhnZEdobElHUnBjbVZqZEdsMlpWeHVJQ0FnSUdsbUlDaGphR2xzWkM1a1lYUmhMbVJwY21WamRHbDJaWE1nSmlZZ1kyaHBiR1F1WkdGMFlTNWthWEpsWTNScGRtVnpMbk52YldVb1puVnVZM1JwYjI0Z0tHUXBJSHNnY21WMGRYSnVJR1F1Ym1GdFpTQTlQVDBnSjNOb2IzY25PeUI5S1NrZ2UxeHVJQ0FnSUNBZ1kyaHBiR1F1WkdGMFlTNXphRzkzSUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0J2YkdSRGFHbHNaQ0FtSmx4dUlDQWdJQ0FnYjJ4a1EyaHBiR1F1WkdGMFlTQW1KbHh1SUNBZ0lDQWdJV2x6VTJGdFpVTm9hV3hrS0dOb2FXeGtMQ0J2YkdSRGFHbHNaQ2tnSmlaY2JpQWdJQ0FnSUNGcGMwRnplVzVqVUd4aFkyVm9iMnhrWlhJb2IyeGtRMmhwYkdRcElDWW1YRzRnSUNBZ0lDQXZMeUFqTmpZNE55QmpiMjF3YjI1bGJuUWdjbTl2ZENCcGN5QmhJR052YlcxbGJuUWdibTlrWlZ4dUlDQWdJQ0FnSVNodmJHUkRhR2xzWkM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlNBbUppQnZiR1JEYUdsc1pDNWpiMjF3YjI1bGJuUkpibk4wWVc1alpTNWZkbTV2WkdVdWFYTkRiMjF0Wlc1MEtWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0x5OGdjbVZ3YkdGalpTQnZiR1FnWTJocGJHUWdkSEpoYm5OcGRHbHZiaUJrWVhSaElIZHBkR2dnWm5KbGMyZ2diMjVsWEc0Z0lDQWdJQ0F2THlCcGJYQnZjblJoYm5RZ1ptOXlJR1I1Ym1GdGFXTWdkSEpoYm5OcGRHbHZibk1oWEc0Z0lDQWdJQ0IyWVhJZ2IyeGtSR0YwWVNBOUlHOXNaRU5vYVd4a0xtUmhkR0V1ZEhKaGJuTnBkR2x2YmlBOUlHVjRkR1Z1WkNoN2ZTd2daR0YwWVNrN1hHNGdJQ0FnSUNBdkx5Qm9ZVzVrYkdVZ2RISmhibk5wZEdsdmJpQnRiMlJsWEc0Z0lDQWdJQ0JwWmlBb2JXOWtaU0E5UFQwZ0oyOTFkQzFwYmljcElIdGNiaUFnSUNBZ0lDQWdMeThnY21WMGRYSnVJSEJzWVdObGFHOXNaR1Z5SUc1dlpHVWdZVzVrSUhGMVpYVmxJSFZ3WkdGMFpTQjNhR1Z1SUd4bFlYWmxJR1pwYm1semFHVnpYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeGxZWFpwYm1jZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCdFpYSm5aVlpPYjJSbFNHOXZheWh2YkdSRVlYUmhMQ0FuWVdaMFpYSk1aV0YyWlNjc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpKREV1WDJ4bFlYWnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpKREV1SkdadmNtTmxWWEJrWVhSbEtDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0d4aFkyVm9iMnhrWlhJb2FDd2djbUYzUTJocGJHUXBYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzF2WkdVZ1BUMDlJQ2RwYmkxdmRYUW5LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMEZ6ZVc1alVHeGhZMlZvYjJ4a1pYSW9ZMmhwYkdRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzlzWkZKaGQwTm9hV3hrWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJR1JsYkdGNVpXUk1aV0YyWlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJsY21admNtMU1aV0YyWlNBOUlHWjFibU4wYVc5dUlDZ3BJSHNnWkdWc1lYbGxaRXhsWVhabEtDazdJSDA3WEc0Z0lDQWdJQ0FnSUcxbGNtZGxWazV2WkdWSWIyOXJLR1JoZEdFc0lDZGhablJsY2tWdWRHVnlKeXdnY0dWeVptOXliVXhsWVhabEtUdGNiaUFnSUNBZ0lDQWdiV1Z5WjJWV1RtOWtaVWh2YjJzb1pHRjBZU3dnSjJWdWRHVnlRMkZ1WTJWc2JHVmtKeXdnY0dWeVptOXliVXhsWVhabEtUdGNiaUFnSUNBZ0lDQWdiV1Z5WjJWV1RtOWtaVWh2YjJzb2IyeGtSR0YwWVN3Z0oyUmxiR0Y1VEdWaGRtVW5MQ0JtZFc1amRHbHZiaUFvYkdWaGRtVXBJSHNnWkdWc1lYbGxaRXhsWVhabElEMGdiR1ZoZG1VN0lIMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCeVlYZERhR2xzWkZ4dUlDQjlYRzU5TzF4dVhHNHZLaUFnS2k5Y2JseHVMeThnVUhKdmRtbGtaWE1nZEhKaGJuTnBkR2x2YmlCemRYQndiM0owSUdadmNpQnNhWE4wSUdsMFpXMXpMbHh1THk4Z2MzVndjRzl5ZEhNZ2JXOTJaU0IwY21GdWMybDBhVzl1Y3lCMWMybHVaeUIwYUdVZ1JreEpVQ0IwWldOb2JtbHhkV1V1WEc1Y2JpOHZJRUpsWTJGMWMyVWdkR2hsSUhaa2IyMG5jeUJqYUdsc1pISmxiaUIxY0dSaGRHVWdZV3huYjNKcGRHaHRJR2x6SUZ3aWRXNXpkR0ZpYkdWY0lpQXRJR2t1WlM1Y2JpOHZJR2wwSUdSdlpYTnVKM1FnWjNWaGNtRnVkR1ZsSUhSb1pTQnlaV3hoZEdsMlpTQndiM05wZEdsdmJtbHVaeUJ2WmlCeVpXMXZkbVZrSUdWc1pXMWxiblJ6TEZ4dUx5OGdkMlVnWm05eVkyVWdkSEpoYm5OcGRHbHZiaTFuY205MWNDQjBieUIxY0dSaGRHVWdhWFJ6SUdOb2FXeGtjbVZ1SUdsdWRHOGdkSGR2SUhCaGMzTmxjenBjYmk4dklHbHVJSFJvWlNCbWFYSnpkQ0J3WVhOekxDQjNaU0J5WlcxdmRtVWdZV3hzSUc1dlpHVnpJSFJvWVhRZ2JtVmxaQ0IwYnlCaVpTQnlaVzF2ZG1Wa0xGeHVMeThnZEhKcFoyZGxjbWx1WnlCMGFHVnBjaUJzWldGMmFXNW5JSFJ5WVc1emFYUnBiMjQ3SUdsdUlIUm9aU0J6WldOdmJtUWdjR0Z6Y3l3Z2QyVWdhVzV6WlhKMEwyMXZkbVZjYmk4dklHbHVkRzhnZEdobElHWnBibUZzSUdSbGMybHlaV1FnYzNSaGRHVXVJRlJvYVhNZ2QyRjVJR2x1SUhSb1pTQnpaV052Ym1RZ2NHRnpjeUJ5WlcxdmRtVmtYRzR2THlCdWIyUmxjeUIzYVd4c0lISmxiV0ZwYmlCM2FHVnlaU0IwYUdWNUlITm9iM1ZzWkNCaVpTNWNibHh1ZG1GeUlIQnliM0J6SUQwZ1pYaDBaVzVrS0h0Y2JpQWdkR0ZuT2lCVGRISnBibWNzWEc0Z0lHMXZkbVZEYkdGemN6b2dVM1J5YVc1blhHNTlMQ0IwY21GdWMybDBhVzl1VUhKdmNITXBPMXh1WEc1a1pXeGxkR1VnY0hKdmNITXViVzlrWlR0Y2JseHVkbUZ5SUZSeVlXNXphWFJwYjI1SGNtOTFjQ0E5SUh0Y2JpQWdjSEp2Y0hNNklIQnliM0J6TEZ4dVhHNGdJSEpsYm1SbGNqb2dablZ1WTNScGIyNGdjbVZ1WkdWeUlDaG9LU0I3WEc0Z0lDQWdkbUZ5SUhSaFp5QTlJSFJvYVhNdWRHRm5JSHg4SUhSb2FYTXVKSFp1YjJSbExtUmhkR0V1ZEdGbklIeDhJQ2R6Y0dGdUp6dGNiaUFnSUNCMllYSWdiV0Z3SUQwZ1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tUdGNiaUFnSUNCMllYSWdjSEpsZGtOb2FXeGtjbVZ1SUQwZ2RHaHBjeTV3Y21WMlEyaHBiR1J5Wlc0Z1BTQjBhR2x6TG1Ob2FXeGtjbVZ1TzF4dUlDQWdJSFpoY2lCeVlYZERhR2xzWkhKbGJpQTlJSFJvYVhNdUpITnNiM1J6TG1SbFptRjFiSFFnZkh3Z1cxMDdYRzRnSUNBZ2RtRnlJR05vYVd4a2NtVnVJRDBnZEdocGN5NWphR2xzWkhKbGJpQTlJRnRkTzF4dUlDQWdJSFpoY2lCMGNtRnVjMmwwYVc5dVJHRjBZU0E5SUdWNGRISmhZM1JVY21GdWMybDBhVzl1UkdGMFlTaDBhR2x6S1R0Y2JseHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2NtRjNRMmhwYkdSeVpXNHViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQmpJRDBnY21GM1EyaHBiR1J5Wlc1YmFWMDdYRzRnSUNBZ0lDQnBaaUFvWXk1MFlXY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTXVhMlY1SUNFOUlHNTFiR3dnSmlZZ1UzUnlhVzVuS0dNdWEyVjVLUzVwYm1SbGVFOW1LQ2RmWDNac2FYTjBKeWtnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamFHbHNaSEpsYmk1d2RYTm9LR01wTzF4dUlDQWdJQ0FnSUNBZ0lHMWhjRnRqTG10bGVWMGdQU0JqWEc0Z0lDQWdJQ0FnSUNBZ095aGpMbVJoZEdFZ2ZId2dLR011WkdGMFlTQTlJSHQ5S1NrdWRISmhibk5wZEdsdmJpQTlJSFJ5WVc1emFYUnBiMjVFWVhSaE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYjNCMGN5QTlJR011WTI5dGNHOXVaVzUwVDNCMGFXOXVjenRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdibUZ0WlNBOUlHOXdkSE1nUHlBb2IzQjBjeTVEZEc5eUxtOXdkR2x2Ym5NdWJtRnRaU0I4ZkNCdmNIUnpMblJoWnlCOGZDQW5KeWtnT2lCakxuUmhaenRjYmlBZ0lDQWdJQ0FnSUNCM1lYSnVLQ2hjSWp4MGNtRnVjMmwwYVc5dUxXZHliM1Z3UGlCamFHbHNaSEpsYmlCdGRYTjBJR0psSUd0bGVXVmtPaUE4WENJZ0t5QnVZVzFsSUNzZ1hDSStYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHdjbVYyUTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0FnSUhaaGNpQnJaWEIwSUQwZ1cxMDdYRzRnSUNBZ0lDQjJZWElnY21WdGIzWmxaQ0E5SUZ0ZE8xeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTUXhJRDBnTURzZ2FTUXhJRHdnY0hKbGRrTm9hV3hrY21WdUxteGxibWQwYURzZ2FTUXhLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR01rTVNBOUlIQnlaWFpEYUdsc1pISmxibHRwSkRGZE8xeHVJQ0FnSUNBZ0lDQmpKREV1WkdGMFlTNTBjbUZ1YzJsMGFXOXVJRDBnZEhKaGJuTnBkR2x2YmtSaGRHRTdYRzRnSUNBZ0lDQWdJR01rTVM1a1lYUmhMbkJ2Y3lBOUlHTWtNUzVsYkcwdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHRZWEJiWXlReExtdGxlVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnJaWEIwTG5CMWMyZ29ZeVF4S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaVzF2ZG1Wa0xuQjFjMmdvWXlReEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k1clpYQjBJRDBnYUNoMFlXY3NJRzUxYkd3c0lHdGxjSFFwTzF4dUlDQWdJQ0FnZEdocGN5NXlaVzF2ZG1Wa0lEMGdjbVZ0YjNabFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnYUNoMFlXY3NJRzUxYkd3c0lHTm9hV3hrY21WdUtWeHVJQ0I5TEZ4dVhHNGdJR0psWm05eVpWVndaR0YwWlRvZ1puVnVZM1JwYjI0Z1ltVm1iM0psVlhCa1lYUmxJQ2dwSUh0Y2JpQWdJQ0F2THlCbWIzSmpaU0J5WlcxdmRtbHVaeUJ3WVhOelhHNGdJQ0FnZEdocGN5NWZYM0JoZEdOb1gxOG9YRzRnSUNBZ0lDQjBhR2x6TGw5MmJtOWtaU3hjYmlBZ0lDQWdJSFJvYVhNdWEyVndkQ3hjYmlBZ0lDQWdJR1poYkhObExDQXZMeUJvZVdSeVlYUnBibWRjYmlBZ0lDQWdJSFJ5ZFdVZ0x5OGdjbVZ0YjNabFQyNXNlU0FvSVdsdGNHOXlkR0Z1ZENCaGRtOXBaSE1nZFc1dVpXTmxjM05oY25rZ2JXOTJaWE1wWEc0Z0lDQWdLVHRjYmlBZ0lDQjBhR2x6TGw5MmJtOWtaU0E5SUhSb2FYTXVhMlZ3ZER0Y2JpQWdmU3hjYmx4dUlDQjFjR1JoZEdWa09pQm1kVzVqZEdsdmJpQjFjR1JoZEdWa0lDZ3BJSHRjYmlBZ0lDQjJZWElnWTJocGJHUnlaVzRnUFNCMGFHbHpMbkJ5WlhaRGFHbHNaSEpsYmp0Y2JpQWdJQ0IyWVhJZ2JXOTJaVU5zWVhOeklEMGdkR2hwY3k1dGIzWmxRMnhoYzNNZ2ZId2dLQ2gwYUdsekxtNWhiV1VnZkh3Z0ozWW5LU0FySUNjdGJXOTJaU2NwTzF4dUlDQWdJR2xtSUNnaFkyaHBiR1J5Wlc0dWJHVnVaM1JvSUh4OElDRjBhR2x6TG1oaGMwMXZkbVVvWTJocGJHUnlaVzViTUYwdVpXeHRMQ0J0YjNabFEyeGhjM01wS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUIzWlNCa2FYWnBaR1VnZEdobElIZHZjbXNnYVc1MGJ5QjBhSEpsWlNCc2IyOXdjeUIwYnlCaGRtOXBaQ0J0YVhocGJtY2dSRTlOSUhKbFlXUnpJR0Z1WkNCM2NtbDBaWE5jYmlBZ0lDQXZMeUJwYmlCbFlXTm9JR2wwWlhKaGRHbHZiaUF0SUhkb2FXTm9JR2hsYkhCeklIQnlaWFpsYm5RZ2JHRjViM1YwSUhSb2NtRnphR2x1Wnk1Y2JpQWdJQ0JqYUdsc1pISmxiaTVtYjNKRllXTm9LR05oYkd4UVpXNWthVzVuUTJKektUdGNiaUFnSUNCamFHbHNaSEpsYmk1bWIzSkZZV05vS0hKbFkyOXlaRkJ2YzJsMGFXOXVLVHRjYmlBZ0lDQmphR2xzWkhKbGJpNW1iM0pGWVdOb0tHRndjR3g1VkhKaGJuTnNZWFJwYjI0cE8xeHVYRzRnSUNBZ0x5OGdabTl5WTJVZ2NtVm1iRzkzSUhSdklIQjFkQ0JsZG1WeWVYUm9hVzVuSUdsdUlIQnZjMmwwYVc5dVhHNGdJQ0FnTHk4Z1lYTnphV2R1SUhSdklIUm9hWE1nZEc4Z1lYWnZhV1FnWW1WcGJtY2djbVZ0YjNabFpDQnBiaUIwY21WbExYTm9ZV3RwYm1kY2JpQWdJQ0F2THlBa1pteHZkeTFrYVhOaFlteGxMV3hwYm1WY2JpQWdJQ0IwYUdsekxsOXlaV1pzYjNjZ1BTQmtiMk4xYldWdWRDNWliMlI1TG05bVpuTmxkRWhsYVdkb2REdGNibHh1SUNBZ0lHTm9hV3hrY21WdUxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHTXBJSHRjYmlBZ0lDQWdJR2xtSUNoakxtUmhkR0V1Ylc5MlpXUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVnNJRDBnWXk1bGJHMDdYRzRnSUNBZ0lDQWdJSFpoY2lCeklEMGdaV3d1YzNSNWJHVTdYRzRnSUNBZ0lDQWdJR0ZrWkZSeVlXNXphWFJwYjI1RGJHRnpjeWhsYkN3Z2JXOTJaVU5zWVhOektUdGNiaUFnSUNBZ0lDQWdjeTUwY21GdWMyWnZjbTBnUFNCekxsZGxZbXRwZEZSeVlXNXpabTl5YlNBOUlITXVkSEpoYm5OcGRHbHZia1IxY21GMGFXOXVJRDBnSnljN1hHNGdJQ0FnSUNBZ0lHVnNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9kSEpoYm5OcGRHbHZia1Z1WkVWMlpXNTBMQ0JsYkM1ZmJXOTJaVU5pSUQwZ1puVnVZM1JwYjI0Z1kySWdLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVdVZ2ZId2dMM1J5WVc1elptOXliU1F2TG5SbGMzUW9aUzV3Y205d1pYSjBlVTVoYldVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLSFJ5WVc1emFYUnBiMjVGYm1SRmRtVnVkQ3dnWTJJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWld3dVgyMXZkbVZEWWlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaVzF2ZG1WVWNtRnVjMmwwYVc5dVEyeGhjM01vWld3c0lHMXZkbVZEYkdGemN5azdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlN4Y2JseHVJQ0J0WlhSb2IyUnpPaUI3WEc0Z0lDQWdhR0Z6VFc5MlpUb2dablZ1WTNScGIyNGdhR0Z6VFc5MlpTQW9aV3dzSUcxdmRtVkRiR0Z6Y3lrZ2UxeHVJQ0FnSUNBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHbG1JQ292WEc0Z0lDQWdJQ0JwWmlBb0lXaGhjMVJ5WVc1emFYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5b1lYTk5iM1psS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlvWVhOTmIzWmxYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZMeUJFWlhSbFkzUWdkMmhsZEdobGNpQmhiaUJsYkdWdFpXNTBJSGRwZEdnZ2RHaGxJRzF2ZG1VZ1kyeGhjM01nWVhCd2JHbGxaQ0JvWVhOY2JpQWdJQ0FnSUM4dklFTlRVeUIwY21GdWMybDBhVzl1Y3k0Z1UybHVZMlVnZEdobElHVnNaVzFsYm5RZ2JXRjVJR0psSUdsdWMybGtaU0JoYmlCbGJuUmxjbWx1WjF4dUlDQWdJQ0FnTHk4Z2RISmhibk5wZEdsdmJpQmhkQ0IwYUdseklIWmxjbmtnYlc5dFpXNTBMQ0IzWlNCdFlXdGxJR0VnWTJ4dmJtVWdiMllnYVhRZ1lXNWtJSEpsYlc5MlpWeHVJQ0FnSUNBZ0x5OGdZV3hzSUc5MGFHVnlJSFJ5WVc1emFYUnBiMjRnWTJ4aGMzTmxjeUJoY0hCc2FXVmtJSFJ2SUdWdWMzVnlaU0J2Ym14NUlIUm9aU0J0YjNabElHTnNZWE56WEc0Z0lDQWdJQ0F2THlCcGN5QmhjSEJzYVdWa0xseHVJQ0FnSUNBZ2RtRnlJR05zYjI1bElEMGdaV3d1WTJ4dmJtVk9iMlJsS0NrN1hHNGdJQ0FnSUNCcFppQW9aV3d1WDNSeVlXNXphWFJwYjI1RGJHRnpjMlZ6S1NCN1hHNGdJQ0FnSUNBZ0lHVnNMbDkwY21GdWMybDBhVzl1UTJ4aGMzTmxjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hqYkhNcElIc2djbVZ0YjNabFEyeGhjM01vWTJ4dmJtVXNJR05zY3lrN0lIMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZV1JrUTJ4aGMzTW9ZMnh2Ym1Vc0lHMXZkbVZEYkdGemN5azdYRzRnSUNBZ0lDQmpiRzl1WlM1emRIbHNaUzVrYVhOd2JHRjVJRDBnSjI1dmJtVW5PMXh1SUNBZ0lDQWdkR2hwY3k0a1pXd3VZWEJ3Wlc1a1EyaHBiR1FvWTJ4dmJtVXBPMXh1SUNBZ0lDQWdkbUZ5SUdsdVptOGdQU0JuWlhSVWNtRnVjMmwwYVc5dVNXNW1ieWhqYkc5dVpTazdYRzRnSUNBZ0lDQjBhR2x6TGlSbGJDNXlaVzF2ZG1WRGFHbHNaQ2hqYkc5dVpTazdYRzRnSUNBZ0lDQnlaWFIxY200Z0tIUm9hWE11WDJoaGMwMXZkbVVnUFNCcGJtWnZMbWhoYzFSeVlXNXpabTl5YlNsY2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JtWjFibU4wYVc5dUlHTmhiR3hRWlc1a2FXNW5RMkp6SUNoaktTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9ZeTVsYkcwdVgyMXZkbVZEWWlrZ2UxeHVJQ0FnSUdNdVpXeHRMbDl0YjNabFEySW9LVHRjYmlBZ2ZWeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnYVdZZ0tHTXVaV3h0TGw5bGJuUmxja05pS1NCN1hHNGdJQ0FnWXk1bGJHMHVYMlZ1ZEdWeVEySW9LVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpXTnZjbVJRYjNOcGRHbHZiaUFvWXlrZ2UxeHVJQ0JqTG1SaGRHRXVibVYzVUc5eklEMGdZeTVsYkcwdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR0Z3Y0d4NVZISmhibk5zWVhScGIyNGdLR01wSUh0Y2JpQWdkbUZ5SUc5c1pGQnZjeUE5SUdNdVpHRjBZUzV3YjNNN1hHNGdJSFpoY2lCdVpYZFFiM01nUFNCakxtUmhkR0V1Ym1WM1VHOXpPMXh1SUNCMllYSWdaSGdnUFNCdmJHUlFiM011YkdWbWRDQXRJRzVsZDFCdmN5NXNaV1owTzF4dUlDQjJZWElnWkhrZ1BTQnZiR1JRYjNNdWRHOXdJQzBnYm1WM1VHOXpMblJ2Y0R0Y2JpQWdhV1lnS0dSNElIeDhJR1I1S1NCN1hHNGdJQ0FnWXk1a1lYUmhMbTF2ZG1Wa0lEMGdkSEoxWlR0Y2JpQWdJQ0IyWVhJZ2N5QTlJR011Wld4dExuTjBlV3hsTzF4dUlDQWdJSE11ZEhKaGJuTm1iM0p0SUQwZ2N5NVhaV0pyYVhSVWNtRnVjMlp2Y20wZ1BTQmNJblJ5WVc1emJHRjBaU2hjSWlBcklHUjRJQ3NnWENKd2VDeGNJaUFySUdSNUlDc2dYQ0p3ZUNsY0lqdGNiaUFnSUNCekxuUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJpQTlJQ2N3Y3ljN1hHNGdJSDFjYm4xY2JseHVkbUZ5SUhCc1lYUm1iM0p0UTI5dGNHOXVaVzUwY3lBOUlIdGNiaUFnVkhKaGJuTnBkR2x2YmpvZ1ZISmhibk5wZEdsdmJpeGNiaUFnVkhKaGJuTnBkR2x2YmtkeWIzVndPaUJVY21GdWMybDBhVzl1UjNKdmRYQmNibjA3WEc1Y2JpOHFJQ0FxTDF4dVhHNHZMeUJwYm5OMFlXeHNJSEJzWVhSbWIzSnRJSE53WldOcFptbGpJSFYwYVd4elhHNVdkV1VrTXk1amIyNW1hV2N1YlhWemRGVnpaVkJ5YjNBZ1BTQnRkWE4wVlhObFVISnZjRHRjYmxaMVpTUXpMbU52Ym1acFp5NXBjMUpsYzJWeWRtVmtWR0ZuSUQwZ2FYTlNaWE5sY25abFpGUmhaenRjYmxaMVpTUXpMbU52Ym1acFp5NXBjMUpsYzJWeWRtVmtRWFIwY2lBOUlHbHpVbVZ6WlhKMlpXUkJkSFJ5TzF4dVZuVmxKRE11WTI5dVptbG5MbWRsZEZSaFowNWhiV1Z6Y0dGalpTQTlJR2RsZEZSaFowNWhiV1Z6Y0dGalpUdGNibFoxWlNRekxtTnZibVpwWnk1cGMxVnVhMjV2ZDI1RmJHVnRaVzUwSUQwZ2FYTlZibXR1YjNkdVJXeGxiV1Z1ZER0Y2JseHVMeThnYVc1emRHRnNiQ0J3YkdGMFptOXliU0J5ZFc1MGFXMWxJR1JwY21WamRHbDJaWE1nSmlCamIyMXdiMjVsYm5SelhHNWxlSFJsYm1Rb1ZuVmxKRE11YjNCMGFXOXVjeTVrYVhKbFkzUnBkbVZ6TENCd2JHRjBabTl5YlVScGNtVmpkR2wyWlhNcE8xeHVaWGgwWlc1a0tGWjFaU1F6TG05d2RHbHZibk11WTI5dGNHOXVaVzUwY3l3Z2NHeGhkR1p2Y20xRGIyMXdiMjVsYm5SektUdGNibHh1THk4Z2FXNXpkR0ZzYkNCd2JHRjBabTl5YlNCd1lYUmphQ0JtZFc1amRHbHZibHh1Vm5WbEpETXVjSEp2ZEc5MGVYQmxMbDlmY0dGMFkyaGZYeUE5SUdsdVFuSnZkM05sY2lBL0lIQmhkR05vSURvZ2JtOXZjRHRjYmx4dUx5OGdjSFZpYkdsaklHMXZkVzUwSUcxbGRHaHZaRnh1Vm5WbEpETXVjSEp2ZEc5MGVYQmxMaVJ0YjNWdWRDQTlJR1oxYm1OMGFXOXVJQ2hjYmlBZ1pXd3NYRzRnSUdoNVpISmhkR2x1WjF4dUtTQjdYRzRnSUdWc0lEMGdaV3dnSmlZZ2FXNUNjbTkzYzJWeUlEOGdjWFZsY25rb1pXd3BJRG9nZFc1a1pXWnBibVZrTzF4dUlDQnlaWFIxY200Z2JXOTFiblJEYjIxd2IyNWxiblFvZEdocGN5d2daV3dzSUdoNVpISmhkR2x1WnlsY2JuMDdYRzVjYmk4dklHUmxkblJ2YjJ4eklHZHNiMkpoYkNCb2IyOXJYRzR2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1Vm5WbEpETXVibVY0ZEZScFkyc29ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQnBaaUFvWTI5dVptbG5MbVJsZG5SdmIyeHpLU0I3WEc0Z0lDQWdhV1lnS0dSbGRuUnZiMnh6S1NCN1hHNGdJQ0FnSUNCa1pYWjBiMjlzY3k1bGJXbDBLQ2RwYm1sMEp5d2dWblZsSkRNcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QW1KaUJwYzBOb2NtOXRaU2tnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaVnRqYjI1emIyeGxMbWx1Wm04Z1B5QW5hVzVtYnljZ09pQW5iRzluSjEwb1hHNGdJQ0FnSUNBZ0lDZEViM2R1Ykc5aFpDQjBhR1VnVm5WbElFUmxkblJ2YjJ4eklHVjRkR1Z1YzJsdmJpQm1iM0lnWVNCaVpYUjBaWElnWkdWMlpXeHZjRzFsYm5RZ1pYaHdaWEpwWlc1alpUcGNYRzRuSUN0Y2JpQWdJQ0FnSUNBZ0oyaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTJkV1ZxY3k5MmRXVXRaR1YyZEc5dmJITW5YRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBbUpseHVJQ0FnSUdOdmJtWnBaeTV3Y205a2RXTjBhVzl1Vkdsd0lDRTlQU0JtWVd4elpTQW1KbHh1SUNBZ0lHbHVRbkp2ZDNObGNpQW1KaUIwZVhCbGIyWWdZMjl1YzI5c1pTQWhQVDBnSjNWdVpHVm1hVzVsWkNkY2JpQWdLU0I3WEc0Z0lDQWdZMjl1YzI5c1pWdGpiMjV6YjJ4bExtbHVabThnUHlBbmFXNW1ieWNnT2lBbmJHOW5KMTBvWEc0Z0lDQWdJQ0JjSWxsdmRTQmhjbVVnY25WdWJtbHVaeUJXZFdVZ2FXNGdaR1YyWld4dmNHMWxiblFnYlc5a1pTNWNYRzVjSWlBclhHNGdJQ0FnSUNCY0lrMWhhMlVnYzNWeVpTQjBieUIwZFhKdUlHOXVJSEJ5YjJSMVkzUnBiMjRnYlc5a1pTQjNhR1Z1SUdSbGNHeHZlV2x1WnlCbWIzSWdjSEp2WkhWamRHbHZiaTVjWEc1Y0lpQXJYRzRnSUNBZ0lDQmNJbE5sWlNCdGIzSmxJSFJwY0hNZ1lYUWdhSFIwY0hNNkx5OTJkV1ZxY3k1dmNtY3ZaM1ZwWkdVdlpHVndiRzk1YldWdWRDNW9kRzFzWENKY2JpQWdJQ0FwTzF4dUlDQjlYRzU5TENBd0tUdGNibHh1THlvZ0lDb3ZYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVm5WbEpETTdYRzRpTENKMllYSWdhVzV6WlhKMFpXUWdQU0JsZUhCdmNuUnpMbU5oWTJobElEMGdlMzFjYmx4dVpuVnVZM1JwYjI0Z2JtOXZjQ0FvS1NCN2ZWeHVYRzVsZUhCdmNuUnpMbWx1YzJWeWRDQTlJR1oxYm1OMGFXOXVJQ2hqYzNNcElIdGNiaUFnYVdZZ0tHbHVjMlZ5ZEdWa1cyTnpjMTBwSUhKbGRIVnliaUJ1YjI5d1hHNGdJR2x1YzJWeWRHVmtXMk56YzEwZ1BTQjBjblZsWEc1Y2JpQWdkbUZ5SUdWc1pXMGdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZHpkSGxzWlNjcFhHNGdJR1ZzWlcwdWMyVjBRWFIwY21saWRYUmxLQ2QwZVhCbEp5d2dKM1JsZUhRdlkzTnpKeWxjYmx4dUlDQnBaaUFvSjNSbGVIUkRiMjUwWlc1MEp5QnBiaUJsYkdWdEtTQjdYRzRnSUNBZ1pXeGxiUzUwWlhoMFEyOXVkR1Z1ZENBOUlHTnpjMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR1ZzWlcwdWMzUjViR1ZUYUdWbGRDNWpjM05VWlhoMElEMGdZM056WEc0Z0lIMWNibHh1SUNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTZ25hR1ZoWkNjcFd6QmRMbUZ3Y0dWdVpFTm9hV3hrS0dWc1pXMHBYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb0oyaGxZV1FuS1Zzd1hTNXlaVzF2ZG1WRGFHbHNaQ2hsYkdWdEtWeHVJQ0FnSUdsdWMyVnlkR1ZrVzJOemMxMGdQU0JtWVd4elpWeHVJQ0I5WEc1OVhHNGlMQ0oyWVhJZ1ZuVmxJQzh2SUd4aGRHVWdZbWx1WkZ4dWRtRnlJSFpsY25OcGIyNWNiblpoY2lCdFlYQWdQU0FvZDJsdVpHOTNMbDlmVmxWRlgwaFBWRjlOUVZCZlh5QTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2twWEc1MllYSWdhVzV6ZEdGc2JHVmtJRDBnWm1Gc2MyVmNiblpoY2lCcGMwSnliM2R6WlhKcFpua2dQU0JtWVd4elpWeHVkbUZ5SUdsdWFYUkliMjlyVG1GdFpTQTlJQ2RpWldadmNtVkRjbVZoZEdVblhHNWNibVY0Y0c5eWRITXVhVzV6ZEdGc2JDQTlJR1oxYm1OMGFXOXVJQ2gyZFdVc0lHSnliM2R6WlhKcFpua3BJSHRjYmlBZ2FXWWdLR2x1YzNSaGJHeGxaQ2tnZXlCeVpYUjFjbTRnZlZ4dUlDQnBibk4wWVd4c1pXUWdQU0IwY25WbFhHNWNiaUFnVm5WbElEMGdkblZsTGw5ZlpYTk5iMlIxYkdVZ1B5QjJkV1V1WkdWbVlYVnNkQ0E2SUhaMVpWeHVJQ0IyWlhKemFXOXVJRDBnVm5WbExuWmxjbk5wYjI0dWMzQnNhWFFvSnk0bktTNXRZWEFvVG5WdFltVnlLVnh1SUNCcGMwSnliM2R6WlhKcFpua2dQU0JpY205M2MyVnlhV1o1WEc1Y2JpQWdMeThnWTI5dGNHRjBJSGRwZEdnZ1BDQXlMakF1TUMxaGJIQm9ZUzQzWEc0Z0lHbG1JQ2hXZFdVdVkyOXVabWxuTGw5c2FXWmxZM2xqYkdWSWIyOXJjeTVwYm1SbGVFOW1LQ2RwYm1sMEp5a2dQaUF0TVNrZ2UxeHVJQ0FnSUdsdWFYUkliMjlyVG1GdFpTQTlJQ2RwYm1sMEoxeHVJQ0I5WEc1Y2JpQWdaWGh3YjNKMGN5NWpiMjF3WVhScFlteGxJRDBnZG1WeWMybHZibHN3WFNBK1BTQXlYRzRnSUdsbUlDZ2haWGh3YjNKMGN5NWpiMjF3WVhScFlteGxLU0I3WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0Z4dUlDQWdJQ0FnSjF0SVRWSmRJRmx2ZFNCaGNtVWdkWE5wYm1jZ1lTQjJaWEp6YVc5dUlHOW1JSFoxWlMxb2IzUXRjbVZzYjJGa0xXRndhU0IwYUdGMElHbHpJQ2NnSzF4dUlDQWdJQ0FnSUNBbmIyNXNlU0JqYjIxd1lYUnBZbXhsSUhkcGRHZ2dWblZsTG1weklHTnZjbVVnWGpJdU1DNHdMaWRjYmlBZ0lDQXBYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1VnWVNCeVpXTnZjbVFnWm05eUlHRWdhRzkwSUcxdlpIVnNaU3dnZDJocFkyZ2dhMlZsY0hNZ2RISmhZMnNnYjJZZ2FYUnpJR052Ym5OMGNuVmpkRzl5WEc0Z0tpQmhibVFnYVc1emRHRnVZMlZ6WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR2xrWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1YzF4dUlDb3ZYRzVjYm1WNGNHOXlkSE11WTNKbFlYUmxVbVZqYjNKa0lEMGdablZ1WTNScGIyNGdLR2xrTENCdmNIUnBiMjV6S1NCN1hHNGdJSFpoY2lCRGRHOXlJRDBnYm5Wc2JGeHVJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk1nUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQkRkRzl5SUQwZ2IzQjBhVzl1YzF4dUlDQWdJRzl3ZEdsdmJuTWdQU0JEZEc5eUxtOXdkR2x2Ym5OY2JpQWdmVnh1SUNCdFlXdGxUM0IwYVc5dWMwaHZkQ2hwWkN3Z2IzQjBhVzl1Y3lsY2JpQWdiV0Z3VzJsa1hTQTlJSHRjYmlBZ0lDQkRkRzl5T2lCRGRHOXlMRnh1SUNBZ0lHOXdkR2x2Ym5NNklHOXdkR2x2Ym5Nc1hHNGdJQ0FnYVc1emRHRnVZMlZ6T2lCYlhWeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dUV0ZyWlNCaElFTnZiWEJ2Ym1WdWRDQnZjSFJwYjI1eklHOWlhbVZqZENCb2IzUXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHbGtYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjMXh1SUNvdlhHNWNibVoxYm1OMGFXOXVJRzFoYTJWUGNIUnBiMjV6U0c5MEtHbGtMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lHbG1JQ2h2Y0hScGIyNXpMbVoxYm1OMGFXOXVZV3dwSUh0Y2JpQWdJQ0IyWVhJZ2NtVnVaR1Z5SUQwZ2IzQjBhVzl1Y3k1eVpXNWtaWEpjYmlBZ0lDQnZjSFJwYjI1ekxuSmxibVJsY2lBOUlHWjFibU4wYVc5dUlDaG9MQ0JqZEhncElIdGNiaUFnSUNBZ0lIWmhjaUJwYm5OMFlXNWpaWE1nUFNCdFlYQmJhV1JkTG1sdWMzUmhibU5sYzF4dUlDQWdJQ0FnYVdZZ0tHTjBlQ0FtSmlCcGJuTjBZVzVqWlhNdWFXNWtaWGhQWmloamRIZ3VjR0Z5Wlc1MEtTQThJREFwSUh0Y2JpQWdJQ0FnSUNBZ2FXNXpkR0Z1WTJWekxuQjFjMmdvWTNSNExuQmhjbVZ1ZENsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJ5Wlc1a1pYSW9hQ3dnWTNSNEtWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCcGJtcGxZM1JJYjI5cktHOXdkR2x2Ym5Nc0lHbHVhWFJJYjI5clRtRnRaU3dnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjbVZqYjNKa0lEMGdiV0Z3VzJsa1hWeHVJQ0FnSUNBZ2FXWWdLQ0Z5WldOdmNtUXVRM1J2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQnlaV052Y21RdVEzUnZjaUE5SUhSb2FYTXVZMjl1YzNSeWRXTjBiM0pjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsWTI5eVpDNXBibk4wWVc1alpYTXVjSFZ6YUNoMGFHbHpLVnh1SUNBZ0lIMHBYRzRnSUNBZ2FXNXFaV04wU0c5dmF5aHZjSFJwYjI1ekxDQW5ZbVZtYjNKbFJHVnpkSEp2ZVNjc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUdsdWMzUmhibU5sY3lBOUlHMWhjRnRwWkYwdWFXNXpkR0Z1WTJWelhHNGdJQ0FnSUNCcGJuTjBZVzVqWlhNdWMzQnNhV05sS0dsdWMzUmhibU5sY3k1cGJtUmxlRTltS0hSb2FYTXBMQ0F4S1Z4dUlDQWdJSDBwWEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCSmJtcGxZM1FnWVNCb2IyOXJJSFJ2SUdFZ2FHOTBJSEpsYkc5aFpHRmliR1VnWTI5dGNHOXVaVzUwSUhOdklIUm9ZWFJjYmlBcUlIZGxJR05oYmlCclpXVndJSFJ5WVdOcklHOW1JR2wwTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYm1GdFpWeHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnYUc5dmExeHVJQ292WEc1Y2JtWjFibU4wYVc5dUlHbHVhbVZqZEVodmIyc29iM0IwYVc5dWN5d2dibUZ0WlN3Z2FHOXZheWtnZTF4dUlDQjJZWElnWlhocGMzUnBibWNnUFNCdmNIUnBiMjV6VzI1aGJXVmRYRzRnSUc5d2RHbHZibk5iYm1GdFpWMGdQU0JsZUdsemRHbHVaMXh1SUNBZ0lEOGdRWEp5WVhrdWFYTkJjbkpoZVNobGVHbHpkR2x1WnlrZ1B5QmxlR2x6ZEdsdVp5NWpiMjVqWVhRb2FHOXZheWtnT2lCYlpYaHBjM1JwYm1jc0lHaHZiMnRkWEc0Z0lDQWdPaUJiYUc5dmExMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2RISjVWM0poY0NobWJpa2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0dsa0xDQmhjbWNwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1ptNG9hV1FzSUdGeVp5bGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dVcFhHNGdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9YRzRnSUNBZ0lDQWdJQ2RUYjIxbGRHaHBibWNnZDJWdWRDQjNjbTl1WnlCa2RYSnBibWNnVm5WbElHTnZiWEJ2Ym1WdWRDQm9iM1F0Y21Wc2IyRmtMaUJHZFd4c0lISmxiRzloWkNCeVpYRjFhWEpsWkM0blhHNGdJQ0FnSUNBcFhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlIVndaR0YwWlU5d2RHbHZibk1nS0c5c1pFOXdkR2x2Ym5Nc0lHNWxkMDl3ZEdsdmJuTXBJSHRjYmlBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUc5c1pFOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9JU2hyWlhrZ2FXNGdibVYzVDNCMGFXOXVjeWtwSUh0Y2JpQWdJQ0FnSUdSbGJHVjBaU0J2YkdSUGNIUnBiMjV6VzJ0bGVWMWNiaUFnSUNCOVhHNGdJSDFjYmlBZ1ptOXlJQ2gyWVhJZ2EyVjVKREVnYVc0Z2JtVjNUM0IwYVc5dWN5a2dlMXh1SUNBZ0lHOXNaRTl3ZEdsdmJuTmJhMlY1SkRGZElEMGdibVYzVDNCMGFXOXVjMXRyWlhra01WMWNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUnpMbkpsY21WdVpHVnlJRDBnZEhKNVYzSmhjQ2htZFc1amRHbHZiaUFvYVdRc0lHOXdkR2x2Ym5NcElIdGNiaUFnZG1GeUlISmxZMjl5WkNBOUlHMWhjRnRwWkYxY2JpQWdhV1lnS0NGdmNIUnBiMjV6S1NCN1hHNGdJQ0FnY21WamIzSmtMbWx1YzNSaGJtTmxjeTV6YkdsalpTZ3BMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR2x1YzNSaGJtTmxLU0I3WEc0Z0lDQWdJQ0JwYm5OMFlXNWpaUzRrWm05eVkyVlZjR1JoZEdVb0tWeHVJQ0FnSUgwcFhHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NdWIzQjBhVzl1YzF4dUlDQjlYRzRnSUdsbUlDaHlaV052Y21RdVEzUnZjaWtnZTF4dUlDQWdJSEpsWTI5eVpDNURkRzl5TG05d2RHbHZibk11Y21WdVpHVnlJRDBnYjNCMGFXOXVjeTV5Wlc1a1pYSmNiaUFnSUNCeVpXTnZjbVF1UTNSdmNpNXZjSFJwYjI1ekxuTjBZWFJwWTFKbGJtUmxja1p1Y3lBOUlHOXdkR2x2Ym5NdWMzUmhkR2xqVW1WdVpHVnlSbTV6WEc0Z0lDQWdjbVZqYjNKa0xtbHVjM1JoYm1ObGN5NXpiR2xqWlNncExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHbHVjM1JoYm1ObEtTQjdYRzRnSUNBZ0lDQnBibk4wWVc1alpTNGtiM0IwYVc5dWN5NXlaVzVrWlhJZ1BTQnZjSFJwYjI1ekxuSmxibVJsY2x4dUlDQWdJQ0FnYVc1emRHRnVZMlV1Skc5d2RHbHZibk11YzNSaGRHbGpVbVZ1WkdWeVJtNXpJRDBnYjNCMGFXOXVjeTV6ZEdGMGFXTlNaVzVrWlhKR2JuTmNiaUFnSUNBZ0lDOHZJSEpsYzJWMElITjBZWFJwWXlCMGNtVmxjMXh1SUNBZ0lDQWdMeThnY0hKbElESXVOU3dnWVd4c0lITjBZWFJwWXlCMGNtVmxjeUJoY21VZ1kyRm9ZMlZrSUhSdloyVjBhR1Z5SUc5dUlIUm9aU0JwYm5OMFlXNWpaVnh1SUNBZ0lDQWdhV1lnS0dsdWMzUmhibU5sTGw5emRHRjBhV05VY21WbGN5a2dlMXh1SUNBZ0lDQWdJQ0JwYm5OMFlXNWpaUzVmYzNSaGRHbGpWSEpsWlhNZ1BTQmJYVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdMeThnTWk0MUxqQmNiaUFnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtISmxZMjl5WkM1RGRHOXlMbTl3ZEdsdmJuTXVZMkZqYUdWa0tTa2dlMXh1SUNBZ0lDQWdJQ0J5WldOdmNtUXVRM1J2Y2k1dmNIUnBiMjV6TG1OaFkyaGxaQ0E5SUZ0ZFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QXlMalV1TTF4dUlDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYVc1emRHRnVZMlV1Skc5d2RHbHZibk11WTJGamFHVmtLU2tnZTF4dUlDQWdJQ0FnSUNCcGJuTjBZVzVqWlM0a2IzQjBhVzl1Y3k1allXTm9aV1FnUFNCYlhWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0x5OGdjRzl6ZENBeUxqVXVORG9nZGkxdmJtTmxJSFJ5WldWeklHRnlaU0JqWVdOb1pXUWdiMjRnYVc1emRHRnVZMlV1WDNOMFlYUnBZMVJ5WldWekxseHVJQ0FnSUNBZ0x5OGdVSFZ5WlNCemRHRjBhV01nZEhKbFpYTWdZWEpsSUdOaFkyaGxaQ0J2YmlCMGFHVWdjM1JoZEdsalVtVnVaR1Z5Um01eklHRnljbUY1WEc0Z0lDQWdJQ0F2THlBb1ltOTBhQ0JoYkhKbFlXUjVJSEpsYzJWMElHRmliM1psS1Z4dUlDQWdJQ0FnYVc1emRHRnVZMlV1SkdadmNtTmxWWEJrWVhSbEtDbGNiaUFnSUNCOUtWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHZJR1oxYm1OMGFXOXVZV3dnYjNJZ2JtOGdhVzV6ZEdGdVkyVWdZM0psWVhSbFpDQjVaWFJjYmlBZ0lDQnlaV052Y21RdWIzQjBhVzl1Y3k1eVpXNWtaWElnUFNCdmNIUnBiMjV6TG5KbGJtUmxjbHh1SUNBZ0lISmxZMjl5WkM1dmNIUnBiMjV6TG5OMFlYUnBZMUpsYm1SbGNrWnVjeUE5SUc5d2RHbHZibk11YzNSaGRHbGpVbVZ1WkdWeVJtNXpYRzVjYmlBZ0lDQXZMeUJvWVc1a2JHVWdablZ1WTNScGIyNWhiQ0JqYjIxd2IyNWxiblFnY21VdGNtVnVaR1Z5WEc0Z0lDQWdhV1lnS0hKbFkyOXlaQzV2Y0hScGIyNXpMbVoxYm1OMGFXOXVZV3dwSUh0Y2JpQWdJQ0FnSUM4dklISmxjbVZ1WkdWeUlIZHBkR2dnWm5Wc2JDQnZjSFJwYjI1elhHNGdJQ0FnSUNCcFppQW9UMkpxWldOMExtdGxlWE1vYjNCMGFXOXVjeWt1YkdWdVozUm9JRDRnTWlrZ2UxeHVJQ0FnSUNBZ0lDQjFjR1JoZEdWUGNIUnBiMjV6S0hKbFkyOXlaQzV2Y0hScGIyNXpMQ0J2Y0hScGIyNXpLVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdMeThnZEdWdGNHeGhkR1V0YjI1c2VTQnlaWEpsYm1SbGNpNWNiaUFnSUNBZ0lDQWdMeThnYm1WbFpDQjBieUJwYm1wbFkzUWdkR2hsSUhOMGVXeGxJR2x1YW1WamRHbHZiaUJqYjJSbElHWnZjaUJEVTFNZ2JXOWtkV3hsYzF4dUlDQWdJQ0FnSUNBdkx5QjBieUIzYjNKcklIQnliM0JsY214NUxseHVJQ0FnSUNBZ0lDQjJZWElnYVc1cVpXTjBVM1I1YkdWeklEMGdjbVZqYjNKa0xtOXdkR2x2Ym5NdVgybHVhbVZqZEZOMGVXeGxjMXh1SUNBZ0lDQWdJQ0JwWmlBb2FXNXFaV04wVTNSNWJHVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYm1SbGNpQTlJRzl3ZEdsdmJuTXVjbVZ1WkdWeVhHNGdJQ0FnSUNBZ0lDQWdjbVZqYjNKa0xtOXdkR2x2Ym5NdWNtVnVaR1Z5SUQwZ1puVnVZM1JwYjI0Z0tHZ3NJR04wZUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1cVpXTjBVM1I1YkdWekxtTmhiR3dvWTNSNEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYm1SbGNpaG9MQ0JqZEhncFhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WldOdmNtUXViM0IwYVc5dWN5NWZRM1J2Y2lBOUlHNTFiR3hjYmlBZ0lDQWdJQzh2SURJdU5TNHpYRzRnSUNBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaHlaV052Y21RdWIzQjBhVzl1Y3k1allXTm9aV1FwS1NCN1hHNGdJQ0FnSUNBZ0lISmxZMjl5WkM1dmNIUnBiMjV6TG1OaFkyaGxaQ0E5SUZ0ZFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpXTnZjbVF1YVc1emRHRnVZMlZ6TG5Oc2FXTmxLQ2t1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvYVc1emRHRnVZMlVwSUh0Y2JpQWdJQ0FnSUNBZ2FXNXpkR0Z1WTJVdUpHWnZjbU5sVlhCa1lYUmxLQ2xjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdmVnh1SUNCOVhHNTlLVnh1WEc1bGVIQnZjblJ6TG5KbGJHOWhaQ0E5SUhSeWVWZHlZWEFvWm5WdVkzUnBiMjRnS0dsa0xDQnZjSFJwYjI1ektTQjdYRzRnSUhaaGNpQnlaV052Y21RZ1BTQnRZWEJiYVdSZFhHNGdJR2xtSUNodmNIUnBiMjV6S1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeTV2Y0hScGIyNXpYRzRnSUNBZ2ZWeHVJQ0FnSUcxaGEyVlBjSFJwYjI1elNHOTBLR2xrTENCdmNIUnBiMjV6S1Z4dUlDQWdJR2xtSUNoeVpXTnZjbVF1UTNSdmNpa2dlMXh1SUNBZ0lDQWdhV1lnS0habGNuTnBiMjViTVYwZ1BDQXlLU0I3WEc0Z0lDQWdJQ0FnSUM4dklIQnlaWE5sY25abElIQnlaU0F5TGpJZ1ltVm9ZWFpwYjNJZ1ptOXlJR2RzYjJKaGJDQnRhWGhwYmlCb1lXNWtiR2x1WjF4dUlDQWdJQ0FnSUNCeVpXTnZjbVF1UTNSdmNpNWxlSFJsYm1SUGNIUnBiMjV6SUQwZ2IzQjBhVzl1YzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZG1GeUlHNWxkME4wYjNJZ1BTQnlaV052Y21RdVEzUnZjaTV6ZFhCbGNpNWxlSFJsYm1Rb2IzQjBhVzl1Y3lsY2JpQWdJQ0FnSUhKbFkyOXlaQzVEZEc5eUxtOXdkR2x2Ym5NZ1BTQnVaWGREZEc5eUxtOXdkR2x2Ym5OY2JpQWdJQ0FnSUhKbFkyOXlaQzVEZEc5eUxtTnBaQ0E5SUc1bGQwTjBiM0l1WTJsa1hHNGdJQ0FnSUNCeVpXTnZjbVF1UTNSdmNpNXdjbTkwYjNSNWNHVWdQU0J1WlhkRGRHOXlMbkJ5YjNSdmRIbHdaVnh1SUNBZ0lDQWdhV1lnS0c1bGQwTjBiM0l1Y21Wc1pXRnpaU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QjBaVzF3YjNKaGNua2daMnh2WW1Gc0lHMXBlR2x1SUhOMGNtRjBaV2Q1SUhWelpXUWdhVzRnUENBeUxqQXVNQzFoYkhCb1lTNDJYRzRnSUNBZ0lDQWdJRzVsZDBOMGIzSXVjbVZzWldGelpTZ3BYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhWd1pHRjBaVTl3ZEdsdmJuTW9jbVZqYjNKa0xtOXdkR2x2Ym5Nc0lHOXdkR2x2Ym5NcFhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbFkyOXlaQzVwYm5OMFlXNWpaWE11YzJ4cFkyVW9LUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hwYm5OMFlXNWpaU2tnZTF4dUlDQWdJR2xtSUNocGJuTjBZVzVqWlM0a2RtNXZaR1VnSmlZZ2FXNXpkR0Z1WTJVdUpIWnViMlJsTG1OdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUdsdWMzUmhibU5sTGlSMmJtOWtaUzVqYjI1MFpYaDBMaVJtYjNKalpWVndaR0YwWlNncFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloY2JpQWdJQ0FnSUNBZ0oxSnZiM1FnYjNJZ2JXRnVkV0ZzYkhrZ2JXOTFiblJsWkNCcGJuTjBZVzVqWlNCdGIyUnBabWxsWkM0Z1JuVnNiQ0J5Wld4dllXUWdjbVZ4ZFdseVpXUXVKMXh1SUNBZ0lDQWdLVnh1SUNBZ0lIMWNiaUFnZlNsY2JuMHBYRzRpTENKV2RXVXVZMjl1Wm1sbkxtUmxkblJ2YjJ4eklEMGdkSEoxWlR0Y2NseHVYSEpjYm1sdGNHOXlkQ0J0UVhCd2JHbGpZWFJwYjI0Z1puSnZiU0FuTGk0dmRuVmxMMjB0WVhCc2FXTmhkR2x2Ymk1MmRXVW5PMXh5WEc1cGJYQnZjblFnVEdGdVp5Qm1jbTl0SUNjdUwyeGhibWNuTzF4eVhHNWNjbHh1YkdWMElHeGhibWNnUFNCdVpYY2dUR0Z1WnlncE8xeHlYRzVjY2x4dWQybHVaRzkzTG1SdlkzVnRaVzUwTG5ScGRHeGxJRDBnYkdGdVp5NTBjbUZ1YzJ4aGRHVW9KM1JwZEd4bEp5azdYSEpjYmx4eVhHNVdkV1V1WkdseVpXTjBhWFpsS0Nkc1lXNW5KeXdnZTF4eVhHNGdJQ0FnYVc1elpYSjBaV1E2SUdaMWJtTjBhVzl1SUNobGJDd2dZbWx1WkdsdVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUdWc0xtbHVibVZ5U0ZSTlRDQTlJR3hoYm1jdWRISmhibk5zWVhSbEtHSnBibVJwYm1jdWRtRnNkV1VwTzF4eVhHNGdJQ0FnZlZ4eVhHNTlLVHRjY2x4dVZuVmxMbVJwY21WamRHbDJaU2duYkdGdVp5MWphR2xzWkhKbGJpY3NJSHRjY2x4dUlDQWdJR2x1YzJWeWRHVmtPaUJtZFc1amRHbHZiaUFvWld3c0lHSnBibVJwYm1jcElIdGNjbHh1SUNBZ0lDQWdJQ0JsYkM1amFHbHNaSEpsYmxzd1hTNXBibTVsY2toVVRVd2dQU0JzWVc1bkxuUnlZVzV6YkdGMFpTaGlhVzVrYVc1bkxuWmhiSFZsS1R0Y2NseHVJQ0FnSUgxY2NseHVmU2s3WEhKY2JseHlYRzV1WlhjZ1ZuVmxLSHRjY2x4dUlDQWdJR1ZzT2lBbkkyRndjQ2NzWEhKY2JpQWdJQ0JqYjIxd2IyNWxiblJ6T2lCN2JVRndjR3hwWTJGMGFXOXVmVnh5WEc1OUtUc2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCTVlXNW5JSHRjY2x4dVhISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVJsZEdWamRHVmtJRDBnS0c1aGRtbG5ZWFJ2Y2k1c1lXNW5kV0ZuWlNCOGZDQnVZWFpwWjJGMGIzSXVkWE5sY2t4aGJtZDFZV2RsS1M1emNHeHBkQ2duTFNjcFd6QmRPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRDQTlJQ2NuTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WkdsamRHbHZibUZ5ZVNBOUlFeGhibWN1Ykc5aFpDaDBhR2x6TG1OMWNuSmxiblFnZkh3Z2RHaHBjeTVrWlhSbFkzUmxaQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RISmhibk5zWVhSbEtHdGxlU2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZkxtZGxkQ2gwYUdsekxtUnBZM1JwYjI1aGNua3NJR3RsZVN3Z0p5Tm1hWGdnZEdocGN5TW5LVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCemRHRjBhV01nYkc5aFpDaHNZVzVuTENCemRHOXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR1JwWTNScGIyNWhjbmtnUFNCdWRXeHNPMXh5WEc0Z0lDQWdJQ0FnSUNRdVlXcGhlQ2g3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFZ5YkRvZ0p5OXNZVzVuTHljZ0t5QnNZVzVuSUNzZ0p5NXFjMjl1Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWUjVjR1U2SUNkcWMyOXVKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZWE41Ym1NNklHWmhiSE5sTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFdOalpYTnpPaUJtZFc1amRHbHZiaUFvWkdGMFlTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsamRHbHZibUZ5ZVNBOUlHUmhkR0U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eU9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLR1JwWTNScGIyNWhjbmtnUFQwZ2JuVnNiQ0FtSmlBaGMzUnZjQ2tnUHlCTVlXNW5MbXh2WVdRb0oyVnVKeWtnT2lCa2FXTjBhVzl1WVhKNU8xeHlYRzRnSUNBZ2ZWeHlYRzU5SWl3aVBIUmxiWEJzWVhSbFBseHlYRzRnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbTE1TFdGMWRHOWNJajVjY2x4dUlDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2laQzFtYkdWNElHWnNaWGd0WTI5c2RXMXVJR1pzWlhndGJXUXRjbTkzSUcxaUxUVWdhblZ6ZEdsbWVTMWpiMjUwWlc1MExXSmxkSGRsWlc1Y0lqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbTE1TFdsdVptOWNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4b01TQmpiR0Z6Y3oxY0ltMTVMV0ZpYjNWMExXNWhiV1VnYldJdE1DQXRMV0psWW1GelhDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzRnZGkxc1lXNW5QVndpSjJGaWIzVjBMbTVoYldVblhDSStQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emNHRnVJSFl0YkdGdVp6MWNJaWRoWW05MWRDNXpkWEp1WVcxbEoxd2lJR05zWVhOelBWd2lMUzF0ZVMxamIyeHZjbHdpUGp3dmMzQmhiajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmFERStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWMzVmlhR1ZoWkdsdVp5QnRZaTAxSUMwdGRYQndaWEpqWVhObElDMHRZbVZpWVhOY0lqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFlTQmpiR0Z6Y3oxY0lpMHRiWGt0WTI5c2IzSWdiWGt0WTI5dWRHRmpkRndpSUdoeVpXWTlYQ0p0WVdsc2RHODZibUZ0WlVCbGJXRnBiQzVqYjIxY0lpQjJMV3hoYm1jOVhDSW5ZV0p2ZFhRdWJXRnBiQ2RjSWo0OEwyRStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzQrSU1LM0lEd3ZjM0JoYmo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNCaGJpQjJMV3hoYm1jOVhDSW5ZV0p2ZFhRdWJHOWpZWFJwYjI0blhDSStQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emNHRnVQaURDdHlBOEwzTndZVzQrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0VnWTJ4aGMzTTlYQ0l0TFcxNUxXTnZiRzl5SUcxNUxXTnZiblJoWTNSY0lpQm9jbVZtUFZ3aWRHVnNPaXN6T0NBb01EWTJLU0F3TXpRdE9URXROREJjSWo0ck16Z2dLREEyTmlrZ01ETTBMVGt4TFRRd1BDOWhQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWJYa3RjWElnWm14bGVDMXRaQzF5YjNjZ2JYUXRNMXdpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTTlYQ0p0ZVMxeGNpMWpiMlJsSUdsamIyNHRjWEpqYjJSbFhDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTTlYQ0p3WVhSb01sd2lQand2YzNCaGJqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbk4xWW1obFlXUnBibWNnYldJdE5Wd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThjM0JoYmlCMkxXeGhibWM5WENJbllXSnZkWFF1YVc1bWIzSnRZWFJwYjI0blhDSStQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHlYRzVjY2x4dUlDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2ljM1ZpYUdWaFpHbHVaeUJ0WWkwMVhDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGhJR2h5WldZOVhDSm9kSFJ3Y3pvdkwzWnJMbU52YlM5emEzbDFiMnRsY2x3aUlIUmhjbWRsZEQxY0lsOWliR0Z1YTF3aUlHTnNZWE56UFZ3aWJYa3RiR2x1YTF3aUlIWXRZaTEwYjI5c2RHbHdMbU5zYVdOcklIUnBkR3hsUFZ3aVZtdHZiblJoYTNSbFhDSStQSE53WVc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemN6MWNJbWxqYjI0dGRtc2dMUzF5WVdScGRYTWdjQzB5WENJK1BDOXpjR0Z1UGp3dllUNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHRWdhSEpsWmoxY0ltaDBkSEJ6T2k4dmRDNXRaUzl6YW5KemJIWmNJaUIwWVhKblpYUTlYQ0pmWW14aGJtdGNJaUJqYkdGemN6MWNJbTE1TFd4cGJtdGNJaUIyTFdJdGRHOXZiSFJwY0M1b2IzWmxjaUIwYVhSc1pUMWNJbFJsYkdWbmNtRnRYQ0krUEhOd1lXNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjejFjSW1samIyNHRkR1ZzWldkeVlXMGdMUzF5WVdScGRYTWdjQzB5WENJK1BDOXpjR0Z1UGp3dllUNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHRWdhSEpsWmoxY0luWnBZbVZ5T2k4dlkyaGhkRDl1ZFcxaVpYSTlLek00TURZMk1ETTBPVEUwTUZ3aUlIUmhjbWRsZEQxY0lsOWliR0Z1YTF3aUlHTnNZWE56UFZ3aWJYa3RiR2x1YTF3aUlIWXRZaTEwYjI5c2RHbHdMbWh2ZG1WeUlIUnBkR3hsUFZ3aVZtbGlaWEpjSWo0OGMzQmhibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56UFZ3aWFXTnZiaTEyYVdKbGNpQXRMWEpoWkdsMWN5QndMVEpjSWo0OEwzTndZVzQrUEM5aFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBOFlTQm9jbVZtUFZ3aWMydDVjR1U2WVd4MFlXZGxjbVUvWTJGc2JGd2lJSFJoY21kbGREMWNJbDlpYkdGdWExd2lJR05zWVhOelBWd2liWGt0YkdsdWExd2lJSFl0WWkxMGIyOXNkR2x3TG1odmRtVnlJSFJwZEd4bFBWd2lVMnQ1Y0dWY0lqNDhjM0JoYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelBWd2lhV052YmkxemEzbHdaU0F0TFhKaFpHbDFjeUJ3TFRKY0lqNDhMM053WVc0K1BDOWhQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThZU0JvY21WbVBWd2lhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMU5oYkhsbllWbGhjbTl6YkdGMlhDSWdkR0Z5WjJWMFBWd2lYMkpzWVc1clhDSWdZMnhoYzNNOVhDSnRlUzFzYVc1clhDSWdkaTFpTFhSdmIyeDBhWEF1YUc5MlpYSmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2wwYkdVOVhDSkhhWFJJZFdKY0lqNDhjM0JoYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelBWd2lhV052YmkxbmFYUm9kV0lnTFMxeVlXUnBkWE1nY0MweVhDSStQQzl6Y0dGdVBqd3ZZVDVjY2x4dUlDQWdJQ0FnSUNBOEwyUnBkajVjY2x4dUlDQWdJRHd2WkdsMlBseHlYRzQ4TDNSbGJYQnNZWFJsUGx4eVhHNWNjbHh1UEhOamNtbHdkRDVjY2x4dUlDQWdJR1Y0Y0c5eWRDQmtaV1poZFd4MElIdGNjbHh1SUNBZ0lDQWdJQ0J1WVcxbE9pQmNJbTB0WVdKdmRYUmNJbHh5WEc0Z0lDQWdmVnh5WEc0OEwzTmpjbWx3ZEQ1Y2NseHVYSEpjYmp4emRIbHNaU0JzWVc1blBWd2ljMk56YzF3aVBseHlYRzRnSUNBZ1FHbHRjRzl5ZENCY0lpNHVMM05qYzNNdmJXRnBibHdpTzF4eVhHNWNjbHh1SUNBZ0lDNXRlUzFzYVc1cklIdGNjbHh1SUNBZ0lDQWdJQ0IwWlhoMExXUmxZMjl5WVhScGIyNDZJRzV2Ym1VN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNZNmFHOTJaWElnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlhoMExXUmxZMjl5WVhScGIyNDZJRzV2Ym1VN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM1dGVTMWpiMjUwWVdOMElIdGNjbHh1SUNBZ0lDQWdJQ0IwWlhoMExXUmxZMjl5WVhScGIyNDZJRzV2Ym1VN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNZNmFHOTJaWElnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlhoMExXUmxZMjl5WVhScGIyNDZJRzV2Ym1VN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUFrWW14MVpTMWtZWEpyYm1WemN6dGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0xtMTVMWEZ5SUh0Y2NseHVJQ0FnSUNBZ0lDQjNhV1IwYURvZ05uSmxiVHRjY2x4dUlDQWdJQ0FnSUNCb1pXbG5hSFE2SURaeVpXMDdYSEpjYmlBZ0lDQWdJQ0FnSmkxamIyUmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnNklEWnlaVzA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2dObkpsYlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVG9nWW14dlkyczdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhaR1JwYm1jNklEQXVOSEpsYlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05dWRDMXphWHBsT2lBMWNtVnRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ0pHUmhjbXN0Y21WbmRXeGhjanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZbTl5WkdWeU9pQXljSGdnYzI5c2FXUWdKR0pzZFdVdGNtVm5kV3hoY2p0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmp3dmMzUjViR1UrSWl3aVBIUmxiWEJzWVhSbFBseHlYRzRnSUNBZ1BHUnBkajVjY2x4dUlDQWdJQ0FnSUNBOFlpMXVZWFppWVhJZ1ptbDRaV1E5WENKMGIzQmNJaUJqYkdGemN6MWNJbTE1TFc1aGRsd2lJSFJ2WjJkc1pXRmliR1U5WENKc1oxd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThZaTF1WVhaaVlYSXRZbkpoYm1RZ1kyeGhjM005WENKdGRDMXNaeTAxSUcxeUxUQmNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emNHRnVJR05zWVhOelBWd2laQzFpYkc5amF5QmtMV3huTFc1dmJtVmNJaUIyTFd4aGJtYzlYQ0luYldWdWRTNXdiM0owWm05c2FXOG5YQ0krUEM5emNHRnVQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNGdZMnhoYzNNOVhDSmtMVzV2Ym1VZ1pDMXNaeTFpYkc5amExd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHBiV2NnWTJ4aGMzTTlYQ0pwYldjdFpteDFhV1FnYVcxbkxYQnliMlpwYkdVZ2NtOTFibVJsWkMxamFYSmpiR1VnYlhndFlYVjBieUJ0WWkweVhDSWdjM0pqUFZ3aUwyRnpjMlYwY3k5aGRtRXVhbkJuWENJZ1lXeDBQVndpWENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMM053WVc0K1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUR3dllpMXVZWFppWVhJdFluSmhibVErWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHhpTFc1aGRtSmhjaTEwYjJkbmJHVWdkR0Z5WjJWMFBWd2liWGxmWTI5c2JHRndjMlZjSWo0OEwySXRibUYyWW1GeUxYUnZaMmRzWlQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdJdFkyOXNiR0Z3YzJVZ2FYTXRibUYySUdsa1BWd2liWGxmWTI5c2JHRndjMlZjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGlMVzVoZGlCMlpYSjBhV05oYkNCMkxXSXRjMk55YjJ4c2MzQjVPbk53ZVQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WWkxdVlYWXRhWFJsYlNCb2NtVm1QVndpSTJGaWIzVjBYQ0lnZGkxc1lXNW5MV05vYVd4a2NtVnVQVndpSjIxbGJuVXVZV0p2ZFhRblhDSStQQzlpTFc1aGRpMXBkR1Z0UGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhpTFc1aGRpMXBkR1Z0SUdoeVpXWTlYQ0lqWlhod1pYSnBaVzVqWlZ3aUlIWXRiR0Z1WnkxamFHbHNaSEpsYmoxY0lpZHRaVzUxTG1WNGNHVnlhV1Z1WTJVblhDSStQQzlpTFc1aGRpMXBkR1Z0UGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhpTFc1aGRpMXBkR1Z0SUdoeVpXWTlYQ0lqWldSMVkyRjBhVzl1WENJZ2RpMXNZVzVuTFdOb2FXeGtjbVZ1UFZ3aUoyMWxiblV1WldSMVkyRjBhVzl1SjF3aVBqd3ZZaTF1WVhZdGFYUmxiVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZaTF1WVhZdGFYUmxiU0JvY21WbVBWd2lJM05yYVd4c2Mxd2lJSFl0YkdGdVp5MWphR2xzWkhKbGJqMWNJaWR0Wlc1MUxuTnJhV3hzY3lkY0lqNDhMMkl0Ym1GMkxXbDBaVzArWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0l0Ym1GMkxXbDBaVzBnYUhKbFpqMWNJaU5wYm5SbGNtVnpkSE5jSWlCMkxXeGhibWN0WTJocGJHUnlaVzQ5WENJbmJXVnVkUzVwYm5SbGNtVnpkSE1uWENJK1BDOWlMVzVoZGkxcGRHVnRQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGlMVzVoZGkxcGRHVnRJR2h5WldZOVhDSWpZMlZ5ZEdsbWFXTmhkR2x2Ym5OY0lpQjJMV3hoYm1jdFkyaHBiR1J5Wlc0OVhDSW5iV1Z1ZFM1alpYSjBhV1pwWTJGMGFXOXVjeWRjSWo0OEwySXRibUYyTFdsMFpXMCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJJdGJtRjJQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMkl0WTI5c2JHRndjMlUrWEhKY2JpQWdJQ0FnSUNBZ1BDOWlMVzVoZG1KaGNqNWNjbHh1SUNBZ0lDQWdJQ0E4YlMxamIyNTBaVzUwSUhZdFltbHVaRHB3WVhKMGN6MWNJbkJoY25SelhDSStQQzl0TFdOdmJuUmxiblErWEhKY2JpQWdJQ0E4TDJScGRqNWNjbHh1UEM5MFpXMXdiR0YwWlQ1Y2NseHVYSEpjYmp4elkzSnBjSFErWEhKY2JpQWdJQ0JwYlhCdmNuUWdiVU52Ym5SbGJuUWdabkp2YlNCY0lpNHZiUzFqYjI1MFpXNTBMbloxWlZ3aU8xeHlYRzVjY2x4dUlDQWdJR1Y0Y0c5eWRDQmtaV1poZFd4MElIdGNjbHh1SUNBZ0lDQWdJQ0JqYjIxd2IyNWxiblJ6T2lCN2JVTnZiblJsYm5SOUxGeHlYRzRnSUNBZ0lDQWdJRzVoYldVNklGd2liUzFoY0d4cFkyRjBhVzl1WENKY2NseHVJQ0FnSUgxY2NseHVQQzl6WTNKcGNIUStYSEpjYmx4eVhHNDhjM1I1YkdVZ2JHRnVaejFjSW5OamMzTmNJajVjY2x4dUlDQWdJRUJwYlhCdmNuUWdYQ0l1TGk5elkzTnpMMjFoYVc1Y0lqdGNjbHh1WEhKY2JpQWdJQ0F1YlhrdGJtRjJJSHRjY2x4dUlDQWdJQ0FnSUNCaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lBa1lteDFaUzF5WldkMWJHRnlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXVibUYyWW1GeUxXSnlZVzVrSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJQ05tWm1abVptWTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDWTZhRzkyWlhJZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJNklDTm1abVptWm1ZN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnTG01aGRtSmhjaTEwYjJkbmJHVnlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZbTl5WkdWeUxXTnZiRzl5T2lBalptWm1abVptTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F1Ym1GMlltRnlMWFJ2WjJkc1pYSXRhV052YmlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQjFibk5sZER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDMTNaV0pyYVhRdGJXRnphem9nZFhKc0tDOWhjM05sZEhNdmRHOW5aMnhsTG5OMlp5a2dibTh0Y21Wd1pXRjBJRFV3SlNBMU1DVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhOck9pQjFjbXdvTDJGemMyVjBjeTkwYjJkbmJHVXVjM1puS1NCdWJ5MXlaWEJsWVhRZ05UQWxJRFV3SlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVptWm1ZN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDNXBiV2N0Y0hKdlptbHNaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZUMxM2FXUjBhRG9nTVRCeVpXMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhlQzFvWldsbmFIUTZJREV3Y21WdE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIzSmtaWEk2SUM0NGNtVnRJSE52Ykdsa0lDUmliSFZsTFdSaGNtdHVaWE56TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0F1Ym1GMkxXbDBaVzBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FtTG1GamRHbDJaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lBa1lteDFaUzFrWVhKcmJtVnpjenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTG01aGRpMXNhVzVySUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lBalptWm1abVptTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkQzEwY21GdWMyWnZjbTA2SUhWd2NHVnlZMkZ6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZiblF0YzJsNlpUb2dNUzQxY21WdE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUVCdFpXUnBZU0FvYldGNExYZHBaSFJvT2lBMU56WndlQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDNXRlUzFqYjI1MFpXNTBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdUxYUnZjRG9nTlRCd2VGeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCQWJXVmthV0VnS0cxcGJpMTNhV1IwYURvZ09Ua3ljSGdwSUh0Y2NseHVJQ0FnSUNBZ0lDQmliMlI1SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGa1pHbHVaeTEwYjNBNklEQTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhaR1JwYm1jdGJHVm1kRG9nTWpCeVpXMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDNXRlUzF1WVhZZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBMV0ZzYVdkdU9pQmpaVzUwWlhJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lCbWFYaGxaRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkRzl3T2lBd08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pXWjBPaUF3TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVPaUJtYkdWNE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWJHVjRMV1JwY21WamRHbHZiam9nWTI5c2RXMXVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ01qQnlaVzA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2dNVEF3ZG1nN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXVibUYySUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmpvZ1lYVjBienRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVQQzl6ZEhsc1pUNGlMQ0k4ZEdWdGNHeGhkR1UrWEhKY2JpQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWJYa3RZWFYwYjF3aVBseHlYRzRnSUNBZ0lDQWdJRHhvTWlCamJHRnpjejFjSW0xNUxXRmliM1YwTFc1aGJXVWdiV0l0TlNBdExXSmxZbUZ6WENJZ2RpMXNZVzVuUFZ3aUoyTmxjblJwWm1sallYUnBiMjV6TG5ScGRHeGxKMXdpUGp3dmFESStYSEpjYmlBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltUXRabXhsZUNCbWJHVjRMV052YkhWdGJpQm1iR1Y0TFcxa0xYSnZkeUJ0WWkwMVhDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0p0Y2kxaGRYUnZJSE4xWW1obFlXUnBibWRjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeDFiQ0JqYkdGemN6MWNJbXhwYzNRZ2JYa3RZMlZ5ZEdsbWFXTmhkR2x2Ym5NdGJHbHpkRndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhzYVNCamJHRnpjejFjSW14cGMzUXRhWFJsYlZ3aVBqeHBJR05zWVhOelBWd2liWGt0WTJWeWRHbG1hV05oZEdsdmJuTXRhV052YmlCcFkyOXVMWFJ5YjNCb2VTQnRjaTB5WENJK1BDOXBQanh6Y0dGdVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyTFd4aGJtYzlYQ0luWTJWeWRHbG1hV05oZEdsdmJuTXVabWx5YzNRblhDSStQQzl6Y0dGdVBqd3ZiR2srWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR3hwSUdOc1lYTnpQVndpYkdsemRDMXBkR1Z0WENJK1BHa2dZMnhoYzNNOVhDSnRlUzFqWlhKMGFXWnBZMkYwYVc5dWN5MXBZMjl1SUdsamIyNHRkSEp2Y0doNUlHMXlMVEpjSWo0OEwyaytQSE53WVc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFl0YkdGdVp6MWNJaWRqWlhKMGFXWnBZMkYwYVc5dWN5NTBhR2x5WkNkY0lqNDhMM053WVc0K1BDOXNhVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTTlYQ0pzYVhOMExXbDBaVzFjSWo0OGFTQmpiR0Z6Y3oxY0ltMTVMV05sY25ScFptbGpZWFJwYjI1ekxXbGpiMjRnYVdOdmJpMTBjbTl3YUhrZ2JYSXRNbHdpUGp3dmFUNDhjM0JoYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkaTFzWVc1blBWd2lKMk5sY25ScFptbGpZWFJwYjI1ekxtWnZkWEluWENJK1BDOXpjR0Z1UGp3dmJHaytYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNWc1BseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSFZzUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3SUhZdGJHRnVaejFjSWlkalpYSjBhV1pwWTJGMGFXOXVjeTV0YjNKbEoxd2lQand2Y0Q1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZkV3crWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHlYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHlYRzRnSUNBZ1BDOWthWFkrWEhKY2Jqd3ZkR1Z0Y0d4aGRHVStYSEpjYmx4eVhHNDhjMk55YVhCMFBseHlYRzRnSUNBZ1pYaHdiM0owSUdSbFptRjFiSFFnZTF4eVhHNGdJQ0FnSUNBZ0lHNWhiV1U2SUZ3aWJTMWpaWEowYVdacFkyRjBhVzl1YzF3aVhISmNiaUFnSUNCOVhISmNiand2YzJOeWFYQjBQbHh5WEc1Y2NseHVQSE4wZVd4bElHeGhibWM5WENKelkzTnpYQ0krWEhKY2JpQWdJQ0JBYVcxd2IzSjBJRndpTGk0dmMyTnpjeTl0WVdsdVhDSTdYSEpjYmx4eVhHNGdJQ0FnTG0xNUxXTmxjblJwWm1sallYUnBiMjV6TFd4cGMzUWdlMXh5WEc0Z0lDQWdJQ0FnSUd4cGMzUXRjM1I1YkdVNklHNXZibVU3WEhKY2JpQWdJQ0FnSUNBZ2NHRmtaR2x1Wnkxc1pXWjBPaUF5Y21WdE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdWJHbHpkQzFwZEdWdElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXVkQzEzWldsbmFIUTZJRFV3TUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05dWRDMXphWHBsT2lBeExqTTFjbVZ0TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqb2dKR2R5WVhrdGNtVm5kV3hoY2p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXRlUzFqWlhKMGFXWnBZMkYwYVc5dWN5MXBZMjl1SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZiblF0YzJsNlpUb2dNUzR5Y21WdE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJNklDUmliSFZsTFhKbFozVnNZWEk3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiand2YzNSNWJHVStJaXdpUEhSbGJYQnNZWFJsUGx4eVhHNGdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltMTVMV052Ym5SbGJuUWdZMjl1ZEdGcGJtVnlMV1pzZFdsa0lIQXRNRndpUGx4eVhHNGdJQ0FnSUNBZ0lEeHpaV04wYVc5dUlHbGtQVndpWVdKdmRYUmNJaUJqYkdGemN6MWNJbTE1TFhObFkzUnBiMjRnY0MweklIQXRiR2N0TlNCa0xXWnNaWGdnWkMxamIyeDFiVzVjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUEcwdFlXSnZkWFErUEM5dExXRmliM1YwUGx4eVhHNGdJQ0FnSUNBZ0lEd3ZjMlZqZEdsdmJqNWNjbHh1SUNBZ0lDQWdJQ0E4YzJWamRHbHZiaUJwWkQxY0ltVjRjR1Z5YVdWdVkyVmNJaUJqYkdGemN6MWNJbTE1TFhObFkzUnBiMjRnY0MweklIQXRiR2N0TlNCa0xXWnNaWGdnWkMxamIyeDFiVzVjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUEcwdFpYaHdaWEpwWlc1alpUNDhMMjB0Wlhod1pYSnBaVzVqWlQ1Y2NseHVJQ0FnSUNBZ0lDQThMM05sWTNScGIyNCtYSEpjYmlBZ0lDQWdJQ0FnUEhObFkzUnBiMjRnYVdROVhDSmxaSFZqWVhScGIyNWNJaUJqYkdGemN6MWNJbTE1TFhObFkzUnBiMjRnY0MweklIQXRiR2N0TlNCa0xXWnNaWGdnWkMxamIyeDFiVzVjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUEcwdFpXUjFZMkYwYVc5dVBqd3ZiUzFsWkhWallYUnBiMjQrWEhKY2JpQWdJQ0FnSUNBZ1BDOXpaV04wYVc5dVBseHlYRzRnSUNBZ0lDQWdJRHh6WldOMGFXOXVJR2xrUFZ3aWMydHBiR3h6WENJZ1kyeGhjM005WENKdGVTMXpaV04wYVc5dUlIQXRNeUJ3TFd4bkxUVWdaQzFtYkdWNElHUXRZMjlzZFcxdVhDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEeHRMWE5yYVd4c2N6NDhMMjB0YzJ0cGJHeHpQbHh5WEc0Z0lDQWdJQ0FnSUR3dmMyVmpkR2x2Ymo1Y2NseHVJQ0FnSUNBZ0lDQThjMlZqZEdsdmJpQnBaRDFjSW1sdWRHVnlaWE4wYzF3aUlHTnNZWE56UFZ3aWJYa3RjMlZqZEdsdmJpQndMVE1nY0Mxc1p5MDFJR1F0Wm14bGVDQmtMV052YkhWdGJsd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThiUzFwYm5SbGNtVnpkSE0rUEM5dExXbHVkR1Z5WlhOMGN6NWNjbHh1SUNBZ0lDQWdJQ0E4TDNObFkzUnBiMjQrWEhKY2JpQWdJQ0FnSUNBZ1BITmxZM1JwYjI0Z2FXUTlYQ0pqWlhKMGFXWnBZMkYwYVc5dWMxd2lJR05zWVhOelBWd2liWGt0YzJWamRHbHZiaUJ3TFRNZ2NDMXNaeTAxSUdRdFpteGxlQ0JrTFdOdmJIVnRibHdpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4YlMxalpYSjBhV1pwWTJGMGFXOXVjejQ4TDIwdFkyVnlkR2xtYVdOaGRHbHZibk0rWEhKY2JpQWdJQ0FnSUNBZ1BDOXpaV04wYVc5dVBseHlYRzRnSUNBZ1BDOWthWFkrWEhKY2Jqd3ZkR1Z0Y0d4aGRHVStYSEpjYmx4eVhHNDhjMk55YVhCMFBseHlYRzRnSUNBZ2FXMXdiM0owSUUxQlltOTFkQ0JtY205dElGd2lMaTl0TFdGaWIzVjBMbloxWlZ3aU8xeHlYRzRnSUNBZ2FXMXdiM0owSUUxRmVIQmxjbWxsYm1ObElHWnliMjBnWENJdUwyMHRaWGh3WlhKcFpXNWpaUzUyZFdWY0lqdGNjbHh1SUNBZ0lHbHRjRzl5ZENCTlJXUjFZMkYwYVc5dUlHWnliMjBnWENJdUwyMHRaV1IxWTJGMGFXOXVMbloxWlZ3aU8xeHlYRzRnSUNBZ2FXMXdiM0owSUUxVGEybHNiSE1nWm5KdmJTQmNJaTR2YlMxemEybHNiSE11ZG5WbFhDSTdYSEpjYmlBZ0lDQnBiWEJ2Y25RZ1RVbHVkR1Z5WlhOMGN5Qm1jbTl0SUZ3aUxpOXRMV2x1ZEdWeVpYTjBjeTUyZFdWY0lqdGNjbHh1SUNBZ0lHbHRjRzl5ZENCTlEyVnlkR2xtYVdOaGRHbHZibk1nWm5KdmJTQmNJaTR2YlMxalpYSjBhV1pwWTJGMGFXOXVjeTUyZFdWY0lqdGNjbHh1WEhKY2JpQWdJQ0JsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dGNHOXVaVzUwY3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCTlEyVnlkR2xtYVdOaGRHbHZibk1zWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRTFKYm5SbGNtVnpkSE1zWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRTFUYTJsc2JITXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lFMUZlSEJsY21sbGJtTmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQk5RV0p2ZFhRc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUUxRlpIVmpZWFJwYjI1Y2NseHVJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUc1aGJXVTZJRndpYlMxamIyNTBaVzUwWENKY2NseHVJQ0FnSUgxY2NseHVQQzl6WTNKcGNIUStYSEpjYmx4eVhHNDhjM1I1YkdVZ2JHRnVaejFjSW5OamMzTmNJajVjY2x4dUlDQWdJRUJwYlhCdmNuUWdYQ0l1TGk5elkzTnpMMjFoYVc1Y0lqdGNjbHh1WEhKY2JpQWdJQ0F1YlhrdFkyOXVkR1Z1ZENCN1hISmNiaUFnSUNBZ0lDQWdjRzl6YVhScGIyNDZJSEpsYkdGMGFYWmxPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXViWGt0YzJWamRHbHZiaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFwYmkxb1pXbG5hSFE2SURFd01IWm9PMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmliM0prWlhJdFltOTBkRzl0T2lBeGNIZ2djMjlzYVdRZ0pHZHlZWGt0Y21WbmRXeGhjanRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiand2YzNSNWJHVStJaXdpUEhSbGJYQnNZWFJsUGx4eVhHNGdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltMTVMV0YxZEc5Y0lqNWNjbHh1SUNBZ0lDQWdJQ0E4YURJZ1kyeGhjM005WENKdGVTMWhZbTkxZEMxdVlXMWxJRzFpTFRVZ0xTMWlaV0poYzF3aUlIWXRiR0Z1WnoxY0lpZGxaSFZqWVhScGIyNHVkR2wwYkdVblhDSStQQzlvTWo1Y2NseHVJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpQVndpWkMxbWJHVjRJR1pzWlhndFkyOXNkVzF1SUdac1pYZ3RiV1F0Y205M0lHMWlMVFZjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0luSmxjM1Z0WlMxamIyNTBaVzUwSUcxeUxXRjFkRzljSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeG9NeUJqYkdGemN6MWNJbTFpTFRBZ0xTMWlaV0poYzF3aUlIWXRiR0Z1WnoxY0lpZGxaSFZqWVhScGIyNHVaR2R0WVNkY0lqNDhMMmd6UGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbk4xWW1obFlXUnBibWNnYldJdE15QXRMV0psWW1GelhDSWdkaTFzWVc1blBWd2lKMlZrZFdOaGRHbHZiaTVrWjIxaExYTndaV05wWVd3blhDSStQQzlrYVhZK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpQVndpYlhrdFpHRjBaU0IwWlhoMExXMWtMWEpwWjJoMFhDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNCaGJpQmpiR0Z6Y3oxY0lpMHRiWGt0WTI5c2IzSmNJaUIyTFd4aGJtYzlYQ0luWldSMVkyRjBhVzl1TG1SbmJXRXRkR2x0WlNkY0lqNDhMM053WVc0K1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSmtMV1pzWlhnZ1pteGxlQzFqYjJ4MWJXNGdabXhsZUMxdFpDMXliM2NnYldJdE5Wd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpQVndpY21WemRXMWxMV052Ym5SbGJuUWdiWEl0WVhWMGIxd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdneklHTnNZWE56UFZ3aWJXSXRNQ0F0TFdKbFltRnpYQ0lnZGkxc1lXNW5QVndpSjJWa2RXTmhkR2x2Ymk1a2JYUW5YQ0krUEM5b016NWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKemRXSm9aV0ZrYVc1bklHMWlMVE1nTFMxaVpXSmhjMXdpSUhZdGJHRnVaejFjSWlkbFpIVmpZWFJwYjI0dVpHMTBMWE53WldOcFlXd25YQ0krUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWJYa3RaR0YwWlNCMFpYaDBMVzFrTFhKcFoyaDBYQ0krWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUJqYkdGemN6MWNJaTB0YlhrdFkyOXNiM0pjSWlCMkxXeGhibWM5WENJblpXUjFZMkYwYVc5dUxtUnRkQzEwYVcxbEoxd2lQand2YzNCaGJqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0E4TDJScGRqNWNjbHh1UEM5MFpXMXdiR0YwWlQ1Y2NseHVYSEpjYmp4elkzSnBjSFErWEhKY2JpQWdJQ0JsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYSEpjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dYQ0p0TFdWa2RXTmhkR2x2Ymx3aVhISmNiaUFnSUNCOVhISmNiand2YzJOeWFYQjBQbHh5WEc1Y2NseHVQSE4wZVd4bElHeGhibWM5WENKelkzTnpYQ0krWEhKY2JpQWdJQ0JBYVcxd2IzSjBJRndpTGk0dmMyTnpjeTl0WVdsdVhDSTdYSEpjYmx4eVhHNGdJQ0FnTG0xNUxXRjFkRzhnZTF4eVhHNGdJQ0FnSUNBZ0lIZHBaSFJvT2lBeE1EQWxPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM1dGVTMWtZWFJsSUh0Y2NseHVJQ0FnSUNBZ0lDQnRhVzR0ZDJsa2RHZzZJREU0Y21WdE8xeHlYRzRnSUNBZ0lDQWdJR1p2Ym5RdGQyVnBaMmgwT2lBMU1EQTdYSEpjYmlBZ0lDQWdJQ0FnWm05dWRDMXphWHBsT2lBeExqSnlaVzA3WEhKY2JpQWdJQ0I5WEhKY2Jqd3ZjM1I1YkdVK0lpd2lQSFJsYlhCc1lYUmxQbHh5WEc0Z0lDQWdQR1JwZGlCamJHRnpjejFjSW0xNUxXRjFkRzljSWo1Y2NseHVJQ0FnSUNBZ0lDQThhRElnWTJ4aGMzTTlYQ0p0ZVMxaFltOTFkQzF1WVcxbElHMWlMVFVnTFMxaVpXSmhjMXdpSUhZdGJHRnVaejFjSWlkbGVIQmxjbWxsYm1ObExuUnBkR3hsSjF3aVBqd3ZhREkrWEhKY2JpQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbVF0Wm14bGVDQm1iR1Y0TFdOdmJIVnRiaUJtYkdWNExXMWtMWEp2ZHlCdFlpMDFYQ0krWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKeVpYTjFiV1V0WTI5dWRHVnVkQ0J0Y2kxaGRYUnZYQ0krWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGFETWdZMnhoYzNNOVhDSnRZaTB3SUMwdFltVmlZWE5jSWo1TmFXUmtiR1VnVjJWaUlFUmxkbVZzYjNCbGNqd3ZhRE0rWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2ljM1ZpYUdWaFpHbHVaeUJ0WWkweklDMHRZbVZpWVhOY0lqNUpWQ0F5TGpBOEwyUnBkajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d0lHTnNZWE56UFZ3aWMzVmlhR1ZoWkdsdVp5QXRMV0ZqY205aVlYUmNJaUIyTFd4aGJtYzlYQ0luWlhod1pYSnBaVzVqWlM1cGRESXdKMXdpUGp3dmNENWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKdGVTMWtZWFJsSUhSbGVIUXRiV1F0Y21sbmFIUmNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emNHRnVJR05zWVhOelBWd2lMUzF0ZVMxamIyeHZjbHdpSUhZdGJHRnVaejFjSWlkbGVIQmxjbWxsYm1ObExtbDBNakF0ZEdsdFpTZGNJajQ4TDNOd1lXNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0prTFdac1pYZ2dabXhsZUMxamIyeDFiVzRnWm14bGVDMXRaQzF5YjNjZ2JXSXROVndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWNtVnpkVzFsTFdOdmJuUmxiblFnYlhJdFlYVjBiMXdpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHZ3pJR05zWVhOelBWd2liV0l0TUNBdExXSmxZbUZ6WENJK1NuVnVhVzl5SUZkbFlpQkVaWFpsYkc5d1pYSThMMmd6UGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbk4xWW1obFlXUnBibWNnYldJdE15QXRMV0psWW1GelhDSStVWFZoY25SVGIyWjBQQzlrYVhZK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjQ0JqYkdGemN6MWNJbk4xWW1obFlXUnBibWNnTFMxaFkzSnZZbUYwWENJZ2RpMXNZVzVuUFZ3aUoyVjRjR1Z5YVdWdVkyVXVjWE1uWENJK1BDOXdQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltMTVMV1JoZEdVZ2RHVjRkQzF0WkMxeWFXZG9kRndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTTlYQ0l0TFcxNUxXTnZiRzl5WENJZ2RpMXNZVzVuUFZ3aUoyVjRjR1Z5YVdWdVkyVXVjWE10ZEdsdFpTZGNJajQ4TDNOd1lXNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0prTFdac1pYZ2dabXhsZUMxamIyeDFiVzRnWm14bGVDMXRaQzF5YjNjZ2JXSXROVndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWNtVnpkVzFsTFdOdmJuUmxiblFnYlhJdFlYVjBiMXdpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHZ3pJR05zWVhOelBWd2liV0l0TUNBdExXSmxZbUZ6WENJZ2RpMXNZVzVuUFZ3aUoyVjRjR1Z5YVdWdVkyVXViV1YyY3kxd2IzTW5YQ0krUEM5b016NWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKemRXSm9aV0ZrYVc1bklHMWlMVE1nTFMxaVpXSmhjMXdpUGsxRlZsTThMMlJwZGo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdJR05zWVhOelBWd2ljM1ZpYUdWaFpHbHVaeUF0TFdGamNtOWlZWFJjSWlCMkxXeGhibWM5WENJblpYaHdaWEpwWlc1alpTNXRaWFp6SjF3aVBqd3ZjRDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSnRlUzFrWVhSbElIUmxlSFF0YldRdGNtbG5hSFJjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHpjR0Z1SUdOc1lYTnpQVndpTFMxdGVTMWpiMnh2Y2x3aUlIWXRiR0Z1WnoxY0lpZGxlSEJsY21sbGJtTmxMbTFsZG5NdGRHbHRaU2RjSWo0OEwzTndZVzQrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHlYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHlYRzRnSUNBZ1BDOWthWFkrWEhKY2Jqd3ZkR1Z0Y0d4aGRHVStYSEpjYmx4eVhHNDhjMk55YVhCMFBseHlYRzRnSUNBZ1pYaHdiM0owSUdSbFptRjFiSFFnZTF4eVhHNGdJQ0FnSUNBZ0lHNWhiV1U2SUZ3aWJTMWxlSEJsY21sbGJtTmxYQ0pjY2x4dUlDQWdJSDFjY2x4dVBDOXpZM0pwY0hRK1hISmNibHh5WEc0OGMzUjViR1VnYkdGdVp6MWNJbk5qYzNOY0lqNWNjbHh1SUNBZ0lFQnBiWEJ2Y25RZ1hDSXVMaTl6WTNOekwyMWhhVzVjSWp0Y2NseHVYSEpjYmlBZ0lDQXViWGt0WkdGMFpTQjdYSEpjYmlBZ0lDQWdJQ0FnYldsdUxYZHBaSFJvT2lBeE9ISmxiVHRjY2x4dUlDQWdJQ0FnSUNCbWIyNTBMWGRsYVdkb2REb2dOVEF3TzF4eVhHNGdJQ0FnSUNBZ0lHWnZiblF0YzJsNlpUb2dNUzR5Y21WdE8xeHlYRzRnSUNBZ2ZWeHlYRzQ4TDNOMGVXeGxQaUlzSWp4MFpXMXdiR0YwWlQ1Y2NseHVJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSnRlUzFoZFhSdlhDSStYSEpjYmlBZ0lDQWdJQ0FnUEdneUlHTnNZWE56UFZ3aWJYa3RZV0p2ZFhRdGJtRnRaU0J0WWkwMUlDMHRZbVZpWVhOY0lpQjJMV3hoYm1jOVhDSW5hVzUwWlhKbGMzUnpMblJwZEd4bEoxd2lQand2YURJK1hISmNiaUFnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW1RdFpteGxlQ0JtYkdWNExXTnZiSFZ0YmlCbWJHVjRMVzFrTFhKdmR5QnRZaTAxWENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSnlaWE4xYldVdFkyOXVkR1Z1ZENCdGNpMWhkWFJ2WENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjQ0JqYkdGemN6MWNJbk4xWW1obFlXUnBibWNnTFMxaFkzSnZZbUYwWENJZ2RpMXNZVzVuUFZ3aUoybHVkR1Z5WlhOMGN5NTBaWGgwSjF3aVBqd3ZjRDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hISmNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hISmNiaUFnSUNBOEwyUnBkajVjY2x4dVBDOTBaVzF3YkdGMFpUNWNjbHh1WEhKY2JqeHpZM0pwY0hRK1hISmNiaUFnSUNCbGVIQnZjblFnWkdWbVlYVnNkQ0I3WEhKY2JpQWdJQ0FnSUNBZ2JtRnRaVG9nWENKdExXbHVkR1Z5WlhOMGMxd2lYSEpjYmlBZ0lDQjlYSEpjYmp3dmMyTnlhWEIwUGx4eVhHNWNjbHh1UEhOMGVXeGxJR3hoYm1jOVhDSnpZM056WENJK1hISmNiaUFnSUNCQWFXMXdiM0owSUZ3aUxpNHZjMk56Y3k5dFlXbHVYQ0k3WEhKY2Jqd3ZjM1I1YkdVK0lpd2lQSFJsYlhCc1lYUmxQbHh5WEc0Z0lDQWdQR1JwZGlCamJHRnpjejFjSW0xNUxXRjFkRzljSWo1Y2NseHVJQ0FnSUNBZ0lDQThhRElnWTJ4aGMzTTlYQ0p0ZVMxaFltOTFkQzF1WVcxbElHMWlMVFVnTFMxaVpXSmhjMXdpSUhZdGJHRnVaejFjSWlkemEybHNiSE11ZEdsMGJHVW5YQ0krUEM5b01qNWNjbHh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVpDMW1iR1Y0SUdac1pYZ3RZMjlzZFcxdUlHWnNaWGd0YldRdGNtOTNJRzFpTFRWY0lqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbkpsYzNWdFpTMWpiMjUwWlc1MElHMXlMV0YxZEc5Y0lqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKemRXSm9aV0ZrYVc1bklHMWlMVE1nTFMxaVpXSmhjMXdpSUhZdGJHRnVaejFjSWlkemEybHNiSE11YkdGdVozVmhaMlZ6SjF3aVBqd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIVnNJR05zWVhOelBWd2liR2x6ZEMxcGJteHBibVVnYkdsemRDMXBZMjl1YzF3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4c2FTQmpiR0Z6Y3oxY0lteHBjM1F0YVc1c2FXNWxMV2wwWlcxY0lpQjJMV0l0ZEc5dmJIUnBjQzVvYjNabGNpQjBhWFJzWlQxY0lraFVUVXcxWENJK1BITndZVzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56UFZ3aWMydHBiR3h6TFdsamIyNGdhV052Ymkxb2RHMXNOVndpUGp3dmMzQmhiajQ4TDJ4cFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4c2FTQmpiR0Z6Y3oxY0lteHBjM1F0YVc1c2FXNWxMV2wwWlcxY0lpQjJMV0l0ZEc5dmJIUnBjQzVvYjNabGNpQjBhWFJzWlQxY0lrTlRVek5jSWo0OGMzQmhibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM005WENKemEybHNiSE10YVdOdmJpQnBZMjl1TFdOemN6TmNJajQ4TDNOd1lXNCtQQzlzYVQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YkdrZ1kyeGhjM005WENKc2FYTjBMV2x1YkdsdVpTMXBkR1Z0WENJZ2RpMWlMWFJ2YjJ4MGFYQXVhRzkyWlhJZ2RHbDBiR1U5WENKS1lYWmhVMk55YVhCMFhDSStQSE53WVc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelBWd2ljMnRwYkd4ekxXbGpiMjRnYVdOdmJpMXFZWFpoYzJOeWFYQjBYQ0krUEM5emNHRnVQand2YkdrK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEd4cElHTnNZWE56UFZ3aWJHbHpkQzFwYm14cGJtVXRhWFJsYlZ3aUlIWXRZaTEwYjI5c2RHbHdMbWh2ZG1WeUlIUnBkR3hsUFZ3aWFsRjFaWEo1WENJK1BITndZVzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56UFZ3aWMydHBiR3h6TFdsamIyNGdhV052YmkxcWNYVmxjbmxjSWo0OEwzTndZVzQrUEM5c2FUNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGJHa2dZMnhoYzNNOVhDSnNhWE4wTFdsdWJHbHVaUzFwZEdWdFhDSWdkaTFpTFhSdmIyeDBhWEF1YUc5MlpYSWdkR2wwYkdVOVhDSktVMDlPWENJK1BITndZVzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56UFZ3aWMydHBiR3h6TFdsamIyNGdhV052YmkxcWMyOXVYQ0krUEM5emNHRnVQand2YkdrK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEd4cElHTnNZWE56UFZ3aWJHbHpkQzFwYm14cGJtVXRhWFJsYlZ3aUlIWXRZaTEwYjI5c2RHbHdMbWh2ZG1WeUlIUnBkR3hsUFZ3aVVFaFFYQ0krUEhOd1lXNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpQVndpYzJ0cGJHeHpMV2xqYjI0Z2FXTnZiaTF3YUhCY0lqNDhMM053WVc0K1BDOXNhVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTTlYQ0pzYVhOMExXbHViR2x1WlMxcGRHVnRYQ0lnZGkxaUxYUnZiMngwYVhBdWFHOTJaWElnZEdsMGJHVTlYQ0pOZVZOUlRGd2lQanh6Y0dGdVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemN6MWNJbk5yYVd4c2N5MXBZMjl1SUdsamIyNHRiWGx6Y1d4Y0lqNDhMM053WVc0K1BDOXNhVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTTlYQ0pzYVhOMExXbHViR2x1WlMxcGRHVnRYQ0lnZGkxaUxYUnZiMngwYVhBdWFHOTJaWElnZEdsMGJHVTlYQ0pUUVZOVFhDSStQSE53WVc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelBWd2ljMnRwYkd4ekxXbGpiMjRnYVdOdmJpMXpZWE56WENJK1BDOXpjR0Z1UGp3dmJHaytYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNWc1BseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW5OMVltaGxZV1JwYm1jZ2JXSXRNeUF0TFdKbFltRnpYQ0lnZGkxc1lXNW5QVndpSjNOcmFXeHNjeTUwYjI5c2N5ZGNJajQ4TDJScGRqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHgxYkNCamJHRnpjejFjSW14cGMzUXRhVzVzYVc1bElHeHBjM1F0YVdOdmJuTmNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTTlYQ0pzYVhOMExXbHViR2x1WlMxcGRHVnRYQ0lnZGkxaUxYUnZiMngwYVhBdWFHOTJaWElnZEdsMGJHVTlYQ0p1Y0cxY0lqNDhjM0JoYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNNOVhDSnphMmxzYkhNdGFXTnZiaUJwWTI5dUxXNXdiVndpUGp3dmMzQmhiajQ4TDJ4cFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4c2FTQmpiR0Z6Y3oxY0lteHBjM1F0YVc1c2FXNWxMV2wwWlcxY0lpQjJMV0l0ZEc5dmJIUnBjQzVvYjNabGNpQjBhWFJzWlQxY0lrZDFiSEJjSWo0OGMzQmhibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM005WENKemEybHNiSE10YVdOdmJpQnBZMjl1TFdkMWJIQmNJajQ4TDNOd1lXNCtQQzlzYVQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YkdrZ1kyeGhjM005WENKc2FYTjBMV2x1YkdsdVpTMXBkR1Z0WENJZ2RpMWlMWFJ2YjJ4MGFYQXVhRzkyWlhJZ2RHbDBiR1U5WENKWFpXSndZV05yWENJK1BITndZVzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56UFZ3aWMydHBiR3h6TFdsamIyNGdhV052YmkxM1pXSndZV05yWENJK1BDOXpjR0Z1UGp3dmJHaytYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHeHBJR05zWVhOelBWd2liR2x6ZEMxcGJteHBibVV0YVhSbGJWd2lJSFl0WWkxMGIyOXNkR2x3TG1odmRtVnlJSFJwZEd4bFBWd2lSMmwwWENJK1BITndZVzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56UFZ3aWMydHBiR3h6TFdsamIyNGdhV052YmkxbmFYUmNJajQ4TDNOd1lXNCtQQzlzYVQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YkdrZ1kyeGhjM005WENKc2FYTjBMV2x1YkdsdVpTMXBkR1Z0WENJZ2RpMWlMWFJ2YjJ4MGFYQXVhRzkyWlhJZ2RHbDBiR1U5WENKVGRXSjJaWEp6YVc5dVhDSStQSE53WVc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelBWd2ljMnRwYkd4ekxXbGpiMjRnYVdOdmJpMXpkV0oyWlhKemFXOXVYQ0krUEM5emNHRnVQand2YkdrK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEd4cElHTnNZWE56UFZ3aWJHbHpkQzFwYm14cGJtVXRhWFJsYlZ3aUlIWXRZaTEwYjI5c2RHbHdMbWh2ZG1WeUlIUnBkR3hsUFZ3aVYyVmlVM1J2Y20xY0lqNDhjM0JoYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNNOVhDSnphMmxzYkhNdGFXTnZiaUJwWTI5dUxYZGxZbk4wYjNKdFhDSStQQzl6Y0dGdVBqd3ZiR2srWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR3hwSUdOc1lYTnpQVndpYkdsemRDMXBibXhwYm1VdGFYUmxiVndpSUhZdFlpMTBiMjlzZEdsd0xtaHZkbVZ5SUhScGRHeGxQVndpVTNWaWJHbHRaWFJsZUhSY0lqNDhjM0JoYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNNOVhDSnphMmxzYkhNdGFXTnZiaUJwWTI5dUxYTjFZbXhwYldWMFpYaDBYQ0krUEM5emNHRnVQand2YkdrK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEd4cElHTnNZWE56UFZ3aWJHbHpkQzFwYm14cGJtVXRhWFJsYlZ3aUlIWXRZaTEwYjI5c2RHbHdMbWh2ZG1WeUlIUnBkR3hsUFZ3aVVHaHZkRzl6YUc5d1hDSStQSE53WVc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelBWd2ljMnRwYkd4ekxXbGpiMjRnYVdOdmJpMWhaRzlpWlhCb2IzUnZjMmh2Y0Z3aVBqd3ZjM0JoYmo0OEwyeHBQbHh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZkV3crWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2ljM1ZpYUdWaFpHbHVaeUJ0WWkweklDMHRZbVZpWVhOY0lpQjJMV3hoYm1jOVhDSW5jMnRwYkd4ekxtWnlZVzFsZDI5eWEzTW5YQ0krUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4ZFd3Z1kyeGhjM005WENKc2FYTjBMV2x1YkdsdVpTQnNhWE4wTFdsamIyNXpYQ0krWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR3hwSUdOc1lYTnpQVndpYkdsemRDMXBibXhwYm1VdGFYUmxiVndpSUhZdFlpMTBiMjlzZEdsd0xtaHZkbVZ5SUhScGRHeGxQVndpVm5WbExtcHpYQ0krUEhOd1lXNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpQVndpYzJ0cGJHeHpMV2xqYjI0Z2FXTnZiaTEyZFdWcWMxd2lQand2YzNCaGJqNDhMMnhwUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhzYVNCamJHRnpjejFjSW14cGMzUXRhVzVzYVc1bExXbDBaVzFjSWlCMkxXSXRkRzl2YkhScGNDNW9iM1psY2lCMGFYUnNaVDFjSWtKdmIzUnpkSEpoY0Z3aVBqeHpjR0Z1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6Y3oxY0luTnJhV3hzY3kxcFkyOXVJR2xqYjI0dFltOXZkSE4wY21Gd1hDSStQQzl6Y0dGdVBqd3ZiR2srWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR3hwSUdOc1lYTnpQVndpYkdsemRDMXBibXhwYm1VdGFYUmxiVndpSUhZdFlpMTBiMjlzZEdsd0xtaHZkbVZ5SUhScGRHeGxQVndpU205dmJXeGhYQ0krUEhOd1lXNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpQVndpYzJ0cGJHeHpMV2xqYjI0Z2FXTnZiaTFxYjI5dGJHRmNJajQ4TDNOd1lXNCtQQzlzYVQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YkdrZ1kyeGhjM005WENKc2FYTjBMV2x1YkdsdVpTMXBkR1Z0WENJZ2RpMWlMWFJ2YjJ4MGFYQXVhRzkyWlhJZ2RHbDBiR1U5WENKTVlYSmhkbVZzWENJK1BITndZVzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56UFZ3aWMydHBiR3h6TFdsamIyNGdhV052Ymkxc1lYSmhkbVZzWENJK1BDOXpjR0Z1UGp3dmJHaytYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHeHBJR05zWVhOelBWd2liR2x6ZEMxcGJteHBibVV0YVhSbGJWd2lJSFl0WWkxMGIyOXNkR2x3TG1odmRtVnlJSFJwZEd4bFBWd2lWMjl5WkZCeVpYTnpYQ0krUEhOd1lXNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpQVndpYzJ0cGJHeHpMV2xqYjI0Z2FXTnZiaTEzYjNKa2NISmxjM05jSWo0OEwzTndZVzQrUEM5c2FUNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2ZFd3K1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpQVndpYzNWaWFHVmhaR2x1WnlCdFlpMHpJQzB0WW1WaVlYTmNJaUIyTFd4aGJtYzlYQ0luYzJ0cGJHeHpMbmR2Y210bWJHOTNKMXdpUGp3dlpHbDJQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhWc0lHTnNZWE56UFZ3aWJHbHpkQ0J0ZVMxamFHVmpheTFzYVhOMFhDSStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHeHBJR05zWVhOelBWd2liR2x6ZEMxcGRHVnRYQ0krUEdrZ1kyeGhjM005WENKdGVTMWphR1ZqYXkxcFkyOXVJR2xqYjI0dFkyaGxZMnNnYlhJdE1sd2lQand2YVQ0OGMzQmhibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RpMXNZVzVuUFZ3aUozTnJhV3hzY3k1bWFYSnpkQ2RjSWo0OEwzTndZVzQrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlzYVQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YkdrZ1kyeGhjM005WENKc2FYTjBMV2wwWlcxY0lqNDhhU0JqYkdGemN6MWNJbTE1TFdOb1pXTnJMV2xqYjI0Z2FXTnZiaTFqYUdWamF5QnRjaTB5WENJK1BDOXBQanh6Y0dGdVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyTFd4aGJtYzlYQ0luYzJ0cGJHeHpMbk5sWTI5dVpDZGNJajQ4TDNOd1lXNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOXNhVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTTlYQ0pzYVhOMExXbDBaVzFjSWo0OGFTQmpiR0Z6Y3oxY0ltMTVMV05vWldOckxXbGpiMjRnYVdOdmJpMWphR1ZqYXlCdGNpMHlYQ0krUEM5cFBqeHpjR0Z1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJMV3hoYm1jOVhDSW5jMnRwYkd4ekxuUm9hWEprSjF3aVBqd3ZjM0JoYmo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJ4cFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4c2FTQmpiR0Z6Y3oxY0lteHBjM1F0YVhSbGJWd2lQanhwSUdOc1lYTnpQVndpYlhrdFkyaGxZMnN0YVdOdmJpQnBZMjl1TFdOb1pXTnJJRzF5TFRKY0lqNDhMMmsrUEhOd1lXNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZdGJHRnVaejFjSWlkemEybHNiSE11Wm05MWNpZGNJajQ4TDNOd1lXNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOXNhVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTTlYQ0pzYVhOMExXbDBaVzFjSWo0OGFTQmpiR0Z6Y3oxY0ltMTVMV05vWldOckxXbGpiMjRnYVdOdmJpMWphR1ZqYXlCdGNpMHlYQ0krUEM5cFBqeHpjR0Z1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJMV3hoYm1jOVhDSW5jMnRwYkd4ekxtWnBkbVVuWENJK1BDOXpjR0Z1UGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YkdrK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEd4cElHTnNZWE56UFZ3aWJHbHpkQzFwZEdWdFhDSStQR2tnWTJ4aGMzTTlYQ0p0ZVMxamFHVmpheTFwWTI5dUlHbGpiMjR0WTJobFkyc2diWEl0TWx3aVBqd3ZhVDQ4YzNCaGJseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZGkxc1lXNW5QVndpSjNOcmFXeHNjeTV6YVhnblhDSStQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmJHaytYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNWc1BseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjY2x4dUlDQWdJQ0FnSUNBOEwyUnBkajVjY2x4dUlDQWdJRHd2WkdsMlBseHlYRzQ4TDNSbGJYQnNZWFJsUGx4eVhHNWNjbHh1UEhOamNtbHdkRDVjY2x4dUlDQWdJR1Y0Y0c5eWRDQmtaV1poZFd4MElIdGNjbHh1SUNBZ0lDQWdJQ0J1WVcxbE9pQmNJbTB0YzJ0cGJHeHpYQ0pjY2x4dUlDQWdJSDFjY2x4dVBDOXpZM0pwY0hRK1hISmNibHh5WEc0OGMzUjViR1VnYkdGdVp6MWNJbk5qYzNOY0lqNWNjbHh1SUNBZ0lFQnBiWEJ2Y25RZ1hDSXVMaTl6WTNOekwyMWhhVzVjSWp0Y2NseHVYSEpjYmlBZ0lDQXViWGt0WTJobFkyc3RiR2x6ZENCN1hISmNiaUFnSUNBZ0lDQWdiR2x6ZEMxemRIbHNaVG9nYm05dVpUdGNjbHh1SUNBZ0lDQWdJQ0J3WVdSa2FXNW5MV3hsWm5RNklESnlaVzA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzVzYVhOMExXbDBaVzBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjI1MExYZGxhV2RvZERvZ05UQXdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iMjUwTFhOcGVtVTZJREV1TXpWeVpXMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lBa1ozSmhlUzF5WldkMWJHRnlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTG0xNUxXTm9aV05yTFdsamIyNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05dWRDMXphWHBsT2lBeGNtVnRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJQ1JpYkhWbExYSmxaM1ZzWVhJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYzNCaGJpNXphMmxzYkhNdGFXTnZiaUI3WEhKY2JpQWdJQ0FnSUNBZ1ptOXVkQzF6YVhwbE9pQXljbVZ0TzF4eVhHNGdJQ0FnSUNBZ0lHTnZiRzl5T2lBa1lteDFaUzF5WldkMWJHRnlPMXh5WEc0Z0lDQWdJQ0FnSUdOMWNuTnZjam9nY0c5cGJuUmxjanRjY2x4dVhISmNiaUFnSUNBZ0lDQWdKanBvYjNabGNpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lBa1lteDFaUzFrWVhKcmJtVnpjenRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiand2YzNSNWJHVStJbDE5In0=
